package com.abztrakinc.ABZPOS.CASHIER;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.cardview.widget.CardView;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.Printer;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.Toast;

import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutionException;

import com.abztrakinc.ABZPOS.ADMIN.Header_Footer_class;
import com.abztrakinc.ABZPOS.ADMIN.POS_TYPE;
import com.abztrakinc.ABZPOS.ADMIN.printer_settings_class;
import com.abztrakinc.ABZPOS.CASHIER.Invoice.Recyclerview.invoice_discount_model;
import com.abztrakinc.ABZPOS.CASHIER.Invoice.Recyclerview.invoice_fragment_button_model;
import com.abztrakinc.ABZPOS.DatabaseHandler;
import com.abztrakinc.ABZPOS.InvoiceItem;
import com.abztrakinc.ABZPOS.LOGIN.shift_active;
import com.abztrakinc.ABZPOS.MainActivity;
import com.abztrakinc.ABZPOS.MyKeyboard;
import com.abztrakinc.ABZPOS.ORDERSTATION.orderItem;
import com.abztrakinc.ABZPOS.ORDERSTATION.orderItemDiscount;
import com.abztrakinc.ABZPOS.OR_TRANS_ITEM;
import com.abztrakinc.ABZPOS.R;
import com.abztrakinc.ABZPOS.TCSKeyboard.KeyCodeManager;
import com.abztrakinc.ABZPOS.TCSKeyboard.KeyboardDevice;
import com.abztrakinc.ABZPOS.TCSKeyboard.SoftKeyboard;
import com.abztrakinc.ABZPOS.settingsDB;
import com.abztrakinc.ABZPOS.system_final_date;
import com.zqprintersdk.PrinterConst;

import net.posprinter.IDeviceConnection;
import net.posprinter.POSConnect;
import net.posprinter.POSPrinter;

import org.antlr.v4.codegen.model.Loop;


public class cashier_payment extends Fragment {

    View view;
    View view_line;
    EditText et_cash;
    Button keyboard;
    String DB_NAME = "PosSettings.db";
    String HeaderContent,FooterContent;
    LinearLayout ll_dropdown;
    String VatIndicator;

    int readingIndicator;
    String printerName="printer001";
    String printData="TESTTTT \n \n \n \n \n \n ";
    Date currentDate = Calendar.getInstance().getTime();
    DateFormat timeOnly = new SimpleDateFormat("HH:mm:ss");
    String paymentRenderedAmount,
            ChangeAmount,
            typeOfPayment;
    String TransTime,TransUser;
    String modePayment="";
    int multiplePayment=0; //if 0 only 1 payment(cash/debit/etc) if 1 mix payment
    int allowInsertMultipleInvoice=1;
    private boolean mWasEdited = false;
    TextView lbl_subtotal, lbl_due,lbl_dueFinal, lbl_discount, lbl_total, lbl_tax,tv_lessVat,tv_vatExemptSale,tv_zeroRatedSales,btn_diplomatPayment;
    Button creditCardPayment,debitCardPayment,cashPayment,chargePayment,giftCheckPayment,btn_discount,btn_otherPayment;
    LinearLayout ll_forDiscountType;
    TextView lbl_discountLabel;
    String otherPaymentMode;
    String otherPaymentReference="";
    TextView myLabel;

    // will enable user to enter any text to be printed
    EditText myTextbox;

    // android built in classes for bluetooth operations
    BluetoothAdapter mBluetoothAdapter;
    BluetoothSocket mmSocket;
    BluetoothDevice mmDevice;

    // needed for communication to bluetooth device / network
    OutputStream mmOutputStream;
    InputStream mmInputStream;
    Thread workerThread;
    bank_transaction_variables bankTransactionVar;
    String ItemBarcode;
    DecimalFormat DecFormat = new DecimalFormat("#,###.00");

    byte[] readBuffer;
    int readBufferPosition;
    volatile boolean stopWorker;
    private SimpleDateFormat dateFormat2;
    int printerSignal=0;
    ArrayList<String>BankListCredit=new ArrayList<>();
    ArrayList<String>BankListDebit=new ArrayList<>();
    cashier_payment_item cashierItem;
    String FinalDate;
    String amountToPayFormatted="";
    String vatableAmountFormatted="";
    String amountDiscountFormatted="";
    String taxDiscountted="";
    String totalVatExemptSaleFormatted="";
    String totalZeroRatedFormatted="";
    String totalAmountToPayFormatted="";
    String totalLessVatFormatted="";
    int discountFormat=1; // if 1 discount per Item format if 2 discount per Transaction Format
    int discountLabelIndicator=1; //if 1=no discount 2=regular discount 3=senior 4=pwd 5=diplomat
    printer_settings_class PrinterSettings;
    private ArrayList<String> DiscountAutoIDList;
    private ArrayList<String> DiscountIDList;
    private ArrayList<String> DiscountNameList;
    private ArrayList<String> DiscountAmountList;
    private ArrayList<String> DiscountComputationList;

    private ArrayList<String> DiscountTypeList;
    private ArrayList<String> DiscCategoryList;
    private ArrayList<String> DiscountExcludeTaxList;
    private ArrayList<String> SalesExcludeTaxList;
    private ArrayList<String> ProRatedTaxList;
    private ArrayList<String> MaxDiscountAmtList;
    private ArrayList<String> OpenDiscountList;

    String RemoveDiscountOnVatsales ="YES";


    //Other payment

    private ArrayList<String> OtherPaymentAutoIDList;
    private ArrayList<String> PaymentNameList;
    private ArrayList<String> AllowReferenceList;
    private ArrayList<String> AllowUserDetailsList;



    String discountType;
    int totalDiscountButtonList=0;
    int totalPaymentButtonList=0;

    String discountValue="0.00";
    String discountExlude;
    String salesExlude;
    String ProRated;
    String MaxDiscountAmt;
    String OpenDiscount;

    int lblDatactr=0;


    private ArrayList<String> invoiceItemName;
    private ArrayList<String> invoiceItemCode;
    private ArrayList<Integer> invoiceItemPrice;
    private ArrayList<String> invoiceItemPriceTotal;
    private ArrayList<String> invoiceItemQty;
    private ArrayList<String> invoiceRemarks;
    private ArrayList<String> invoiceItemQtyDisc;
    private ArrayList<String>invoiceItemVatIndicator;
    List<orderItem> orderItemList = new ArrayList<>();
    List<InvoiceItem> InvoiceItemList = new ArrayList<>();
    List<orderItemDiscount> orderItemListDisc = new ArrayList<>();
    ArrayList<String> selectList = new ArrayList<>();

    private RecyclerView recyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager layoutManager;
    Cursor itemListC;

    // File receiptFile=new File(Environment.getExternalStorageDirectory()+"/ANDROID_POS/RECEIPT FILE/");


    String DB_NAME2 = "PosOutputDB.db";
    Cursor item2;
    DecimalFormat Finalformat = new DecimalFormat("0.00");
    String transactionIDFinal,transactionOrderQtyFinal;
    Double transactionOrderPriceTotalFinal=0.00;
    Double transactionOrderPriceTotalFinalDiscount=0.00;
    String discCategory;
    Double negVat=0.00;
    String finalDiscQty;
    String transactionType;
    String readRefNumber;
    POS_TYPE businessType = new POS_TYPE();
    cashier_invoice_dialog_cust_info custInfo;

    //non-vat

    //int vatIndicator=0; //0 nonvat //1 vat

    vat_indicator vatIndicator;
    EditText et_quantity;
    AlertDialog alertDialogQty;



    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        view = inflater.inflate(R.layout.cashier_payment_main, container, false);
        et_cash = view.findViewById(R.id.et_cash);
        cashPayment = view.findViewById(R.id.cashPayment);
        debitCardPayment = view.findViewById(R.id.debitCardPayment);
        creditCardPayment=view.findViewById(R.id.creditCardPayment);
  //      giftCheckPayment =view.findViewById(R.id.giftCheckPayment);
        btn_discount=view.findViewById(R.id.btn_discountList);
        ll_forDiscountType=view.findViewById(R.id.ll_forDiscountType);
        btn_otherPayment=view.findViewById(R.id.btn_otherPayment);

        view_line = view.findViewById(R.id.view_line);

        // chargePayment=view.findViewById(R.id.chargePayment);

        // btn_completeTransaction=view.findViewById(R.id.btn_completeTransaction);
        bankTransactionVar= new bank_transaction_variables();
        tv_lessVat=view.findViewById(R.id.tv_lessVat);
        tv_vatExemptSale=view.findViewById(R.id.tv_vatExemptSale);
        lbl_discountLabel=view.findViewById(R.id.lbl_discountLabel);
        custInfo = new cashier_invoice_dialog_cust_info();

        vatIndicator = new vat_indicator();









        ShowKeyboard();

        Button btn_enter = view.findViewById(R.id.button_enter);
        Button btn_reset = view.findViewById(R.id.btn_reset); // for connect testing
        Button btn_cancel = view.findViewById(R.id.btn_cancel); //for print testing
        Button btn_exactAmount = view.findViewById(R.id.button_exactAmount);
        lbl_subtotal = view.findViewById(R.id.lbl_subtotal);
        lbl_due = view.findViewById(R.id.lbl_due);
        lbl_dueFinal = view.findViewById(R.id.lbl_dueFinal);
        lbl_discount = view.findViewById(R.id.lbl_discount);
        lbl_total = view.findViewById(R.id.lbl_total);
        lbl_tax = view.findViewById(R.id.lbl_tax);
        tv_zeroRatedSales= view.findViewById(R.id.tv_zeroRatedSales);
        btn_diplomatPayment = view.findViewById(R.id.btn_diplomatPayment);






        cashierItem = new cashier_payment_item(getContext());
        cashierItem.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        PrinterSettings=new printer_settings_class(this.getContext());




        loadLabelData();
        loadReceiptData();
        getRunningTransID();
        showingOfTender();

        KeyBoardMap();









        btn_enter.setOnClickListener(new View.OnClickListener() {
            @Override

            public void onClick(View view) {
                String insertAmount = et_cash.getText().toString();
                if (insertAmount.equals(null) || insertAmount.isEmpty()) {
                    Toast.makeText(getActivity(), "EMPTY AMOUNT", Toast.LENGTH_SHORT).show();
                    return;
                } else {
                    if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
                        Toast.makeText(getActivity(), "TENDER < TOTAL DUE", Toast.LENGTH_SHORT).show();
                    } else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
                        // Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                        if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){

                        }
                        else{

                            new Thread(new Runnable() {
                                @Override


                                public void run() {
                                    Looper.prepare();




                                    openCashBox();
                                    createTextfileCash();

                                    updateReading();
                                    completeTransaction();
                                    getTransactionRecord();
                                    //  printPreview(printData,printQty,HeaderQuantity);




                                }
                            }).start();

                            //   printPreview();
                        }

                    }
                }
            }


        });

        btn_exactAmount.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_cash.setText(lbl_due.getText().toString());
            }
        });



        btn_reset.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_cash.setText("");

            }
        });
        btn_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                CancelSale();


            }
        });




        debitCardPayment.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                debitCardPayment();

            }
        });

        creditCardPayment.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                creditCardPayment();

            }
        });
        cashPayment.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {


                cashPayment();




            }
        });
        btn_diplomatPayment.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                diplomatFunction();
            }
        });
        btn_discount.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                showingDiscountList();


            }
        });

        btn_otherPayment.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showingOtherPayment();
            }
        });



        showSummary();
        hideNavigationBar();






        return view;


    }




    //================================TYPE OF PAYMENT========================================



    //cash 1


    TextView tv_tenderType;
    TextView tv_amountDue;
    TextView tv_tenderAmount;
    TextView tv_totalBalance;
    TextView tv_totalChange;
    String insertAmount;
    AlertDialog alertDialog;

    private void hideNavigationBar() {
        View decorView = getActivity().getWindow().getDecorView();
        decorView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                        | View.SYSTEM_UI_FLAG_FULLSCREEN);
    }

    private void openCashBox(){
        Intent intent = new Intent("android.intent.action.CASHBOX");
        intent.putExtra("cashbox_open", true);
        // this.sendBroadcast(intent);
        this.getActivity().sendBroadcast(intent);
    }

    private void cashPayment(){
        keyboardCursor=1;
        DialogCursor=01;
        modePayment="Cash";
        typeOfPayment="Cash";
        Log.e("payment",typeOfPayment);

        if (modePayment.equals("Cash")){
            insertAmount = et_cash.getText().toString();
            if (insertAmount.equals(null) || insertAmount.isEmpty()) {
                Toast.makeText(getActivity(), "EMPTY AMOUNT", Toast.LENGTH_SHORT).show();
                keyboardCursor=0;
                DialogCursor=0;
                return;
            }
            else {


                AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                LayoutInflater inflater = getLayoutInflater();
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_payment_confirmation, null);
                builder.setView(alertLayout);
                alertDialog   = builder.create();
                tv_tenderType=alertLayout.findViewById(R.id.tv_tenderType);
                tv_amountDue=alertLayout.findViewById(R.id.tv_amountDue);
                tv_tenderAmount=alertLayout.findViewById(R.id.tv_tenderAmount);
                Button btn_confirm=alertLayout.findViewById(R.id.btn_confirm);
                LinearLayout ll_totalBalance=alertLayout.findViewById(R.id.ll_totalBalance);
                LinearLayout ll_totalChange=alertLayout.findViewById(R.id.ll_totalChange);
                tv_totalBalance=alertLayout.findViewById(R.id.tv_totalBalance);
                tv_totalChange=alertLayout.findViewById(R.id.tv_totalChange);

                ll_totalBalance.setVisibility(View.GONE);
                ll_totalChange.setVisibility(View.GONE);


                DecimalFormat format = new DecimalFormat("0.00");
                tv_amountDue.setText(""+lbl_due.getText().toString());
                String formatted = format.format(Double.parseDouble(et_cash.getText().toString()));
                tv_tenderAmount.setText(""+String.valueOf(formatted));
                Log.e("TestDebugg",String.valueOf(1));

                SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
                Cursor itemCheckMultipleTemp = db2.rawQuery("select * from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
                if (itemCheckMultipleTemp.getCount()!=0){
                    multiplePayment=1;
                    Log.e("TestDebugg",String.valueOf(2));
                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) < Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalBalance.setVisibility(View.VISIBLE);

                    Log.e("PAYMENT","LESS THAN");


                    multiplePayment=1;
                    String totalBalance = format.format(Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()));
                    tv_totalBalance.setText(String.valueOf(totalBalance));

                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) > Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalChange.setVisibility(View.VISIBLE);
                    String totalChange = format.format((Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()))*-1);
                    tv_totalChange.setText(String.valueOf(totalChange));
                }



                tv_tenderType.setText("CASH");
                DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
                btn_confirm.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {






//                        if (multiplePayment==1) {
//
//                            SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
//                            Cursor itemListC2 = db2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);
//
//                            Log.e("TestDebugg",String.valueOf(3));
//
//                            if (itemListC2.getCount()!=0) {
//                                itemListC2.moveToNext();
//                                readRefNumber=itemListC2.getString(0);
//                            }
//                            else{
//                                readReferenceNumber();
//                            }
//
//                            itemListC = db2.rawQuery("select * from InvoiceReceiptTotal where TransactionID='" + readRefNumber + "'", null);
//
//
//
//                            if (itemListC.getCount() == 0) {
//
//
//                                // start of inserting multiple
//
//
////                                if (Double.parseDouble(tv_tenderAmount.getText().toString())<=Double.parseDouble(tv_amountDue.getText().toString())){
////                                    Log.e("Transaction#",readRefNumber);
////                                    Log.e("invoice","inserted transction");
////                                    Log.e("TestDebugg",String.valueOf("3.2"));
////                                    //insertMultiplePayment();
////
//                                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
//                                            readRefNumber,
//                                            tv_tenderType.getText().toString(),
//                                            tv_tenderAmount.getText().toString(),
//                                            "CASH"
//                                    );
//                                     Double paymentChange=0.00;
//                                    paymentChange=Double.parseDouble(tv_totalChange.getText().toString());
//                                    showingOfTender();
////                                            createTextfileMultiple();
////                                            createTextfileCash();
////                                            updateReading();
////                                            // completeTransaction();
////                                            getTransactionRecord();
////                                }
//
//
//                                Double subtotal=0.00;
//                                Cursor itemCheckMultiple = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp", null);
//                                if (itemCheckMultiple.getCount()!=0){
//                                    while(itemCheckMultiple.moveToNext()){
//                                        subtotal=itemCheckMultiple.getDouble(0);
//                                    }
//                                }
//                                Log.e("subtotal",String.valueOf(subtotal));
//                                itemCheckMultiple.close();
//
//                                String finalAmount="0.00";
//                             //   if (Double.parseDouble(finalAmount)==Double.parseDouble(tv_amountDue.getText().toString())){
//                                if (Double.parseDouble(lbl_due.getText().toString())<=Double.parseDouble("0.00")){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","inserted transction");
//
//
//                                    insertMultiplePayment();
//                                    showingOfTender();
//                                    createTextfileMultiple();
//
//
//                                    Cursor insertToFinal = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp", null);
//
//                                    if (insertToFinal.getCount()!=0){
//
//                                        while(insertToFinal.moveToNext()){
//                                            Log.e("INSERT INVOICE FINAL","Test2");
//
//                                            if(insertToFinal.getString(4).equals("CASH")){
//
//                                                databaseHandler.insertInvoiceMultipleFinal(
//                                                        insertToFinal.getString(1),
//                                                        insertToFinal.getString(2),
//                                                        String.valueOf(Double.parseDouble(insertToFinal.getString(3))-paymentChange),
//                                                        insertToFinal.getString(4)
//
//
//                                                );
//                                            }
//                                            else{
//                                                databaseHandler.insertInvoiceMultipleFinal(
//                                                        insertToFinal.getString(1),
//                                                        insertToFinal.getString(2),
//                                                        String.valueOf(Double.parseDouble(insertToFinal.getString(3))),
//                                                        insertToFinal.getString(4)
//
//
//                                                );
//
//                                            }
//
//
//                                        }
//
//
//                                        SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
//                                        String deleteInvoiceReceiptItem = "delete from InvoiceMultiplePaymentTemp";
//                                        PosOutputDB.execSQL(deleteInvoiceReceiptItem);
//
//                                    }
//                                    insertToFinal.close();
//
//
//
//                                    updateReading();
//                                   //  completeTransaction();
//                                    getTransactionRecord();
//
//                                    Log.e("PRINTING","else if");
//                                }
//
//
//                                //end of inserting multiple
//
//
//
//
//                            }
//                            else{
//                                Log.e("TestDebugg",String.valueOf(3.3));
//                                if (Double.parseDouble(tv_tenderAmount.getText().toString())<Double.parseDouble(tv_amountDue.getText().toString())){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","transaction still open");
//                                    Log.e("TestDebugg",String.valueOf(4));
////                                        Log.e("invoice","Transaction still open");
//                                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
//                                            readRefNumber,
//                                            tv_tenderType.getText().toString(),
//                                            tv_tenderAmount.getText().toString(),
//                                            "CASH"
//                                    );
//
//                                    showingOfTender();
//
//
//                                }
//
//
//                                if (Double.parseDouble(tv_tenderAmount.getText().toString())==Double.parseDouble(tv_amountDue.getText().toString())){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","transaction still open");
////                                        Log.e("invoice","Transaction still open");
//                                    Log.e("TestDebugg",String.valueOf(5));
//                                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
//                                            readRefNumber,
//                                            tv_tenderType.getText().toString(),
//                                            tv_tenderAmount.getText().toString(),
//                                            "CASH"
//                                    );
//
//
//
//                                    showingOfTender();
//                                    createTextfileCash();
//                                    // createTextfileMultiple();//create for multiple
//                                    updateReading();
//                                    completeTransaction();
//                                    getTransactionRecord();
//
//
//                                }
//
//
//                            }
//                        }
//
//
//                        else{
//
//
//                          //  if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
//                              if (Double.valueOf(insertAmount) < Double.parseDouble(tv_amountDue.getText().toString())) {
//                                Log.e("else","<");
//                                Log.e("TestDebugg","testDbugging1");
//                                Log.e("insertAmount",insertAmount);
//                                Log.e("totalAmountToPay",totalAmountToPayFormatted);
//                                Log.e("TestDebugg",String.valueOf(6));
//                                //subctract tenderamount to net due
//                                alertDialog.dismiss();
//
//
//                            }
//                           // else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
//                              else if (Double.valueOf(insertAmount) >= Double.parseDouble(tv_amountDue.getText().toString())) {
//                                 Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
//                                Log.e("TestDebugg",String.valueOf(7));
//                                Log.e("TestDebugg","testDbugging2");
//                                if (String.valueOf(Double.parseDouble(tv_amountDue.getText().toString())).equals("0.00")){
//
//                                }
//                                else{
//
//                                    new Thread(new Runnable() {
//                                        @Override
//
//
//                                        public void run() {
//                                            Looper.prepare();
//
//
//
//                                            Log.e("TestDebugg",String.valueOf(8));
//                                            createTextfileCash();
//                                            updateReading();
//                                            completeTransaction();
//                                            getTransactionRecord();
//
//
//
//
//
//
//
//
//                                        }
//                                    }).start();
//                                }
//
//                            }
//                        }
//
//
//                        alertDialog.dismiss();

                        cashConfirm();



                    }








                });

                alertDialog.show();

            }
        }




    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }
    }
    private void cashConfirm(){

        //  TextView tv_tenderType =
        //tv_tenderType.setText("CASH");
        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());

        if (multiplePayment==1) {

            SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
            Cursor itemListC2 = db2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);

            Log.e("TestDebugg",String.valueOf(3));

            if (itemListC2.getCount()!=0) {
                itemListC2.moveToNext();
                readRefNumber=itemListC2.getString(0);
            }
            else{
                readReferenceNumber();
            }

            itemListC = db2.rawQuery("select * from InvoiceReceiptTotal where TransactionID='" + readRefNumber + "'", null);



            if (itemListC.getCount() == 0) {


                // start of inserting multiple


//                                if (Double.parseDouble(tv_tenderAmount.getText().toString())<=Double.parseDouble(tv_amountDue.getText().toString())){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","inserted transction");
//                                    Log.e("TestDebugg",String.valueOf("3.2"));
//                                    //insertMultiplePayment();
//
                Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                        readRefNumber,
                        tv_tenderType.getText().toString(),
                        tv_tenderAmount.getText().toString(),
                        "CASH"
                );
                Double paymentChange=0.00;
                paymentChange=Double.parseDouble(tv_totalChange.getText().toString());
                showingOfTender();
//                                            createTextfileMultiple();
//                                            createTextfileCash();
//                                            updateReading();
//                                            // completeTransaction();
//                                            getTransactionRecord();
//                                }


                Double subtotal=0.00;
                Cursor itemCheckMultiple = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp", null);
                if (itemCheckMultiple.getCount()!=0){
                    while(itemCheckMultiple.moveToNext()){
                        subtotal=itemCheckMultiple.getDouble(0);
                    }
                }
                Log.e("subtotal",String.valueOf(subtotal));
                itemCheckMultiple.close();

                String finalAmount="0.00";
                //   if (Double.parseDouble(finalAmount)==Double.parseDouble(tv_amountDue.getText().toString())){
                if (Double.parseDouble(lbl_due.getText().toString())<=Double.parseDouble("0.00")){
                    Log.e("Transaction#",readRefNumber);
                    Log.e("invoice","inserted transction");


                    insertMultiplePayment();
                    showingOfTender();
                    createTextfileMultiple();


                    Cursor insertToFinal = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp", null);

                    if (insertToFinal.getCount()!=0){

                        while(insertToFinal.moveToNext()){
                            Log.e("INSERT INVOICE FINAL","Test2");

                            if(insertToFinal.getString(4).equals("CASH")){

                                databaseHandler.insertInvoiceMultipleFinal(
                                        insertToFinal.getString(1),
                                        insertToFinal.getString(2),
                                        String.valueOf(Double.parseDouble(insertToFinal.getString(3))-paymentChange),
                                        insertToFinal.getString(4)


                                );
                            }
                            else{
                                databaseHandler.insertInvoiceMultipleFinal(
                                        insertToFinal.getString(1),
                                        insertToFinal.getString(2),
                                        String.valueOf(Double.parseDouble(insertToFinal.getString(3))),
                                        insertToFinal.getString(4)


                                );

                            }


                        }


                        SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
                        String deleteInvoiceReceiptItem = "delete from InvoiceMultiplePaymentTemp";
                        PosOutputDB.execSQL(deleteInvoiceReceiptItem);

                    }
                    insertToFinal.close();



                    updateReading();
                    //  completeTransaction();
                    getTransactionRecord();

                    Log.e("PRINTING","else if");
                }


                //end of inserting multiple




            }
            else{
                Log.e("TestDebugg",String.valueOf(3.3));
                if (Double.parseDouble(tv_tenderAmount.getText().toString())<Double.parseDouble(tv_amountDue.getText().toString())){
                    Log.e("Transaction#",readRefNumber);
                    Log.e("invoice","transaction still open");
                    Log.e("TestDebugg",String.valueOf(4));
//                                        Log.e("invoice","Transaction still open");
                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                            readRefNumber,
                            tv_tenderType.getText().toString(),
                            tv_tenderAmount.getText().toString(),
                            "CASH"
                    );

                    showingOfTender();


                }


                if (Double.parseDouble(tv_tenderAmount.getText().toString())==Double.parseDouble(tv_amountDue.getText().toString())){
                    Log.e("Transaction#",readRefNumber);
                    Log.e("invoice","transaction still open");
//                                        Log.e("invoice","Transaction still open");
                    Log.e("TestDebugg",String.valueOf(5));
                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                            readRefNumber,
                            tv_tenderType.getText().toString(),
                            tv_tenderAmount.getText().toString(),
                            "CASH"
                    );



                    showingOfTender();
                    openCashBox();
                    createTextfileCash();

                    // createTextfileMultiple();//create for multiple
                    updateReading();
                    completeTransaction();
                    getTransactionRecord();


                }


            }
        }


        else{


            //  if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
            if (Double.valueOf(insertAmount) < Double.parseDouble(tv_amountDue.getText().toString())) {
                Log.e("else","<");
                Log.e("TestDebugg","testDbugging1");
                Log.e("insertAmount",insertAmount);
                Log.e("totalAmountToPay",totalAmountToPayFormatted);
                Log.e("TestDebugg",String.valueOf(6));
                //subctract tenderamount to net due
                alertDialog.dismiss();


            }
            // else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
            else if (Double.valueOf(insertAmount) >= Double.parseDouble(tv_amountDue.getText().toString())) {
                Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                Log.e("TestDebugg",String.valueOf(7));
                Log.e("TestDebugg","testDbugging2");
                if (String.valueOf(Double.parseDouble(tv_amountDue.getText().toString())).equals("0.00")){

                }
                else{

                    new Thread(new Runnable() {
                        @Override


                        public void run() {
                            Looper.prepare();



                            Log.e("TestDebugg",String.valueOf(8));
                            openCashBox();
                            createTextfileCash();

                            updateReading();
                            completeTransaction();
                            getTransactionRecord();








                        }
                    }).start();
                }

            }
        }


//        alertDialog.dismiss();



    }
    public String getMaskedText(String rawText) {
        StringBuilder out = new StringBuilder();

        for (int i = 0; i <= 13;i++) {

            if (i<=12) {
                out.append("*");
                //j++;
            } else {
                out.append(rawText.substring(rawText.length()-(17-i)));
            }
        }

        return out.toString();
    }





    Spinner spinnerBank;
    EditText et_CardOwner;
    EditText et_DebitNumber;
    EditText et_DebitExpiry;
    EditText et_CardApproval;
    Button btn_EnterDebit;
    TextView tv_typeOfCard;




    //region credit card module
    DatabaseHandler databaseHandler;
    String FinalConfirmingInsertAmount;
    String FinalTypeOfCard="";

    private void creditCardPayment(){ // for selecting type of card
        modePayment="CreditCard";
        Log.d("TAG", "creditCardPayment: enter credit card payment");
        //   mapCode2Activate=2;
        InitT9MapCode();
        BankListCredit.clear();
        FunctionList.clear();
        loadBankListCredit();
        // mapCode2Activate=2;
        DialogCursor=1;

        // et_cash.setText(lbl_due.getText().toString());
        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext(),R.style.DialogSlide);
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_debitcard, null);
        builder.setView(alertLayout);
        rv_buttonList= alertLayout.findViewById(R.id.rv_buttonList);
        tv_typeOfCard = alertLayout.findViewById(R.id.tv_typeOfCard);
        et_command = alertLayout.findViewById(R.id.et_command);


        tv_typeOfCard.setText("CREDIT CARD");



        alertDialog = builder.create();

        alertDialog.  getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.getWindow().getAttributes().windowAnimations=R.anim.slide_left;

        invoice_fragment_button_model po2=null;

        //  BankListDebit.add("BPI debit");
//        BankListDebit.add("Chinabank debit");
//        BankListDebit.add("Metrobank debit");
//        BankListDebit.add("Landbank debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");

        for (int x=0;x<BankListCredit.size();x++){
            po2 = new invoice_fragment_button_model(x+1,BankListCredit.get(x));
            FunctionList.addAll(Arrays.asList(new invoice_fragment_button_model[]{po2}));
            // Log.d("TAG", "itemcode: "+itemCode.get(x));

        }



        rv_buttonList.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.HORIZONTAL,false);
        layoutManager.removeAllViews();
        rv_buttonList.setLayoutManager(new GridLayoutManager(this.getContext(), 5));
        mAdapter=new cashier_payment.RecyclerviewAdapterTender(this.getContext(),FunctionList,selectList);
        rv_buttonList.setAdapter(mAdapter);


        alertDialog.setCanceledOnTouchOutside(false);

        //et_CardOwner.requestFocus();
        alertDialog.show();




    }

    private void creditCardPaymentDetails(String typeOfCard){ // for selecting type of card
        modePayment="CreditCard";
        Log.d("TAG", "creditCardPayment: enter credit card payment");
        //   mapCode2Activate=2;
        InitT9MapCode();
        mapCode2Activate=2;
        DialogCursor=1;

        // et_cash.setText(lbl_due.getText().toString());
        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext(),R.style.DialogSlide);
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_debitcard_details, null);
        builder.setView(alertLayout);
        spinnerBank =(Spinner) alertLayout.findViewById(R.id.spinnerBank);
        et_CardOwner =(EditText) alertLayout.findViewById(R.id.et_CardOwner);
        et_DebitNumber = (EditText) alertLayout.findViewById(R.id.et_DebitNumber);
        et_DebitExpiry = (EditText) alertLayout.findViewById(R.id.et_DebitExpiry);
        et_CardApproval =(EditText) alertLayout.findViewById(R.id.et_CardApproval);
        btn_EnterDebit = (Button)alertLayout.findViewById(R.id.btn_EnterDebit);
        tv_typeOfCard = alertLayout.findViewById(R.id.tv_typeOfCard);

        et_CardOwner.requestFocus();

        TextView tv_typeOfCard2 = alertLayout.findViewById(R.id.tv_typeOfCard2);


        tv_typeOfCard.setText("CREDIT CARD");
        tv_typeOfCard2.setText(typeOfCard);
        FinalTypeOfCard=typeOfCard;



        alertDialog = builder.create();

        alertDialog.  getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.getWindow().getAttributes().windowAnimations=R.anim.slide_left;

        invoice_fragment_button_model po2=null;

        //  BankListDebit.add("BPI debit");
//        BankListDebit.add("Chinabank debit");
//        BankListDebit.add("Metrobank debit");
//        BankListDebit.add("Landbank debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");

//        for (int x=0;x<BankListCredit.size();x++){
//            po2 = new invoice_fragment_button_model(x+1,BankListCredit.get(x));
//            FunctionList.addAll(Arrays.asList(new invoice_fragment_button_model[]{po2}));
//            // Log.d("TAG", "itemcode: "+itemCode.get(x));
//
//        }



        rv_buttonList.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.HORIZONTAL,false);
        layoutManager.removeAllViews();
        rv_buttonList.setLayoutManager(new GridLayoutManager(this.getContext(), 5));
        mAdapter=new cashier_payment.RecyclerviewAdapterTender(this.getContext(),FunctionList,selectList);
        rv_buttonList.setAdapter(mAdapter);


        alertDialog.setCanceledOnTouchOutside(false);
        spinnerBank.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

                typeOfPayment=spinnerBank.getSelectedItem().toString();
                Log.e("Payment Type",typeOfPayment);
            }
            @Override
            public void onNothingSelected(AdapterView <?> parent) {
            }

        });
        Button btn_cancel = alertLayout.findViewById(R.id.btn_cancel);


        et_DebitNumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });
        et_DebitExpiry.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                String str=et_DebitExpiry.getText().toString();
                int textLength=et_DebitExpiry.getText().length();
                if (textLength == 3) {
                    if (!str.contains("/")) {
                        et_DebitExpiry.setText(new StringBuilder(et_DebitExpiry.getText().toString()).insert(str.length() - 1, "/").toString());
                        et_DebitExpiry .setSelection(et_DebitExpiry.getText().length());
                    }
                }
            }

            @Override
            public void afterTextChanged(Editable text) {

            }
        });
        //et_CardOwner.requestFocus();
        alertDialog.show();

        btn_EnterDebit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                creditConfirm(FinalTypeOfCard);




            }
        });

        btn_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mapCode2Activate=0;
                alertDialog.dismiss();
            }
        });


    }

    private void creditConfirm(String typeOfCardPayment){


        if (et_CardOwner.getText().toString().length()==0) {
            et_CardOwner.setError("CardHolder Name is required");
        }

        else if(et_DebitExpiry.getText().toString().length()==0){
            et_DebitExpiry.setError("Card Expiry is required");
        }
        else if(et_CardApproval.getText().toString().length()==0){
            et_CardApproval.setError("Card Approval is required");
        }
        else {



            bankTransactionVar.setBankName(FinalTypeOfCard);
            bankTransactionVar.setCardOwner(et_CardOwner.getText().toString().trim());
            bankTransactionVar.setCardNumber(et_DebitNumber.getText().toString().trim());
            bankTransactionVar.setCardExpiry(et_DebitExpiry.getText().toString().trim());
            bankTransactionVar.setCardType(modePayment);

            bankTransactionVar.setCardApproval(et_CardApproval.getText().toString());
            modePayment = "CreditCard";
            totalAmountToPayFormatted = lbl_due.getText().toString();
            alertDialog.dismiss();
            creditCardPayment2(FinalTypeOfCard);






        }






    }

    private void creditCardPayment2(String typeOfCard){
        typeOfPayment=FinalTypeOfCard;
        modePayment="CreditCard";
        //Log.e("payment",typeOfPayment);

        if (modePayment.equals("CreditCard")){
            String insertAmount = et_cash.getText().toString();
            if (insertAmount.equals(null) || insertAmount.isEmpty()) {
                Toast.makeText(getActivity(), "EMPTY AMOUNT", Toast.LENGTH_SHORT).show();
                DialogCursor=0;
                mapCode2Activate=0;
                return;
            }
            else{
                Toast.makeText(getContext(), insertAmount, Toast.LENGTH_SHORT).show();
                alertDialog.dismiss();
                creditCardComplete(insertAmount);
            }

        }
    }

    private void creditCardComplete(String insertAmount){


        mapCode2Activate=0;
        DialogCursor=11;
        FinalConfirmingInsertAmount = insertAmount;




        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                LayoutInflater inflater = getLayoutInflater();
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_payment_confirmation, null);
                builder.setView(alertLayout);
                alertDialog = builder.create();
                TextView tv_tenderType=alertLayout.findViewById(R.id.tv_tenderType);
                TextView tv_amountDue=alertLayout.findViewById(R.id.tv_amountDue);
                TextView tv_tenderAmount=alertLayout.findViewById(R.id.tv_tenderAmount);
                Button btn_confirm=alertLayout.findViewById(R.id.btn_confirm);
                LinearLayout ll_totalBalance=alertLayout.findViewById(R.id.ll_totalBalance);
                LinearLayout ll_totalChange=alertLayout.findViewById(R.id.ll_totalChange);
                TextView tv_totalBalance=alertLayout.findViewById(R.id.tv_totalBalance);
                TextView tv_totalChange=alertLayout.findViewById(R.id.tv_totalChange);

                ll_totalBalance.setVisibility(View.GONE);
                ll_totalChange.setVisibility(View.GONE);


                DecimalFormat format = new DecimalFormat("0.00");
                tv_amountDue.setText(""+lbl_due.getText().toString());
                String formatted = format.format(Double.parseDouble(et_cash.getText().toString()));
                tv_tenderAmount.setText(""+String.valueOf(formatted));
                Log.e("TestDebugg",String.valueOf(1));

                SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
                Cursor itemCheckMultipleTemp = db2.rawQuery("select * from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
                if (itemCheckMultipleTemp.getCount()!=0){
                    multiplePayment=1;
                    Log.e("TestDebugg",String.valueOf(2));
                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) < Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalBalance.setVisibility(View.VISIBLE);

                    Log.e("PAYMENT","LESS THAN");


                    multiplePayment=1;
                    String totalBalance = format.format(Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()));
                    tv_totalBalance.setText(String.valueOf(totalBalance));

                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) > Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalChange.setVisibility(View.VISIBLE);
                    String totalChange = format.format((Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()))*-1);
                    tv_totalChange.setText(String.valueOf(totalChange));
                }



                tv_tenderType.setText(typeOfPayment);
                databaseHandler  = new DatabaseHandler(getContext());
                btn_confirm.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {



                        finalCreditConfirm(FinalConfirmingInsertAmount);




                    }








                });

                alertDialog.show();

            }
        });







    }

    //note!!
    private void finalCreditConfirm(String insertAmount){

        Toast.makeText(getContext(), "CREDIT CARD PAYMENT DONE", Toast.LENGTH_SHORT).show();

        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                if (multiplePayment==1) {

                    SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
                    Cursor itemListC2 = db2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);

                    Log.e("TestDebugg",String.valueOf(3));

                    if (itemListC2.getCount()!=0) {
                        itemListC2.moveToNext();
                        readRefNumber=itemListC2.getString(0);
                    }
                    else{
                        readReferenceNumber();
                    }

                    itemListC = db2.rawQuery("select * from InvoiceReceiptTotal where TransactionID='" + readRefNumber + "'", null);



                    if (itemListC.getCount() == 0) {


                        // start of inserting multiple


//                                if (Double.parseDouble(tv_tenderAmount.getText().toString())<=Double.parseDouble(tv_amountDue.getText().toString())){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","inserted transction");
//                                    Log.e("TestDebugg",String.valueOf("3.2"));
//                                    //insertMultiplePayment();
//
                        Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                                readRefNumber,
                                typeOfPayment,
//                                tv_tenderAmount.getText().toString(),
                                insertAmount,
                                modePayment
                        );
                        showingOfTender();
//                                            createTextfileMultiple();
//                                            createTextfileCash();
//                                            updateReading();
//                                            // completeTransaction();
//                                            getTransactionRecord();
//                                }


                        Double subtotal=0.00;
                        Cursor itemCheckMultiple = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp", null);
                        if (itemCheckMultiple.getCount()!=0){
                            while(itemCheckMultiple.moveToNext()){
                                subtotal=itemCheckMultiple.getDouble(0);
                            }
                        }
                        Log.e("subtotal",String.valueOf(subtotal));
                        itemCheckMultiple.close();

                        String finalAmount="0.00";
                        //   if (Double.parseDouble(finalAmount)==Double.parseDouble(tv_amountDue.getText().toString())){
                        if (Double.parseDouble(lbl_due.getText().toString())<=Double.parseDouble("0.00")){
                            Log.e("Transaction#",readRefNumber);
                            Log.e("invoice","inserted transction");


                            insertMultiplePayment();
                            showingOfTender();
                            createTextfileMultiple();


                            Cursor insertToFinal = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp", null);

                            if (insertToFinal.getCount()!=0){

                                while(insertToFinal.moveToNext()){
                                    Log.e("INSERT INVOICE FINAL","Test2");
                                    databaseHandler.insertInvoiceMultipleFinal(
                                            insertToFinal.getString(1),
                                            insertToFinal.getString(2),
                                            insertToFinal.getString(3),
                                            insertToFinal.getString(4)

                                    );

                                }


                                SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
                                String deleteInvoiceReceiptItem = "delete from InvoiceMultiplePaymentTemp";
                                PosOutputDB.execSQL(deleteInvoiceReceiptItem);

                            }
                            insertToFinal.close();



                            updateReading();
                            //  completeTransaction();
                            getTransactionRecord();

                            Log.e("PRINTING","else if");
                        }


                        //end of inserting multiple




                    }
                    else{
                        Log.e("TestDebugg",String.valueOf(3.3));
                        if (Double.parseDouble(tv_tenderAmount.getText().toString())<Double.parseDouble(tv_amountDue.getText().toString())){
                            Log.e("Transaction#",readRefNumber);
                            Log.e("invoice","transaction still open");
                            Log.e("TestDebugg",String.valueOf(4));
//                                        Log.e("invoice","Transaction still open");
                            Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                                    readRefNumber,
                                    tv_tenderType.getText().toString(),
                                    tv_tenderAmount.getText().toString(),
                                    modePayment
                            );
                            showingOfTender();


                        }


                        if (Double.parseDouble(tv_tenderAmount.getText().toString())==Double.parseDouble(tv_amountDue.getText().toString())){
                            Log.e("Transaction#",readRefNumber);
                            Log.e("invoice","transaction still open");
//                                        Log.e("invoice","Transaction still open");
                            Log.e("TestDebugg",String.valueOf(5));
                            Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                                    readRefNumber,
                                    tv_tenderType.getText().toString(),
                                    tv_tenderAmount.getText().toString(),
                                    modePayment
                            );



                            showingOfTender();
                            openCashBox();
                            createTextfileBankCreditCard();
                            //  insertBankTransactionTemp(getActivity());
                            // createTextfileMultiple();//create for multiple
                            updateReading();
                            completeTransaction();
                            getTransactionRecord();



                        }


                    }
                }
                else{


                    if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
                        Log.e("else","<");
                        Log.e("TestDebugg","testDbugging1");
                        Log.e("insertAmount",insertAmount);
                        Log.e("totalAmountToPay",totalAmountToPayFormatted);
                        Log.e("TestDebugg",String.valueOf(6));
                        //subctract tenderamount to net due
                        alertDialog.dismiss();


                    }
                    else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
                        Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                        Log.e("TestDebugg",String.valueOf(7));
                        Log.e("TestDebugg","testDbugging2");
                        if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){

                        }
                        else{

                            new Thread(new Runnable() {
                                @Override


                                public void run() {
                                    Looper.prepare();



                                    Log.e("TestDebugg",String.valueOf(8));
                                    openCashBox();
                                    createTextfileBankCreditCard();
                                    //  insertBankTransactionTemp(getActivity());
                                    updateReading();
                                    completeTransaction();
                                    getTransactionRecord();









                                }
                            }).start();
                        }

                    }
                }


                alertDialog.dismiss();
            }
        });





    }


    //endregion credit card

    //region debit card module


    RecyclerView rv_buttonList;



    private void debitCardPayment(){
        BankListDebit.clear();
        FunctionList.clear();
        loadBankListDebit();


        modePayment="DebitCard";
        //    mapCode2Activate=2;
        InitT9MapCode();
        DialogCursor=2;


        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext(),R.style.DialogSlide);
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_debitcard, null);
        builder.setView(alertLayout);
        rv_buttonList= alertLayout.findViewById(R.id.rv_buttonList);

        btn_EnterDebit = (Button)alertLayout.findViewById(R.id.btn_EnterDebit);
        Button btn_cancel = alertLayout.findViewById(R.id.btn_cancel);
        final TextView tv_typeOfCard = alertLayout.findViewById(R.id.tv_typeOfCard);
        tv_typeOfCard.setText("DEBIT CARD");
        //et_CardOwner.requestFocus();
        et_command = alertLayout.findViewById(R.id.et_command);




        alertDialog = builder.create();

        alertDialog.  getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.getWindow().getAttributes().windowAnimations=R.anim.slide_left;

        invoice_fragment_button_model po2=null;


        for (int x=0;x<BankListDebit.size();x++){
            po2 = new invoice_fragment_button_model(x+1,BankListDebit.get(x));
            FunctionList.addAll(Arrays.asList(new invoice_fragment_button_model[]{po2}));
            // Log.d("TAG", "itemcode: "+itemCode.get(x));

        }


        rv_buttonList.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.HORIZONTAL,false);
        layoutManager.removeAllViews();
        rv_buttonList.setLayoutManager(new GridLayoutManager(this.getContext(), 5));
        mAdapter=new cashier_payment.RecyclerviewAdapterTender(this.getContext(),FunctionList,selectList);
        rv_buttonList.setAdapter(mAdapter);







        alertDialog.show();









    }
    private void debitCardPaymentDetails(String typeOfCard){

        modePayment="DebitCard";
        //    mapCode2Activate=2;
        InitT9MapCode();
        mapCode2Activate=2;
        DialogCursor=2;


        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext(),R.style.DialogSlide);
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_debitcard_details, null);
        builder.setView(alertLayout);

        spinnerBank =(Spinner) alertLayout.findViewById(R.id.spinnerBank);
        et_CardOwner =(EditText) alertLayout.findViewById(R.id.et_CardOwner);
        et_DebitNumber = (EditText) alertLayout.findViewById(R.id.et_DebitNumber);
        et_DebitExpiry = (EditText) alertLayout.findViewById(R.id.et_DebitExpiry);
        et_CardApproval =(EditText) alertLayout.findViewById(R.id.et_CardApproval);
        btn_EnterDebit = (Button)alertLayout.findViewById(R.id.btn_EnterDebit);
        Button btn_cancel = alertLayout.findViewById(R.id.btn_cancel);
        final TextView tv_typeOfCard = alertLayout.findViewById(R.id.tv_typeOfCard);
        tv_typeOfCard.setText("DEBIT CARD");
        //et_CardOwner.requestFocus();
        et_command = alertLayout.findViewById(R.id.et_command);

        FinalTypeOfCard=typeOfCard;

        et_CardOwner.requestFocus();


        alertDialog = builder.create();

        alertDialog.  getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.getWindow().getAttributes().windowAnimations=R.anim.slide_left;








        invoice_fragment_button_model po2=null;

        //  BankListDebit.add("BPI debit");
//        BankListDebit.add("Chinabank debit");
//        BankListDebit.add("Metrobank debit");
//        BankListDebit.add("Landbank debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");
//        BankListDebit.add("BPI debit");

        for (int x=0;x<BankListDebit.size();x++){
            po2 = new invoice_fragment_button_model(x+1,BankListDebit.get(x));
            FunctionList.addAll(Arrays.asList(new invoice_fragment_button_model[]{po2}));
            // Log.d("TAG", "itemcode: "+itemCode.get(x));

        }


        rv_buttonList.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.HORIZONTAL,false);
        layoutManager.removeAllViews();
        rv_buttonList.setLayoutManager(new GridLayoutManager(this.getContext(), 5));
        mAdapter=new cashier_payment.RecyclerviewAdapterTender(this.getContext(),FunctionList,selectList);
        rv_buttonList.setAdapter(mAdapter);

        alertDialog.setCanceledOnTouchOutside(true);





        et_DebitExpiry.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                String str=et_DebitExpiry.getText().toString();
                int textLength=et_DebitExpiry.getText().length();
                if (textLength == 3) {
                    if (!str.contains("/")) {
                        et_DebitExpiry.setText(new StringBuilder(et_DebitExpiry.getText().toString()).insert(str.length() - 1, "/").toString());
                        et_DebitExpiry .setSelection(et_DebitExpiry.getText().length());
                    }
                }
            }

            @Override
            public void afterTextChanged(Editable text) {

            }
        });

        btn_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mapCode2Activate=0;
                alertDialog.dismiss();
            }
        });


        alertDialog.show();
//        btn_EnterDebit.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                bankTransactionVar.setBankName(typeOfPayment);
//                bankTransactionVar.setCardOwner(et_CardOwner.getText().toString().trim());
//                bankTransactionVar.setCardNumber(et_DebitNumber.getText().toString().trim());
//                bankTransactionVar.setCardExpiry(et_DebitExpiry.getText().toString().trim());
//                bankTransactionVar.setCardType(modePayment);
//
//                bankTransactionVar.setCardApproval(et_CardApproval.getText().toString());
//                modePayment="DebitCard";
//                totalAmountToPayFormatted=lbl_due.getText().toString();
//
//
//                Log.d("TAG", "onClick: "+ bankTransactionVar.getCardNumber());
//
//
//
//
////                if (modePayment.equals(("CreditCard").trim())){
////                    Toast.makeText(getActivity(), "Debit: 1", Toast.LENGTH_SHORT).show();
////
////                    String insertAmount = et_cash.getText().toString();
////                    if (insertAmount.equals(null) || insertAmount.isEmpty()) {
////                        Toast.makeText(getActivity(), "EMPTY AMOUNT", Toast.LENGTH_SHORT).show();
////                        return;
////                    } else {
////                        if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
////
////
////                            Toast.makeText(getActivity(), "TENDER < TOTAL DUE", Toast.LENGTH_SHORT).show();
////                            Log.e("TENDER AMount",String.valueOf(Double.valueOf(insertAmount)));
////                            Log.e("Total Due",String.valueOf(Double.parseDouble(totalAmountToPayFormatted)));
////
////
////                        }
////                        if (Double.valueOf(insertAmount) > Double.valueOf(totalAmountToPayFormatted)) {
////                            Toast.makeText(getActivity(), "TENDER > TOTAL DUE", Toast.LENGTH_SHORT).show();
////                        }
////                        else if (Double.valueOf(insertAmount).equals(Double.valueOf(totalAmountToPayFormatted))) {
////                            Toast.makeText(getActivity(), "Debit: 2", Toast.LENGTH_SHORT).show();
////                            // Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
////                            if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){
////                                Toast.makeText(getActivity(), "Debit: 3", Toast.LENGTH_SHORT).show();
////                            }
////                            else{
////                                Toast.makeText(getActivity(), "Debit: 4", Toast.LENGTH_SHORT).show();
////                                new Thread(new Runnable() {
////                                    @Override
////
////
////                                    public void run() {
////                                        Looper.prepare();
////
////
////
////                                        bankTransactionVar.setCardType(modePayment);
////                                        createTextfileBankCreditCard();
////                                        insertBankTransactionTemp(getActivity());
////                                        updateReading();
////                                        completeTransaction();
////                                        getTransactionRecord();
////
////
////
////
////                                    }
////                                }).start();
////                            }
////
////                        }
////                    }
////
//////                    modePayment="";
//////                    typeOfPayment="";
////
////
////                }
//                debitCardPayment2();
//
//
//
//
//                alertDialog.dismiss();
//            }
//        });

        btn_EnterDebit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                debitConfirm(FinalTypeOfCard);



            }
        });






    }
    private void debitConfirm(String typeOfCardPayment){

        if (et_CardOwner.getText().toString().length()==0) {
            et_CardOwner.setError("CardHolder Name is required");
        }

        else if(et_DebitExpiry.getText().toString().length()==0){
            et_DebitExpiry.setError("Card Expiry is required");
        }
        else if(et_CardApproval.getText().toString().length()==0){
            et_CardApproval.setError("Card Approval is required");
        }
        else {




            bankTransactionVar.setBankName(FinalTypeOfCard);
            bankTransactionVar.setCardOwner(et_CardOwner.getText().toString().trim());
            bankTransactionVar.setCardNumber(et_DebitNumber.getText().toString().trim());
            bankTransactionVar.setCardExpiry(et_DebitExpiry.getText().toString().trim());
            bankTransactionVar.setCardType(modePayment);
            Log.d("testEnter", "onClick: "+typeOfPayment);
            bankTransactionVar.setCardApproval(et_CardApproval.getText().toString());
            modePayment = "DebitCard";
            totalAmountToPayFormatted = lbl_due.getText().toString();
            alertDialog.dismiss();
            debitCardPayment2(FinalTypeOfCard);






        }


    }


    private void debitCardPayment2(String typeOfCard){
        typeOfPayment=FinalTypeOfCard;
        modePayment="DebitCard";
        // Log.e("payment",typeOfPayment);

        if (modePayment.equals("DebitCard")){
            String insertAmount = et_cash.getText().toString();
            if (insertAmount.equals(null) || insertAmount.isEmpty()) {
                Toast.makeText(getActivity(), "EMPTY AMOUNT", Toast.LENGTH_SHORT).show();

                DialogCursor=0;
                mapCode2Activate=0;
                return;
            }

            else{
                alertDialog.dismiss();
                debitCardComplete(insertAmount);
            }

        }
    }


    private void debitCardComplete(String insertAmount){


        mapCode2Activate=0;
        DialogCursor=22;
        FinalConfirmingInsertAmount = insertAmount;




        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run(){



                AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                LayoutInflater inflater = getLayoutInflater();
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_payment_confirmation, null);
                builder.setView(alertLayout);
                alertDialog = builder.create();
                TextView tv_tenderType=alertLayout.findViewById(R.id.tv_tenderType);
                TextView tv_amountDue=alertLayout.findViewById(R.id.tv_amountDue);
                TextView tv_tenderAmount=alertLayout.findViewById(R.id.tv_tenderAmount);
                Button btn_confirm=alertLayout.findViewById(R.id.btn_confirm);
                LinearLayout ll_totalBalance=alertLayout.findViewById(R.id.ll_totalBalance);
                LinearLayout ll_totalChange=alertLayout.findViewById(R.id.ll_totalChange);
                TextView tv_totalBalance=alertLayout.findViewById(R.id.tv_totalBalance);
                TextView tv_totalChange=alertLayout.findViewById(R.id.tv_totalChange);


                ll_totalBalance.setVisibility(View.GONE);
                ll_totalChange.setVisibility(View.GONE);


                DecimalFormat format = new DecimalFormat("0.00");
                tv_amountDue.setText(""+lbl_due.getText().toString());
                String formatted = format.format(Double.parseDouble(et_cash.getText().toString()));
                tv_tenderAmount.setText(""+String.valueOf(formatted));
                Log.e("TestDebugg",String.valueOf(1));

                SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
                Cursor itemCheckMultipleTemp = db2.rawQuery("select * from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
                if (itemCheckMultipleTemp.getCount()!=0){
                    multiplePayment=1;
                    Log.e("TestDebugg",String.valueOf(2));
                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) < Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalBalance.setVisibility(View.VISIBLE);

                    Log.e("PAYMENT","LESS THAN");


                    multiplePayment=1;
                    String totalBalance = format.format(Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()));
                    tv_totalBalance.setText(String.valueOf(totalBalance));

                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) > Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalChange.setVisibility(View.VISIBLE);
                    String totalChange = format.format((Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()))*-1);
                    tv_totalChange.setText(String.valueOf(totalChange));
                }



                tv_tenderType.setText(typeOfPayment);
                DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
                btn_confirm.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {






                        finalCreditConfirm(FinalConfirmingInsertAmount);

                        alertDialog.dismiss();



                    }








                });

                alertDialog.show();

            }

        });



    }

    private void finalDebitConfirm(String insertAmount){

        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {


                if (multiplePayment==1) {

                    SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
                    Cursor itemListC2 = db2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);

                    Log.e("TestDebugg",String.valueOf(3));

                    if (itemListC2.getCount()!=0) {
                        itemListC2.moveToNext();
                        readRefNumber=itemListC2.getString(0);
                    }
                    else{
                        readReferenceNumber();
                    }

                    itemListC = db2.rawQuery("select * from InvoiceReceiptTotal where TransactionID='" + readRefNumber + "'", null);



                    if (itemListC.getCount() == 0) {


                        // start of inserting multiple


//                                if (Double.parseDouble(tv_tenderAmount.getText().toString())<=Double.parseDouble(tv_amountDue.getText().toString())){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","inserted transction");
//                                    Log.e("TestDebugg",String.valueOf("3.2"));
//                                    //insertMultiplePayment();
//
                        Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                                readRefNumber,
                                typeOfPayment,
                                tv_tenderAmount.getText().toString(),
                                modePayment
                        );
                        showingOfTender();
//                                            createTextfileMultiple();
//                                            createTextfileCash();
//                                            updateReading();
//                                            // completeTransaction();
//                                            getTransactionRecord();
//                                }


                        Double subtotal=0.00;
                        Cursor itemCheckMultiple = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp", null);
                        if (itemCheckMultiple.getCount()!=0){
                            while(itemCheckMultiple.moveToNext()){
                                subtotal=itemCheckMultiple.getDouble(0);
                            }
                        }
                        Log.e("subtotal",String.valueOf(subtotal));
                        itemCheckMultiple.close();

                        String finalAmount="0.00";
                        //   if (Double.parseDouble(finalAmount)==Double.parseDouble(tv_amountDue.getText().toString())){
                        if (Double.parseDouble(lbl_due.getText().toString())<=Double.parseDouble("0.00")){
                            Log.e("Transaction#",readRefNumber);
                            Log.e("invoice","inserted transction");


                            insertMultiplePayment();
                            showingOfTender();
                            createTextfileMultiple();


                            Cursor insertToFinal = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp", null);

                            if (insertToFinal.getCount()!=0){

                                while(insertToFinal.moveToNext()){
                                    Log.e("INSERT INVOICE FINAL","Test2");
                                    databaseHandler.insertInvoiceMultipleFinal(
                                            insertToFinal.getString(1),
                                            insertToFinal.getString(2),
                                            insertToFinal.getString(3),
                                            insertToFinal.getString(4)

                                    );

                                }


                                SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
                                String deleteInvoiceReceiptItem = "delete from InvoiceMultiplePaymentTemp";
                                PosOutputDB.execSQL(deleteInvoiceReceiptItem);

                            }
                            insertToFinal.close();



                            updateReading();
                            //  completeTransaction();
                            getTransactionRecord();

                            Log.e("PRINTING","else if");
                        }


                        //end of inserting multiple




                    }
                    else{
                        Log.e("TestDebugg",String.valueOf(3.3));
                        if (Double.parseDouble(tv_tenderAmount.getText().toString())<Double.parseDouble(tv_amountDue.getText().toString())){
                            Log.e("Transaction#",readRefNumber);
                            Log.e("invoice","transaction still open");
                            Log.e("TestDebugg",String.valueOf(4));
//                                        Log.e("invoice","Transaction still open");
                            Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                                    readRefNumber,
                                    tv_tenderType.getText().toString(),
                                    tv_tenderAmount.getText().toString(),
                                    modePayment

                            );
                            showingOfTender();


                        }


                        if (Double.parseDouble(tv_tenderAmount.getText().toString())==Double.parseDouble(tv_amountDue.getText().toString())){
                            Log.e("Transaction#",readRefNumber);
                            Log.e("invoice","transaction still open");
//                                        Log.e("invoice","Transaction still open");
                            Log.e("TestDebugg",String.valueOf(5));
                            Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                                    readRefNumber,
                                    tv_tenderType.getText().toString(),
                                    tv_tenderAmount.getText().toString(),
                                    modePayment
                            );



                            showingOfTender();
                            openCashBox();
                            createTextfileBankDebitCard();
                            //  insertBankTransactionTemp(getActivity());
                            // createTextfileMultiple();//create for multiple
                            updateReading();
                            completeTransaction();
                            getTransactionRecord();



                        }


                    }
                }
                else{


                    if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
                        Log.e("else","<");
                        Log.e("TestDebugg","testDbugging1");
                        Log.e("insertAmount",insertAmount);
                        Log.e("totalAmountToPay",totalAmountToPayFormatted);
                        Log.e("TestDebugg",String.valueOf(6));
                        //subctract tenderamount to net due
                        alertDialog.dismiss();


                    }
                    else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
                        Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                        Log.e("TestDebugg",String.valueOf(7));
                        Log.e("TestDebugg","testDbugging2");
                        if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){

                        }
                        else{

                            new Thread(new Runnable() {
                                @Override


                                public void run() {
                                    Looper.prepare();



                                    Log.e("TestDebugg",String.valueOf(8));
                                    openCashBox();
                                    createTextfileBankDebitCard();
                                    //  insertBankTransactionTemp(getActivity());
                                    updateReading();
                                    completeTransaction();
                                    getTransactionRecord();









                                }
                            }).start();
                        }

                    }
                }




                alertDialog.dismiss();
            }
        });





    }




    //endregion of debit card module

    //region other payment module

    int changeType;
    //TextView tv_tenderType;
    private void otherPayment(){
        //  typeOfPayment="CreditCard";
        modePayment=otherPaymentMode;
        typeOfPayment=otherPaymentMode;
        //  DialogCursor=33;
        ///test123

        if (modePayment.equals(otherPaymentMode)){
            String insertAmount = et_cash.getText().toString();
            if (insertAmount.equals(null) || insertAmount.isEmpty()) {
                Toast.makeText(getActivity(), "EMPTY AMOUNT", Toast.LENGTH_SHORT).show();
                DialogCursor=0;
                // DialogCursor=0;
                return;
            }
            else {


                AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                LayoutInflater inflater = getLayoutInflater();
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_payment_confirmation, null);
                builder.setView(alertLayout);
                alertDialog = builder.create();
                  tv_tenderType=alertLayout.findViewById(R.id.tv_tenderType);
                 tv_amountDue=alertLayout.findViewById(R.id.tv_amountDue);
                 tv_tenderAmount=alertLayout.findViewById(R.id.tv_tenderAmount);
                Button btn_confirm=alertLayout.findViewById(R.id.btn_confirm);
                LinearLayout ll_totalBalance=alertLayout.findViewById(R.id.ll_totalBalance);
                LinearLayout ll_totalChange=alertLayout.findViewById(R.id.ll_totalChange);
                TextView tv_totalBalance=alertLayout.findViewById(R.id.tv_totalBalance);
                TextView tv_totalChange=alertLayout.findViewById(R.id.tv_totalChange);

                ll_totalBalance.setVisibility(View.GONE);
                ll_totalChange.setVisibility(View.GONE);


                DecimalFormat format = new DecimalFormat("0.00");
                tv_amountDue.setText(""+lbl_due.getText().toString());
                String formatted = format.format(Double.parseDouble(et_cash.getText().toString()));
                tv_tenderAmount.setText(""+String.valueOf(formatted));
                Log.e("TestDebugg",String.valueOf(1));
                FinalConfirmingInsertAmount=insertAmount;

                SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
                Cursor itemCheckMultipleTemp = db2.rawQuery("select * from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
                if (itemCheckMultipleTemp.getCount()!=0){
                    multiplePayment=1;
                    Log.e("TestDebugg",String.valueOf(2));
                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) < Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalBalance.setVisibility(View.VISIBLE);

                    Log.e("PAYMENT","LESS THAN");


                    multiplePayment=1;
                    String totalBalance = format.format(Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()));
                    tv_totalBalance.setText(String.valueOf(totalBalance));

                }
                if (Double.parseDouble(tv_tenderAmount.getText().toString()) > Double.parseDouble(tv_amountDue.getText().toString())){
                    ll_totalChange.setVisibility(View.VISIBLE);
                    String totalChange = format.format((Double.parseDouble(tv_amountDue.getText().toString())-Double.parseDouble(tv_tenderAmount.getText().toString()))*-1);
                    tv_totalChange.setText(String.valueOf(totalChange));
                }



                tv_tenderType.setText(typeOfPayment);
                DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
                btn_confirm.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {


                        confirmOtherPayment(FinalConfirmingInsertAmount);






                        DialogCursor=0;
                        alertDialog.dismiss();



                    }








                });

                alertDialog.show();

            }
        }
    }

    private void confirmOtherPayment(String insertAmount){
        if (multiplePayment==1) {

            databaseHandler = new DatabaseHandler(getActivity());
            SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
            Cursor itemListC2 = db2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);

            Log.e("TestDebugg",String.valueOf(3));

            if (itemListC2.getCount()!=0) {
                itemListC2.moveToNext();
                readRefNumber=itemListC2.getString(0);
            }
            else{
                readReferenceNumber();
            }

            itemListC = db2.rawQuery("select * from InvoiceReceiptTotal where TransactionID='" + readRefNumber + "'", null);



            if (itemListC.getCount() == 0) {


                // start of inserting multiple


//                                if (Double.parseDouble(tv_tenderAmount.getText().toString())<=Double.parseDouble(tv_amountDue.getText().toString())){
//                                    Log.e("Transaction#",readRefNumber);
//                                    Log.e("invoice","inserted transction");
//                                    Log.e("TestDebugg",String.valueOf("3.2"));
//                                    //insertMultiplePayment();
//

                Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                        readRefNumber,
                        typeOfPayment,
                        insertAmount,
                        modePayment
                );
                showingOfTender();
//                                            createTextfileMultiple();
//                                            createTextfileCash();
//                                            updateReading();
//                                            // completeTransaction();
//                                            getTransactionRecord();
//                                }


                Double subtotal=0.00;
                Cursor itemCheckMultiple = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp", null);
                if (itemCheckMultiple.getCount()!=0){
                    while(itemCheckMultiple.moveToNext()){
                        subtotal=itemCheckMultiple.getDouble(0);
                    }
                }
                Log.e("subtotal",String.valueOf(subtotal));
                itemCheckMultiple.close();

                String finalAmount="0.00";
                //   if (Double.parseDouble(finalAmount)==Double.parseDouble(tv_amountDue.getText().toString())){
                if (Double.parseDouble(lbl_due.getText().toString())<=Double.parseDouble("0.00")){
                    Log.e("Transaction#",readRefNumber);
                    Log.e("invoice","inserted transction");


                    insertMultiplePayment();
                    showingOfTender();
                    createTextfileMultiple();


                    Cursor insertToFinal = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp", null);

                    if (insertToFinal.getCount()!=0){

                        while(insertToFinal.moveToNext()){
                            Log.e("INSERT INVOICE FINAL","Test2");
                            databaseHandler.insertInvoiceMultipleFinal(
                                    insertToFinal.getString(1),
                                    insertToFinal.getString(2),
                                    insertToFinal.getString(3),
                                    insertToFinal.getString(4)

                            );

                        }


                        SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
                        String deleteInvoiceReceiptItem = "delete from InvoiceMultiplePaymentTemp";
                        PosOutputDB.execSQL(deleteInvoiceReceiptItem);

                    }
                    insertToFinal.close();



                    updateReading();
                    //  completeTransaction();
                    getTransactionRecord();

                    Log.e("PRINTING","else if");
                }


                //end of inserting multiple
                DialogCursor=0;



            }
            else{
                Log.e("TestDebugg",String.valueOf(3.3));
                if (Double.parseDouble(insertAmount)<Double.parseDouble(tv_amountDue.getText().toString())){
                    Log.e("Transaction#",readRefNumber);
                    Log.e("invoice","transaction still open");
                    Log.e("TestDebugg",String.valueOf(4));
//                                        Log.e("invoice","Transaction still open");
                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                            readRefNumber,
                            insertAmount,
                            tv_tenderAmount.getText().toString(),
                            modePayment
                    );
                    showingOfTender();


                }


                if (Double.parseDouble(insertAmount)==Double.parseDouble(tv_amountDue.getText().toString())){
                    Log.e("Transaction#",readRefNumber);
                    Log.e("invoice","transaction still open");
//                                        Log.e("invoice","Transaction still open");
                    Log.e("TestDebugg",String.valueOf(5));
                    Boolean insert = databaseHandler.insertInvoiceMultipleTemp(
                            readRefNumber,
                            typeOfPayment,
                            insertAmount,
                            modePayment
                    );



                    showingOfTender();
                    openCashBox();
                    createTextfileOtherPayment();
                    //createTextfileBankCreditCard();
                    //  insertBankTransactionTemp(getActivity());
                    // createTextfileMultiple();//create for multiple
                    updateReading();
                    completeTransaction();
                    getTransactionRecord();

                    DialogCursor=0;


                }


            }
        }
        else{

            SQLiteDatabase settingsDB = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
            Cursor checkChangeType = settingsDB.rawQuery("select ChangeType from OtherPayment where PaymentName = '"+typeOfPayment+"'", null);
            if (checkChangeType.getCount()!=0){

                if(checkChangeType.moveToFirst()){
                    if(checkChangeType.getInt(0)==0){
                        Log.d("PAYMENT TAG","NO CHANGE");
                        changeType=0;

                    }
                    else if (checkChangeType.getInt(0)==1){
                        Log.d("PAYMENT TAG","ALLOW CHANGE OTHER INCOME");
                        changeType=1;
                    }
                    else{
                        Log.d("PAYMENT TAG","ALLOW CHANGE CASH");
                        changeType=2;
                    }
                }

            }



            if (changeType==0){

                if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
                    Log.e("else","<");
                    Log.e("TestDebugg","testDbugging1");
                    Log.e("insertAmount",insertAmount);
                    Log.e("totalAmountToPay",totalAmountToPayFormatted);
                    Log.e("TestDebugg",String.valueOf(6));
                    //subctract tenderamount to net due
                    alertDialog.dismiss();


                }
                else if (Double.valueOf(insertAmount).equals( Double.valueOf(totalAmountToPayFormatted))) {
                    Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                    Log.e("TestDebugg",String.valueOf(7));
                    Log.e("TestDebugg","testDbugging2");
                    if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){

                    }
                    else{

                        new Thread(new Runnable() {
                            @Override


                            public void run() {
                                Looper.prepare();



                                Log.e("TestDebugg",String.valueOf(8));
                                createTextfileOtherPayment();
                                //  insertBankTransactionTemp(getActivity());
                                updateReading();
                                completeTransaction();
                                getTransactionRecord();








                            }
                        }).start();
                    }
                    alertDialog.dismiss();

                }
                else{
                    Toast.makeText(getActivity(), "PLEASE INPUT EXACT AMOUNT", Toast.LENGTH_SHORT).show();
                    Log.d("TAG", "insert amt : "+insertAmount);
                    Log.d("TAG", "insert amt : "+totalAmountToPayFormatted);
                    alertDialog.dismiss();
                }


            }
            else if(changeType==1){ // allow change
                if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
                    Log.e("else","<");
                    Log.e("TestDebugg","testDbugging1");
                    Log.e("insertAmount",insertAmount);
                    Log.e("totalAmountToPay",totalAmountToPayFormatted);
                    Log.e("TestDebugg",String.valueOf(6));
                    //subctract tenderamount to net due
                    alertDialog.dismiss();


                }
                else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
                    Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                    Log.e("TestDebugg",String.valueOf(7));
                    Log.e("TestDebugg","testDbugging2");
                    if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){

                    }
                    else{

                        new Thread(new Runnable() {
                            @Override


                            public void run() {
                                Looper.prepare();



                                Log.e("TestDebugg",String.valueOf(8));
                                createTextfileOtherPayment();
                                //  insertBankTransactionTemp(getActivity());
                                updateReading();
                                completeTransaction();
                                getTransactionRecord();








                            }
                        }).start();
                    }

                }
                alertDialog.dismiss();
            }
            else{// cash change
                if (Double.valueOf(insertAmount) < Double.valueOf(totalAmountToPayFormatted)) {
                    Log.e("else","<");
                    Log.e("TestDebugg","testDbugging1");
                    Log.e("insertAmount",insertAmount);
                    Log.e("totalAmountToPay",totalAmountToPayFormatted);
                    Log.e("TestDebugg",String.valueOf(6));
                    //subctract tenderamount to net due
                    alertDialog.dismiss();


                }
                else if (Double.valueOf(insertAmount) >= Double.valueOf(totalAmountToPayFormatted)) {
                    Toast.makeText(getActivity(), "TENDER TOTAL DUE", Toast.LENGTH_SHORT).show();
                    Log.e("TestDebugg",String.valueOf(7));
                    Log.e("TestDebugg","testDbugging2");
                    if (String.valueOf(totalAmountToPayFormatted).equals("0.00")){

                    }
                    else{

                        new Thread(new Runnable() {
                            @Override


                            public void run() {
                                Looper.prepare();



                                Log.e("TestDebugg",String.valueOf(8));
                                createTextfileOtherPayment();
                                //  insertBankTransactionTemp(getActivity());
                                updateReading();
                                completeTransaction();
                                getTransactionRecord();








                            }
                        }).start();
                    }

                }
                DialogCursor=0;
                alertDialog.dismiss();
            }










        }
    }

    int showReference;
    EditText et_referenceNumber;
    private void otherPaymentSelection(int position){

        otherPaymentPosition=position;
        for (int x=0;x<PaymentNameList.size();x++){
            //  Log.e("PAYMENT",PaymentNameList.get(CursorID));
            if (AllowReferenceList.get(position).equals("YES")){

                alertDialog.dismiss();


                showReference=1;


                //start


                AlertDialog.Builder builder  = new AlertDialog.Builder(view.getContext());
                LayoutInflater inflater = getLayoutInflater();
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_show_reference, null);
                builder.setView(alertLayout);
                alertDialog = builder.create();

                et_referenceNumber = alertLayout.findViewById(R.id.et_referenceNumber);
                Button btn_submit = alertLayout.findViewById(R.id.btn_submit);
                btn_submit.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        alertDialog.dismiss();
                        otherPaymentMode=PaymentNameList.get(position);
                        otherPaymentReference=et_referenceNumber.getText().toString();
                        Toast.makeText(getContext(), et_referenceNumber.getText().toString(), Toast.LENGTH_SHORT).show();
                        otherPayment();

                        showReference=0;
                    }
                });

                alertDialog.show();







                //end




            }
            else{
                otherPaymentMode=PaymentNameList.get(position);
                Log.e("REFERENCE",AllowReferenceList.get(position));
                otherPayment();
            }
        }
    }





    //================================END OF TYPE OF PAYMENT========================================
    ArrayList<other_payment_model>otherPaymentList=new ArrayList<other_payment_model>();
    private void showingOtherPayment() {



//        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
//        LayoutInflater inflater = getLayoutInflater();
//        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_discountlist, null);
//        TextView tv_dialogName = alertLayout.findViewById(R.id.tv_dialogName);
//        tv_dialogName.setText("OTHER PAYMENT");
//
//        builder.setView(alertLayout);
//
//
//         alertDialog = builder.create();





        int btnCounter=0;
        discountType="";
        DialogCursor=3;



        OtherPaymentAutoIDList=new ArrayList<>();
        PaymentNameList=new ArrayList<>();
        AllowReferenceList=new ArrayList<>();
        AllowUserDetailsList=new ArrayList<>();



        CheckItemDatabase3OtherPayment();
        int numberOfItem = totalPaymentButtonList;

        other_payment_model po2=null;
        otherPaymentList.clear();


        // String otherPaymentAutoIDList,String paymentNameList,String allowReferenceList,String allowUserDetailsList
        for (int x=0;x<numberOfItem;x++){
            po2 = new other_payment_model(x+1,OtherPaymentAutoIDList.get(x),PaymentNameList.get(x),AllowReferenceList.get(x),AllowUserDetailsList.get(x));
            otherPaymentList.addAll(Arrays.asList(new other_payment_model[]{po2}));
            Log.d("TAG", "showingOtherPayment: "+OtherPaymentAutoIDList.get(x));


        }

        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext(),R.style.DialogSlide);
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_discountlist, null);
        builder.setView(alertLayout);



        //et_CardOwner.requestFocus();

        alertDialog = builder.create();

        alertDialog.getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        alertDialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.getWindow().getAttributes().windowAnimations=R.anim.slide_left;
        et_command = alertLayout.findViewById(R.id.et_command);



        Button btn_cancel = alertLayout.findViewById(R.id.btn_cancel);
        btn_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                alertDialog.dismiss();
            }
        });
        rv_discountList  = alertLayout.findViewById(R.id.rv_discountlist);
        rv_discountList.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.HORIZONTAL,false);
        layoutManager.removeAllViews();
        rv_discountList.setLayoutManager(new GridLayoutManager(this.getContext(), 5));
        mAdapter=new cashier_payment.RecyclerviewAdapterOtherPayment(this.getContext(),otherPaymentList);
        rv_discountList.setAdapter(mAdapter);


//        LinearLayout rl = (LinearLayout) alertLayout.findViewById(R.id.linearlayout);
//        rl.removeAllViewsInLayout();
//
//        int totalPerRow=6;
//
//        DisplayMetrics displayMetrics = new DisplayMetrics();
//        getActivity().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
//        int height = displayMetrics.heightPixels;
//        int width = displayMetrics.widthPixels/2/totalPerRow;
//
//
//        for (int i2 = 1; i2 <= 20; i2++) {
//            LinearLayout row2 = new LinearLayout(rl.getContext());
//            row2.setOrientation(LinearLayout.HORIZONTAL);
//            row2.setLayoutParams(new ViewGroup.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.MATCH_PARENT));
//
//
//
//            for (int j2 = 0; j2 < totalPerRow; j2++) {
//
//                rl.removeView(row2);
//                LinearLayout rootView = new LinearLayout(rl.getContext());
//                rootView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
//                rootView.setOrientation(LinearLayout.VERTICAL);
//
//
//                btnCounter++;
//
//                if (btnCounter <= numberOfItem) {
//
//
//                    CardView cardView = new CardView(rl.getContext());
//
//                    LinearLayout.LayoutParams cardViewParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
//                    cardView.setLayoutParams(cardViewParams);
//
//                    ViewGroup.MarginLayoutParams cardViewMarginParams = (ViewGroup.MarginLayoutParams) cardView.getLayoutParams();
//                    cardViewMarginParams.setMargins(3, 3, 3, 3);
//                    cardView.requestLayout();  //Dont forget this line
//
//
//                    View child = getLayoutInflater().inflate(R.layout.invoice_item_list2, null);//child.xml
//                    TextView tv_itemName = child.findViewById(R.id.tv_itemName);
//                    // tv_itemName.setText(itemName.get(btnCounter-1));
//                    tv_itemName.setText(PaymentNameList.get(btnCounter-1));
//                    // linearLayoutButton = child.findViewById(R.id.linearlayoutInsert);
//                    LinearLayout ll_itemClick = child.findViewById(R.id.ll_itemClick);
//                    child.setId(btnCounter-1);
//
//
//                    ll_itemClick.setOnClickListener(new View.OnClickListener() {
//                        @Override
//                        public void onClick(View view) {
////                            OtherPaymentAutoIDList=new ArrayList<>();
////                            PaymentNameList=new ArrayList<>();
////                            AllowReferenceList=new ArrayList<>();
////                            AllowUserDetailsList=new ArrayList<>();
//
//                            for (int x=0;x<PaymentNameList.size();x++){
//                                Log.e("PAYMENT",PaymentNameList.get(child.getId()));
//                                if (AllowReferenceList.get(child.getId()).equals("YES")){
//
//                                    alertDialog.dismiss();
//
//
//                                    //start
//
//
//                                    AlertDialog.Builder builder  = new AlertDialog.Builder(view.getContext());
//                                    LayoutInflater inflater = getLayoutInflater();
//                                    final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_show_reference, null);
//                                    builder.setView(alertLayout);
//                                     alertDialog = builder.create();
//
//                                    EditText et_referenceNumber = alertLayout.findViewById(R.id.et_referenceNumber);
//                                    Button btn_submit = alertLayout.findViewById(R.id.btn_submit);
//                                    btn_submit.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View view) {
//                                            alertDialog.dismiss();
//                                            otherPaymentMode=PaymentNameList.get(child.getId());
//                                            otherPaymentReference=et_referenceNumber.getText().toString();
//                                            Toast.makeText(getContext(), et_referenceNumber.getText().toString(), Toast.LENGTH_SHORT).show();
//                                            otherPayment();
//                                        }
//                                    });
//
//                                    alertDialog.show();
//
//
//
//
//
//
//
//                                    //end
//
//
//
//
//                                }
//                                else{
//                                    otherPaymentMode=PaymentNameList.get(child.getId());
//                                    Log.e("REFERENCE",AllowReferenceList.get(child.getId()));
//                                    otherPayment();
//                                }
//                            }
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//                        }
//                    });
//
//                    cardView.addView(child);
//
//
//                    rootView.addView(cardView);
//
//
//
//                }
//                row2.addView(rootView);
//
//            }
//            rl.addView(row2);
//        }












        alertDialog.show();














    }



    //keyboard ==3
    int keyboardCursor=0;

    private void CancelSale(){
        keyboardCursor=3;
        SQLiteDatabase PosOutputDB2 = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        Cursor checkDB = PosOutputDB2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);
        Cursor checkPartialPayment = PosOutputDB2.rawQuery("select * from InvoiceMultiplePaymentTemp", null);

        if (checkPartialPayment.getCount()==0) {

            if (checkDB.getCount() != 0) {


                //  et_cash.setText(lbl_due.getText().toString());
                AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
                LayoutInflater inflater = getLayoutInflater();
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_cancel_transaction, null);
                builder.setView(alertLayout);
                alertDialog = builder.create();
                Button btn_yes = alertLayout.findViewById(R.id.btn_yes);
                btn_yes.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {



                        // this.getActivity().recreate();
                        confirmCancelSale();
                        keyboardCursor=0;

                    }
                });


                Button btn_no = alertLayout.findViewById(R.id.btn_no);
                btn_no.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        alertDialog.dismiss();keyboardCursor=0;
                    }
                });


                alertDialog.show();

            } else {

                Toast.makeText(getActivity(), "NO TRANSACTION TO CANCEL", Toast.LENGTH_LONG).show();
            }
        }
        else
        {
            Toast.makeText(getActivity(), "This Transaction cannot be Canceled", Toast.LENGTH_LONG).show();
        }

        PosOutputDB2.close();
    }
    private void confirmCancelSale(){
        SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);


        TransactionVoidText();


        String deleteInvoiceReceiptItem = "delete from InvoiceReceiptItem";
        PosOutputDB.execSQL(deleteInvoiceReceiptItem);

        String deleteInvoiceReceiptItemWDiscount = "delete from InvoiceReceiptItemFinalWDiscountTemp";
        PosOutputDB.execSQL(deleteInvoiceReceiptItemWDiscount);

        RefreshScreen();

        PosOutputDB.close();
        keyboardCursor=0;
    }
    String voidTransactionNumber;
    private void TransactionVoidText(){


        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor item1B = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor itemTotal = db2.rawQuery("select sum(OrderQty) from InvoiceReceiptItem", null);
        //Double change = Double.valueOf(et_cash.getText().toString()) - Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        // Double CashDouble = Double.valueOf(et_cash.getText().toString());
        // String Cash = format.format(CashDouble);

        String TotalAmount = lbl_due.getText().toString();
        Double Subtotal = 0.00;
        // String Change = format.format(change);
        String ServiceCharge = "0.00";
        String VatableCharges = "0.00";
        String VatableSales = lbl_subtotal.getText().toString();
        Double totalDiscount = 0.00;
        int RegDiscComputation=0;
        Double FinalVatSalesWRegDisc=0.00;
        Double FinalVatAmtWRegDisc=0.00;

        String VatAmount = lbl_tax.getText().toString();
        String VatExemptSale = "0.00";
        String ZeroRatedSales = tv_zeroRatedSales.getText().toString();
        itemTotal.moveToFirst();
        String TotalItem = String.valueOf(itemTotal.getString(0));
//            cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());


//            cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        or_trans_item.readReferenceNumber(getContext());
        shift_active shift_active = new shift_active();
        shift_active.getShiftingTable(getContext());
        shift_active.getAccountInfo(getContext());
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate = SysDate.getSystemDate();
        Header_Footer_class HeaderFooterClass = new Header_Footer_class();
        HeaderFooterClass.HeaderNote(getContext());
        HeaderFooterClass.FooterNote(getContext());

        StringBuffer buffer = new StringBuffer();


////            system_final_date sysDate= new system_final_date();
////            String FinalDate = sysDate.getSystemDate();
//            File eJournal=new File(Environment.getExternalStorageDirectory()+"/ANDROID_POS/EJournal/");
//            String dateForJournal = FinalDate.replace("/","");
//            File file = new File(eJournal, dateForJournal+or_trans_item.getTransactionNo()+".txt");
//            FileOutputStream stream = new FileOutputStream(file);


        voidTransactionNumber=or_trans_item.getTransactionNo();
        buffer.append(HeaderFooterClass.getHeaderText() + "\n");
        buffer.append("================================" + "\n");
        buffer.append("             V O I D            " + "\n");
        buffer.append("================================" + "\n\n");
        // buffer.append("OFFICIAL RECEIPT" + "\n");
        buffer.append("TRANS#:" +voidTransactionNumber + "\n");
        buffer.append("CASHIER: " + shift_active.getActiveUserID() + " " + shift_active.getActiveUserName().toUpperCase(Locale.ROOT) +"\n" +" SHIFT: " +shift_active.getShiftActive() +"\t");
        buffer.append("POS: " + shift_active.getPOSCounter() + "\n" + convertdate(FinalDate) + "\t" + timeOnly.format(currentDate.getTime()) + "\n");
        buffer.append("--------------------------------" + "\n");




        SQLiteDatabase posAndroid = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);
        while (item1.moveToNext()) {
            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1.getString(0) + "'and OrderID='" + item1.getString(1) + "'", null);
            Double PricePerItem = Double.valueOf(item1.getString(5));
            Double PriceOfItem = Double.valueOf(item1.getString(4));
            Subtotal += PricePerItem;
            Cursor VatCursor = posAndroid.rawQuery("select * from ITEM where ItemID='" + item1.getString(1) + "'", null);
            if (VatCursor.getCount()!=0){
                while (VatCursor.moveToNext()){
                    if (VatCursor.getString(9)==("") || VatCursor.getString(15).equals(null) || VatCursor.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursor.getString(9);

                    }


                    if (VatCursor.getString(15).trim()==("")|| VatCursor.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursor.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursor.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }

            buffer.append(((item1.getString(2) + "                              ").substring(0, 30) + "\r\n" ));
            if (item1.getString(2).length()>31) {
                buffer.append(((item1.getString(2) + "                                                              ").substring(31, 62) + "\r\n"));
            }
            buffer.append(ItemBarcode+"\n");
            buffer.append(
                    (("      x" + item1.getString(3) + "            ").substring(0, 10))
                            + (String.format("%7.2f", PriceOfItem) + "           ").substring(0, 11) +
                            (String.format("%7.2f", PricePerItem) + " " +VatIndicator + "               ").substring(0, 15) +"" + "\n");

            if (discountFormat==1) {
                if (item2.getCount()!=0){



                    while (item2.moveToNext()) {

                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
                        //  buffer.append((((item2.getString(8) + "     ").substring(0, 6) + "x" + item2.getString(10)) + "                    ").substring(0, 25) + "-" + format.format(PricePerItemDiscount) + "\n");
                        //  buffer.append((((item2.getString(8) + "                ").substring(0, 16) + "x" + item2.getString(10)) + "    ").substring(0, 4) + "-" + format.format(PricePerItemDiscount) + "\n");
                        buffer.append((""+ item2.getString(8) + ""+"                          ").substring(0,31) + "\n" + ("                        ").substring(0, 21) +   (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n" );

                        if (!item2.getString(13).trim().equals("-0.00")){
                            Log.e("LESS VAT FINAL",item2.getString(13).trim());
                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(Double.parseDouble(item2.getString(13))))+"           ").substring(0,11) +"\n");
                        }
                    }
                }
            }

        }


        item1.close();






        buffer.append("Reason: " + " CANCEL PURCHASE" + "\n" );

        //buffer.append(("  Service Charges" +"                        ").substring(0,31) + (String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n");

        buffer.append("--------------------------------"+ "\n");
        buffer.append(("TOTAL"+"                               ").substring(0,21)+(("0.00")+"           ").substring(0,11) +  "\n");
        buffer.append("Total Qty:" + TotalItem + "   " +"\n\n\n" );






        printData=buffer.toString();


        //JMPrinter(printData); // for jolimark
        PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity,4);
      //  PrinterSettings.OnlinePrinter();

        //




        create_journal_entry createJournal = new create_journal_entry();
        createJournal.setPrintData(printData);
        createJournal.setTransNumber(or_trans_item.getTransactionNo());
        createJournal.journalEntry(createJournal.getPrintData(),createJournal.getTransNumber(),FinalDate);
//            system_final_date sysDate = new system_final_date();
//            sysDate.insertDate(getContext());

        finalCompleteTransactionVoid();
        //




        db1.close();
        db2.close();



    }
    private void completeTransactionVoid(){
        String DB_NAME2 = "PosOutputDB.db";
        shift_active shift_active = new shift_active();
        shift_active.getAccountInfo(getContext());
        shift_active.getShiftingTable(getContext());


        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());

        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
        SQLiteDatabase db2 = getContext().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor itemListC2 = db2.rawQuery("select sum(OrderQty),sum(OrderPriceTotal) from InvoiceReceiptItem", null);
        Cursor itemListC3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty),sum(DiscPercent),sum(VAT) from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (itemListC2.getCount()==0){
            db2.close();
        }
        if (itemListC2.getCount()!=0){
            if (itemListC2.moveToNext()) {

                transactionIDFinal = cashier_payment_item.getTransactionID();
                transactionOrderQtyFinal = itemListC2.getString(0);
                transactionOrderPriceTotalFinal = Double.valueOf(itemListC2.getString(1));
            }

            //cashier_payment_item.setTransactionID();
//            db2.close();
        }
        if (itemListC3.getCount()==0){
            Toast.makeText(getContext(), "ZERO", Toast.LENGTH_SHORT).show();
            db2.close();
        }
        if (itemListC3.getCount()!=0){
            itemListC3.moveToNext();

            // Toast.makeText(getContext(), "transdiscount " + transDiscount, Toast.LENGTH_SHORT).show();
            transactionOrderPriceTotalFinalDiscount = Double.valueOf(itemListC3.getDouble(0));
            finalDiscQty = itemListC3.getString(1);
            negVat=Double.valueOf(itemListC3.getDouble(3));



        }


        transactionOrderPriceTotalFinal = transactionOrderPriceTotalFinal-(-transactionOrderPriceTotalFinalDiscount)-(-negVat);
        paymentRenderedAmount = et_cash.getText().toString();
        //   Double amount = Double.valueOf(et_cash.getText().toString())-Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        dateFormat2 = new SimpleDateFormat("h:mm a");
        // ChangeAmount= format.format(amount);
        // TransDate = new SimpleDateFormat("MM-dd-yyyy", Locale.getDefault()).format(new Date());
        Date currentTime = Calendar.getInstance().getTime();
        TransTime = dateFormat2.format(currentTime.getTime());
        TransUser=shift_active.getActiveUserID();
        transactionType = "Void";


        cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();

        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate=SysDate.getSystemDate();





        boolean isInserted = databaseHandler.insertInvoiceReceiptTotal(
                cashier_payment_item.getTransactionIdFinal(),
                transactionOrderQtyFinal,
                finalDiscQty,
                String.format("%7.2f",transactionOrderPriceTotalFinalDiscount),

                // String.valueOf(cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",transactionOrderPriceTotalFinal),
                "",
                "",
                "",
                "Void",
                FinalDate,
                TransTime,
                TransUser,
                shift_active.getShiftActive()
        );


        checkIfInvoiceSuspendNotEmpty();
        // Toast.makeText(getContext(), cashier_payment_item.getTransactionIdFinal() + "  " + transactionOrderQtyFinal + "   " + String.valueOf(transactionOrderPriceTotalFinal), Toast.LENGTH_SHORT).show();
//        if (isInserted = true) {
//            Toast.makeText(getActivity(), "INSERTED", Toast.LENGTH_SHORT).show();
//
//
//
//        } else {
//            Toast.makeText(getActivity(), "ERROR inserted final", Toast.LENGTH_SHORT).show();
//        }

        db2.close();

    }

    private void finalCompleteTransactionVoid(){
        String DB_NAME2 = "PosOutputDB.db";
        shift_active shift_active = new shift_active();
        shift_active.getAccountInfo(getContext());
        shift_active.getShiftingTable(getContext());

        dateFormat2 = new SimpleDateFormat("h:mm a");
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
        SQLiteDatabase db2 = getContext().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);


        // TransDate = new SimpleDateFormat("MM-dd-yyyy", Locale.getDefault()).format(new Date());
        Date currentTime = Calendar.getInstance().getTime();
        TransTime = dateFormat2.format(currentTime.getTime());
        TransUser=shift_active.getActiveUserID();
        transactionType = "VOID";


        cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate=SysDate.getSystemDate();





        boolean isInserted = databaseHandler.insertInvoiceReceiptTotal(
                cashier_payment_item.getTransactionIdFinal(),
                transactionOrderQtyFinal,
                finalDiscQty,
                String.format("%7.2f",transactionOrderPriceTotalFinalDiscount),

                // String.valueOf(cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",transactionOrderPriceTotalFinal),
                "0",
                "0",
                "",
                "Void",
                FinalDate,
                TransTime,
                TransUser,
                shift_active.getShiftActive()
        );

        checkIfInvoiceSuspendNotEmpty();






        db2.close();

    }

    private void checkIfInvoiceSuspendNotEmpty(){

        SQLiteDatabase db2 = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        Cursor query = db2.rawQuery("select * from InvoiceReceiptTotalSuspend", null);
        if (query.getCount()!=0){
            while (query.moveToNext()){
                DatabaseHandler dbHandler = new DatabaseHandler(getActivity());
                dbHandler.insertInvoiceReceiptTotal(query.getString(0),
                        query.getString(1),
                        query.getString(2),
                        query.getString(3),
                        query.getString(4),
                        query.getString(5),
                        query.getString(6),
                        query.getString(7),
                        query.getString(8),
                        query.getString(9),
                        query.getString(10),
                        query.getString(11),
                        query.getString(12));
            }
        }

        String strsql = "delete From InvoiceReceiptTotalSuspend ";
        db2.execSQL(strsql);
        db2.close();

    }






    private void loadLabelData(){
        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        lblDatactr++;
        Log.e("COUNTER",String.valueOf(lblDatactr));
        cashierItem = new cashier_payment_item(getContext());
        cashierItem.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Log.e("LOADLABELDATA","1");


        String discType="";
        Cursor checkAllDiscType=db2.rawQuery("select DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (checkAllDiscType.getCount()!=0){
            Log.e("LOADLABELDATA","2");
            while(checkAllDiscType.moveToNext()){

                discountType=checkAllDiscType.getString(0);
                Log.e("DISC TYPE TEST",discountType.trim());





                if (!discountType.trim().equals("DIPLOMAT")){
                    Log.e("DISCOUNT TYPE","NOT DIPLOMATs");

                    Cursor checkDiscCategory=db1.rawQuery("select DiscCategory from DiscountList where DiscountID='"+discountType.trim()+"' ", null);
                    if (checkDiscCategory.getCount()!=0){

                        while(checkDiscCategory.moveToNext()){

                            discCategory=checkDiscCategory.getString(0);
                            Log.e("discCategory",discCategory);
                            if (discCategory.equals("SCD")){
                                Log.e("LOADLABELDATA","SCD");
                                discType= checkAllDiscType.getString(0);
                                discType = discType.substring(0,3);
                                Log.e("disctypeSCD",discType);
                                discountLabelIndicator=3;
                                ll_forDiscountType.setVisibility(View.VISIBLE);
                                if (vatIndicator.getVatIndicator()==1){
                                    lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
                                }
                                else{
                                    lbl_discountLabel.setText("DISCOUNT");
                                }

                            }
                            else if (discCategory.equals("PWD")){
                                Log.e("LOADLABELDATA","PWD");
                                discType= checkAllDiscType.getString(0);
                                discType = discType.substring(0,3);
                                Log.e("disctypePWD",discType);
                                discountLabelIndicator=4;
                                ll_forDiscountType.setVisibility(View.VISIBLE);
                               // lbl_discountLabel.setText("PWD DISCOUNT");

                                if (vatIndicator.getVatIndicator()==1){
                                    lbl_discountLabel.setText("PWD DISCOUNT");
                                }
                                else{
                                    lbl_discountLabel.setText("DISCOUNT");
                                }


                            }
                            else if (discCategory.equals("REG")) {
                                Log.e("LOADLABELDATA","REG");
                                discType= checkAllDiscType.getString(0);
                                discType = discType.substring(0,3);

                                ll_forDiscountType.setVisibility(View.VISIBLE);
                                if (discType.equals("SOL")){
                                    Log.e("disctype final1",discType);
                                    discountLabelIndicator=2;

                                    lbl_discountLabel.setText("SOLO-PARENT DISCOUNT");
                                }
                                else if (discType.equals("ATH")){
                                    Log.e("disctype final2",discType);
                                    discountLabelIndicator=2;
                                    lbl_discountLabel.setText("ATHLETE DISCOUNT");
                                }else {
                                    lbl_discountLabel.setText("REGULAR DISCOUNT");
                                    discountLabelIndicator=2;
                                }



                                if (vatIndicator.getVatIndicator()==1){
                                    lbl_discountLabel.setText("PWD DISCOUNT");
                                }
                                else{
                                    lbl_discountLabel.setText("DISCOUNT");
                                }

                            }
//                        else if (discCategory.equals("SOL")) {
//                            Log.e("LOADLABELDATA","SOL");
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//                            discountLabelIndicator=6;
//                            ll_forDiscountType.setVisibility(View.VISIBLE);
//                            lbl_discountLabel.setText("REGULAR DISCOUNT");
//
//                        }
//                        else if (discCategory.equals("ATH")) {
//                            Log.e("LOADLABELDATA","ATH");
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//                            discountLabelIndicator=7;
//                            ll_forDiscountType.setVisibility(View.VISIBLE);
//                            lbl_discountLabel.setText("REGULAR DISCOUNT");
//
//                        }

                        }
                    }
                    else{
                        Log.e("discCategory","NULL");
                    }


                }
                else{

                    Log.e("LOADLABELDATA","ELSE");
                    if(discountType.equals("DIPLOMAT")){
                        Log.e("LOADLABELDATA","DIPLOMAT");
                        discType= checkAllDiscType.getString(0);
                        discType = discType.substring(0,3);
                        Log.e("disctypeDIP",discType);
                        discountLabelIndicator=5;
                        ll_forDiscountType.setVisibility(View.VISIBLE);
                        lbl_discountLabel.setText("DIPLOMAT");

                    }
                }



            }
        }





        DecimalFormat amountToPayFormat = new DecimalFormat("0.00");
        amountToPayFormatted = amountToPayFormat.format(cashierItem.getTotalAmountToPay());
        lbl_total.setText(String.valueOf(amountToPayFormatted));

        DecimalFormat vatableAmountFormat = new DecimalFormat("0.00");
        vatableAmountFormatted = vatableAmountFormat.format(cashierItem.getVatableAmount());
        lbl_subtotal.setText(vatableAmountFormatted);

        DecimalFormat amountDiscountFormat = new DecimalFormat("0.00");
        amountDiscountFormatted = amountDiscountFormat.format(cashierItem.getAmountDiscount());
        lbl_discount.setText(String.valueOf(amountDiscountFormatted));

        DecimalFormat taxDiscount = new DecimalFormat("0.00");
        taxDiscountted = taxDiscount.format(cashierItem.getTaxAmount());
        lbl_tax.setText((taxDiscountted));

        DecimalFormat totalVatExemptSale = new DecimalFormat("0.00");
        totalVatExemptSaleFormatted = totalVatExemptSale.format(cashierItem.getVatExemptSale());
        Log.e("getVatExempt",totalVatExemptSaleFormatted);
        tv_vatExemptSale.setText(totalVatExemptSaleFormatted);




        DecimalFormat totalZeroRated = new DecimalFormat("0.00");
        totalZeroRatedFormatted = totalZeroRated.format(cashierItem.getZeroRatedSales());
        tv_zeroRatedSales.setText(String.valueOf(totalZeroRatedFormatted));



        // lbl_subtotal




        DecimalFormat totalLessVat = new DecimalFormat("0.00");
        totalLessVatFormatted = totalLessVat.format(cashierItem.getLessVat()*-1);
        tv_lessVat.setText(String.valueOf(totalLessVatFormatted));


        DecimalFormat totalAmountToPayFormat = new DecimalFormat("0.00");
        //  totalAmountToPayFormatted = totalAmountToPayFormat.format(cashierItem.getTotalDueAmount());
        totalAmountToPayFormatted = totalAmountToPayFormat.format(cashierItem.getTotalDueAmount());
        //totalAmountToPayFormatted = totalAmountToPayFormat.format(cashierItem.getTotalAmountToPay()+cashierItem.getAmountDiscount()-cashierItem.getLessVat());
        lbl_due.setText(String.valueOf(totalAmountToPayFormatted));

        String totalAmountFormatted2 = DecFormat.format(cashierItem.getTotalDueAmount());
        lbl_dueFinal.setText(String.valueOf(totalAmountFormatted2));



        db2.close();



    }
    private void CheckItemDatabase3() {
        // discountList

//        private ArrayList<String> DiscountAutoIDList;
//        private ArrayList<String> DiscountIDList;
//        private ArrayList<String> DiscountNameList;
//        private ArrayList<String> DiscountAmountList;
//        private ArrayList<String> DiscountComputationList;
//        private ArrayList<String> DiscountExcludeTaxList;
//        private ArrayList<String> DiscountTypeList;



        DiscountAutoIDList.clear();
        DiscountIDList.clear();
        DiscountNameList.clear();
        DiscountAmountList.clear();
        DiscountComputationList.clear();
        DiscountExcludeTaxList.clear();
        DiscountTypeList.clear();
        DiscCategoryList.clear();
        SalesExcludeTaxList.clear();
        ProRatedTaxList.clear();
        MaxDiscountAmtList.clear();
        OpenDiscountList.clear();


        SQLiteDatabase dbDiscountList = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        Cursor DiscountList = dbDiscountList.rawQuery("select * from DiscountList", null);


        if (DiscountList.getCount() == 0) {
            // Toast.makeText(getActivity(), "NO DATA FOUND", Toast.LENGTH_SHORT).show();
        }
        int btnCtr=0;
        while(DiscountList.moveToNext()){
            btnCtr++;
            DiscountAutoIDList.add(DiscountList.getString(0));
            DiscountIDList.add(DiscountList.getString(1));
            DiscountNameList.add(DiscountList.getString(2));
            DiscountAmountList.add(DiscountList.getString(3));
            DiscountComputationList.add(DiscountList.getString(4));
            DiscountExcludeTaxList.add(DiscountList.getString(5));
            DiscountTypeList.add(DiscountList.getString(6));
            DiscCategoryList.add(DiscountList.getString(7));
            SalesExcludeTaxList.add(DiscountList.getString(12));
            ProRatedTaxList.add(DiscountList.getString(14));
            MaxDiscountAmtList.add(DiscountList.getString(11));
            OpenDiscountList.add(DiscountList.getString(15));

            // Toast.makeText(this, c.getString(2), Toast.LENGTH_SHORT).show();

        }
        totalDiscountButtonList=btnCtr;
        DiscountList.close();
        dbDiscountList.close();









    }


    private void CheckItemDatabase3OtherPayment() {


        OtherPaymentAutoIDList.clear();
        PaymentNameList.clear();
        AllowReferenceList.clear();
        AllowUserDetailsList.clear();



        SQLiteDatabase dbDiscountList = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        Cursor DiscountList = dbDiscountList.rawQuery("select * from OtherPayment", null);


        if (DiscountList.getCount() == 0) {
            // Toast.makeText(getActivity(), "NO DATA FOUND", Toast.LENGTH_SHORT).show();
        }
        int btnCtr=0;
        while(DiscountList.moveToNext()){
            btnCtr++;
            OtherPaymentAutoIDList.add(DiscountList.getString(0));
            PaymentNameList.add(DiscountList.getString(1));
            AllowReferenceList.add(DiscountList.getString(2));
            AllowUserDetailsList.add(DiscountList.getString(3));

            // Toast.makeText(this, c.getString(2), Toast.LENGTH_SHORT).show();

        }
        totalPaymentButtonList=btnCtr;
        DiscountList.close();
        dbDiscountList.close();









    }
    RecyclerView rv_discountList;
    int DialogCursor=0; //1 Creditcard //2 debitcard //3 otherpayment //4 discount
    EditText et_command;
    private void showingDiscountList() {



        int btnCounter=0;
        DialogCursor=4;
        discountType="";


        //initialize keyboard qwerty
//        InitT9MapCode();
//        mapCode2Activate=3;



        DiscountAutoIDList= new ArrayList<>();
        DiscountIDList= new ArrayList<>(); //discountType for getting name/id
        DiscountNameList= new ArrayList<>();
        DiscountAmountList= new ArrayList<>();
        DiscountComputationList= new ArrayList<>();
        DiscountExcludeTaxList= new ArrayList<>();
        DiscountTypeList= new ArrayList<>();
        DiscCategoryList=new ArrayList<>();
        SalesExcludeTaxList = new ArrayList<>();
        ProRatedTaxList = new ArrayList<>();
        MaxDiscountAmtList = new ArrayList<>();
        OpenDiscountList = new ArrayList<>();



        CheckItemDatabase3();
        int numberOfItem = totalDiscountButtonList;


        invoice_discount_model po2=null;
        DiscountModelList.clear();

        for (int x=0;x<numberOfItem;x++){
            po2 = new invoice_discount_model(String.valueOf(x+1),DiscountNameList.get(x));
            DiscountModelList.addAll(Arrays.asList(new invoice_discount_model[]{po2}));


        }

        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext(),R.style.DialogSlide);
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_discountlist, null);
        builder.setView(alertLayout);



        //et_CardOwner.requestFocus();

        alertDialog = builder.create();

        alertDialog.getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        alertDialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.getWindow().getAttributes().windowAnimations=R.anim.slide_left;


        et_command = alertLayout.findViewById(R.id.et_command);
        Button btn_cancel = alertLayout.findViewById(R.id.btn_cancel);
        btn_cancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                alertDialog.dismiss();
                DialogCursor=0;
            }
        });
        rv_discountList  = alertLayout.findViewById(R.id.rv_discountlist);
        rv_discountList.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.HORIZONTAL,false);
        layoutManager.removeAllViews();
        rv_discountList.setLayoutManager(new GridLayoutManager(this.getContext(), 5));
        mAdapter=new cashier_payment.RecyclerviewAdapterDiscount(this.getContext(),DiscountModelList);
        rv_discountList.setAdapter(mAdapter);






//        for (int i2 = 1; i2 <= 20; i2++) {
//            LinearLayout row2 = new LinearLayout(rl.getContext());
//            row2.setOrientation(LinearLayout.HORIZONTAL);
//            row2.setLayoutParams(new ViewGroup.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.MATCH_PARENT));
//
//
//
//            for (int j2 = 0; j2 < totalPerRow; j2++) {
//
//                rl.removeView(row2);
//                LinearLayout rootView = new LinearLayout(rl.getContext());
//                rootView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
//                rootView.setOrientation(LinearLayout.VERTICAL);
//
//
//                btnCounter++;
//
//                if (btnCounter <= numberOfItem) {
//
//
//                    CardView cardView = new CardView(rl.getContext());
//
//                    LinearLayout.LayoutParams cardViewParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
//                    cardView.setLayoutParams(cardViewParams);
//
//                    ViewGroup.MarginLayoutParams cardViewMarginParams = (ViewGroup.MarginLayoutParams) cardView.getLayoutParams();
//                    cardViewMarginParams.setMargins(3, 3, 3, 3);
//                    cardView.requestLayout();  //Dont forget this line
//
//
//                    View child = getLayoutInflater().inflate(R.layout.invoice_item_list2, null);//child.xml
//                    TextView tv_itemName = child.findViewById(R.id.tv_itemName);
//                    // tv_itemName.setText(itemName.get(btnCounter-1));
//                    tv_itemName.setText(DiscountIDList.get(btnCounter-1));
//                    // linearLayoutButton = child.findViewById(R.id.linearlayoutInsert);
//                    LinearLayout ll_itemClick = child.findViewById(R.id.ll_itemClick);
//                    child.setId(btnCounter-1);
//
//
//                    ll_itemClick.setOnClickListener(new View.OnClickListener() {
//                        @Override
//                        public void onClick(View view) {
//
//
//                            SQLiteDatabase PosOutputDb = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
//                            Cursor checkInvoiceReceiptItem = PosOutputDb.rawQuery("select * from InvoiceReceiptItem", null);
//                            Cursor checkDiscountTemp = PosOutputDb.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp", null);
//
//                            if (checkDiscountTemp.getCount()!=0){
//                                Toast.makeText(view.getContext(), "CANNOT APPLY DISCOUNT", Toast.LENGTH_LONG).show();
//                                Log.e("DISCOUNT TEMP","CANNOT APPLY DISCOUNT");
//                                alertDialog.dismiss();
//
//                            }
//                            else{
//
//
//
//
//
//
//
//                                Log.e("DISCOUNT TEMP","EMPTY");
//
//                                discountType=DiscountIDList.get(child.getId());
//                                discountValue=DiscountAmountList.get(child.getId());
//                                discountExlude=DiscountExcludeTaxList.get(child.getId());
//                                discCategory=DiscCategoryList.get(child.getId());
//                                salesExlude=SalesExcludeTaxList.get(child.getId());
//                                ProRated=ProRatedTaxList.get(child.getId());
//
//
//
//                                if (discCategory.equals("SCD")){
//
//                                    AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
//                                    LayoutInflater inflater = LayoutInflater.from(getContext());
//                                    final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_scd_pwd_info, null);
//
//                                    builder.setView(alertLayout);
//                                    AlertDialog alertDialog = builder.create();
//                                    alertDialog.setCanceledOnTouchOutside(false);
//                                    EditText et_custName= alertLayout.findViewById(R.id.et_custName);
//                                    EditText et_custIDNo= alertLayout.findViewById(R.id.et_custIDNo);
//                                    EditText et_custTIN= alertLayout.findViewById(R.id.et_custTIN);
//                                    Button btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
//                                    Button btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);
//
//                                    //int showMessage=0;
//
//                                    btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View view) {
//                                            custInfo.setCustName(et_custName.getText().toString());
//                                            custInfo.setCustIDNo((et_custIDNo.getText().toString()));
//                                            custInfo.setCustTIN((et_custTIN.getText().toString()));
//                                            //  discountComputation();
//
//
//                                            Log.e("discount type",discountType.substring(0,3));
//                                            Log.e("discount type",discountValue);
//                                            Log.e("discount Exclude",discountExlude);
//                                            Log.e("ProRated",ProRated);
//
//
//                                            Double discTransTotal=0.00;
//                                            Double discTransVatableSales=0.00;
//                                            Double discTransDiscount=0.00;
//                                            Double discTransVatAmount=0.00;
//                                            Double discTransVatExemptSales=0.00;
//                                            Double discTransZeroRatedSales=0.00;
//                                            Double discTransLessVat=0.00;
//                                            Double discServiceCharge=0.00;
//                                            Double discTransDueAmount=0.00;
//
//
//
//
//
//                                            if (discCategory.equals("SCD")){
//
//                                                //   custInfo.showDialog(getContext());
//                                                showDialog();
//                                                discountFormat=2;
//                                                discountLabelIndicator=3;
//                                                Log.e("DISCOUNT TRANSACTION","SCD");
//                                                discTransTotal=cashierItem.getTotalDueAmount();
//
//                                                if (discountExlude.equals("YES")){
//                                                    Log.e("DISCOUNT EXCLUDE IF","YES");
//                                                    discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                                                    if (salesExlude.equals("YES")) {
//                                                        discTransVatExemptSales = discTransTotal / 1.12;
//                                                        discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                                                    }
//                                                    else if (salesExlude.equals("NO")){
//                                                        discTransVatExemptSales = discTransTotal;
//                                                        discTransLessVat = discTransTotal  - discTransTotal;
//                                                    }
//                                                    discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                                                    cashierItem.setTotalAmountToPay((discTransTotal));
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                            String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                            String DiscPercent=discountValue;
//
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=custInfo.getCustName();
//                                                            String DiscIdNumber=custInfo.getCustIDNo();
//                                                            String DiscOther=custInfo.getCustTIN();
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("NO")){
//
//
//                                                    Log.e("DISCOUNT EXCLUDE IF","NO");
//                                                    discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName="test2";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                                    Log.e("PRORATED","YES");
//                                                    discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                            }
//                                            if (discCategory.equals("PWD")){
//                                                showDialog();
//                                                //  custInfo.showDialog(getContext());
//                                                discountFormat=2;
//                                                discountLabelIndicator=3;
//                                                Log.e("DISCOUNT TRANSACTION","SCD");
//                                                discTransTotal=cashierItem.getTotalDueAmount();
//
//                                                if (discountExlude.equals("YES")){
//                                                    Log.e("DISCOUNT EXCLUDE IF","YES");
//                                                    discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                                                    if (salesExlude.equals("YES")) {
//                                                        discTransVatExemptSales = discTransTotal / 1.12;
//                                                        discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                                                    }
//                                                    else if (salesExlude.equals("NO")){
//                                                        discTransVatExemptSales = discTransTotal;
//                                                        discTransLessVat = discTransTotal  - discTransTotal;
//                                                    }
//                                                    discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                                                    cashierItem.setTotalAmountToPay((discTransTotal));
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf(discTransDiscount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                            String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("NO")){
//                                                    Log.e("DISCOUNT EXCLUDE IF","NO");
//                                                    discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
////
////
////                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
////
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                            String vat="0.00";
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                                    Log.e("PRORATED","YES");
//                                                    discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                            }
//                                            else  if (discCategory.equals("REG")){
//                                                Log.e("OTHER DISCOUNT","YES");
//
//                                                discountFormat=2;
//                                                discountLabelIndicator=4;
//                                                //  Log.e("DISCOUNT TRANSACTION","PWD");
//                                                discTransTotal=cashierItem.getTotalDueAmount();
//                                                Log.e("OTHER DISCTOTAL",String.valueOf(discTransTotal));
//                                                if (discountExlude.equals("YES")){
//
//
//
//
//                                                    discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//
//
////                                        if (salesExlude.equals("YES")) {
////
////                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
////                                           // discTransVatableSales=discTransTotal/1.12;
////                                        }
////                                        else if (salesExlude.equals("NO")){
////                                            discTransVatableSales=((discTransTotal+discTransDiscount));
////                                           // discTransVatableSales=discTransTotal/1.12;
////                                        }
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        Log.e("REMOVE DISC ON VAT","YES");
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        Log.e("REMOVE DISC ON VAT","NO");
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//                                                    //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                            String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO")&& ProRated.equals("NO")){
//                                                    discTransTotal=cashierItem.getTotalDueAmount();
//                                                    Log.e("OTHER exclude NO",String.valueOf(discTransTotal));
//
//                                                    discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("total",String.valueOf(discTransTotal));
//                                                    Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
//                                                    Log.e("total discount",String.valueOf(discTransDiscount));
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        Log.e("REMOVE DISC ON VAT","YES");
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                        discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                                    }
//                                                    else{
//                                                        Log.e("REMOVE DISC ON VAT","NO");
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                        discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                                    }
//
//
//
//
//
//                                                    //  discTransVatableSales=discTransTotal/1.12;
//                                                    //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
//                                                    //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
////                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
////                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
////                                               // String DiscAmount=String.valueOf(discTransDiscount);
////                                                Log.e("INSERT DISC",DiscAmount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);
//
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                            String vat="0.00";
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                                    Log.e("PRORATED","YES");
//                                                    discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//
////                                    if (discountExlude.equals("NO") && ProRated.equals("YES")){
////                                        discTransTotal=cashierItem.getTotalDueAmount();
////                                        Log.e("OTHER exclude NO",String.valueOf(discTransTotal));
////
////                                        discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
////                                        Log.e("total",String.valueOf(discTransTotal));
////                                        Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
////                                        Log.e("total discount",String.valueOf(discTransDiscount));
////
////
////                                        if (RemoveDiscountOnVatsales.equals("YES")){
////                                            Log.e("REMOVE DISC ON VAT","YES");
////                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
////                                            discTransVatAmount=discTransTotal-(discTransVatableSales);
////                                        }
////                                        else{
////                                            Log.e("REMOVE DISC ON VAT","NO");
////                                            discTransVatableSales=((discTransTotal)/1.12);
////                                            discTransVatAmount=discTransTotal-(discTransVatableSales);
////                                        }
////
////
////
////
////
////                                        //  discTransVatableSales=discTransTotal/1.12;
////                                        //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
////                                        //discTransVatAmount = discTransTotal/1.12-discTransTotal;
////                                        discTransDueAmount=discTransTotal+discTransDiscount;
////
////                                        // discTransDiscount=100/1.12*.
////
////
////
////
////
////                                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
////                                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
////                                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
////                                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
////                                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
////                                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
////                                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
////                                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
////                                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
////
////
////
////                                        //insert
////                                        if (checkInvoiceReceiptItem.getCount()!=0){
////                                            DatabaseHandler myDb = new DatabaseHandler(getContext());
////                                            while(checkInvoiceReceiptItem.moveToNext()){
////
//////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//////                                                String DiscountType=discountType;
//////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//////                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
//////                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
//////                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
//////                                               // String DiscAmount=String.valueOf(discTransDiscount);
//////                                                Log.e("INSERT DISC",DiscAmount);
//////                                                String DiscPercent=discountValue;
//////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//////                                                String DiscBuyerName=" ";
//////                                                String DiscIdNumber=" ";
//////                                                String DiscOther=" ";
////
////
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);
////
////                                                String DiscPercent=discountValue;
////                                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String vat="0.00";
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
////
////
////
////
////
////
////
////
////                                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
////                                                        (TransactionID,
////                                                                OrderID,
////                                                                OrderName,
////                                                                OrderQty,
////                                                                OrderPrice,
////                                                                OrderPriceTotal,
////                                                                TransactionTime,
////                                                                TransactionDate,
////                                                                DiscountType,
////                                                                ItemRemarks,
////                                                                DiscQty,
////                                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
////                                                                DiscPercent,
////                                                                String.format("%7.2f", Double.parseDouble(vat)),
////                                                                DiscBuyerName,
////                                                                DiscIdNumber,
////                                                                DiscOther );
////                                            }
////
////                                        }
////
////
////
////
////                                    }
//                                            }
//
//
//
//
//
//
//                                            if (discCategory.equals("SCD")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
//                                            }
//                                            else if (discCategory.equals("PWD")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("PWD DISCOUNT");
//                                            }
//                                            else if (discountType.equals("DIPLOMAT")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("DIPLOMAT");
//                                            }
//                                            else if (discCategory.equals("REG")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("REGULAR DISCOUNT");
//                                            }
//
//
//
//
//
//
//                                            loadLabelData();
//
//                                            cashierItem.setTotalAmountToPay(discTransDueAmount);
//                                            Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
//                                            alertDialog.dismiss();
//
//                                            //    RefreshScreen();
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//                                            Toast.makeText(getContext(), discountType + " Applied", Toast.LENGTH_LONG).show();
//                                            alertDialog.dismiss();
//
//
//                                        }
//                                    });
//
//                                    btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View view) {
//
//                                            Toast.makeText(getContext(), discountType + " Canceled", Toast.LENGTH_LONG).show();
//                                            alertDialog.dismiss();
//
//
//                                        }
//                                    });
//
//
//
//                                    alertDialog.show();
//
//
//
//
//
//                                }
//                                if (discCategory.equals("PWD")){
//
//                                    AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
//                                    LayoutInflater inflater = LayoutInflater.from(getContext());
//                                    final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_scd_pwd_info, null);
//
//                                    builder.setView(alertLayout);
//                                    AlertDialog alertDialog = builder.create();
//                                    alertDialog.setCanceledOnTouchOutside(false);
//                                    EditText et_custName= alertLayout.findViewById(R.id.et_custName);
//                                    EditText et_custIDNo= alertLayout.findViewById(R.id.et_custIDNo);
//                                    EditText et_custTIN= alertLayout.findViewById(R.id.et_custTIN);
//                                    Button btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
//                                    Button btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);
//
//                                    //int showMessage=0;
//
//                                    btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View view) {
//                                            custInfo.setCustName(et_custName.getText().toString());
//                                            custInfo.setCustIDNo((et_custIDNo.getText().toString()));
//                                            custInfo.setCustTIN((et_custTIN.getText().toString()));
//                                            //  discountComputation();
//
//
//                                            Log.e("discount type",discountType.substring(0,3));
//                                            Log.e("discount type",discountValue);
//                                            Log.e("discount Exclude",discountExlude);
//                                            Log.e("ProRated",ProRated);
//
//
//                                            Double discTransTotal=0.00;
//                                            Double discTransVatableSales=0.00;
//                                            Double discTransDiscount=0.00;
//                                            Double discTransVatAmount=0.00;
//                                            Double discTransVatExemptSales=0.00;
//                                            Double discTransZeroRatedSales=0.00;
//                                            Double discTransLessVat=0.00;
//                                            Double discServiceCharge=0.00;
//                                            Double discTransDueAmount=0.00;
//
//
//
//
//
//                                            if (discCategory.equals("SCD")){
//
//                                                //   custInfo.showDialog(getContext());
//                                                showDialog();
//                                                discountFormat=2;
//                                                discountLabelIndicator=3;
//                                                Log.e("DISCOUNT TRANSACTION","SCD");
//                                                discTransTotal=cashierItem.getTotalDueAmount();
//
//                                                if (discountExlude.equals("YES")){
//                                                    Log.e("DISCOUNT EXCLUDE IF","YES");
//                                                    discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                                                    if (salesExlude.equals("YES")) {
//                                                        discTransVatExemptSales = discTransTotal / 1.12;
//                                                        discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                                                    }
//                                                    else if (salesExlude.equals("NO")){
//                                                        discTransVatExemptSales = discTransTotal;
//                                                        discTransLessVat = discTransTotal  - discTransTotal;
//                                                    }
//                                                    discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                                                    cashierItem.setTotalAmountToPay((discTransTotal));
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                            String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                            String DiscPercent=discountValue;
//
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=custInfo.getCustName();
//                                                            String DiscIdNumber=custInfo.getCustIDNo();
//                                                            String DiscOther=custInfo.getCustTIN();
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("NO")){
//
//
//                                                    Log.e("DISCOUNT EXCLUDE IF","NO");
//                                                    discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName="test2";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                                    Log.e("PRORATED","YES");
//                                                    discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                            }
//                                            if (discCategory.equals("PWD")){
//                                                showDialog();
//                                                //  custInfo.showDialog(getContext());
//                                                discountFormat=2;
//                                                discountLabelIndicator=3;
//                                                Log.e("DISCOUNT TRANSACTION","SCD");
//                                                discTransTotal=cashierItem.getTotalDueAmount();
//
//                                                if (discountExlude.equals("YES")){
//                                                    Log.e("DISCOUNT EXCLUDE IF","YES");
//                                                    discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                                                    if (salesExlude.equals("YES")) {
//                                                        discTransVatExemptSales = discTransTotal / 1.12;
//                                                        discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                                                    }
//                                                    else if (salesExlude.equals("NO")){
//                                                        discTransVatExemptSales = discTransTotal;
//                                                        discTransLessVat = discTransTotal  - discTransTotal;
//                                                    }
//                                                    discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                                                    cashierItem.setTotalAmountToPay((discTransTotal));
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf(discTransDiscount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                            String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//
//                                                            String DiscBuyerName=custInfo.getCustName();
//                                                            String DiscIdNumber=custInfo.getCustIDNo();
//                                                            String DiscOther=custInfo.getCustTIN();
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("NO")){
//                                                    Log.e("DISCOUNT EXCLUDE IF","NO");
//                                                    discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
////
////
////                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
////
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                            String vat="0.00";
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                                    Log.e("PRORATED","YES");
//                                                    discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                            }
//                                            else  if (discCategory.equals("REG")){
//                                                Log.e("OTHER DISCOUNT","YES");
//
//                                                discountFormat=2;
//                                                discountLabelIndicator=4;
//                                                //  Log.e("DISCOUNT TRANSACTION","PWD");
//                                                discTransTotal=cashierItem.getTotalDueAmount();
//                                                Log.e("OTHER DISCTOTAL",String.valueOf(discTransTotal));
//                                                if (discountExlude.equals("YES")){
//
//
//
//
//                                                    discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//
//
////                                        if (salesExlude.equals("YES")) {
////
////                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
////                                           // discTransVatableSales=discTransTotal/1.12;
////                                        }
////                                        else if (salesExlude.equals("NO")){
////                                            discTransVatableSales=((discTransTotal+discTransDiscount));
////                                           // discTransVatableSales=discTransTotal/1.12;
////                                        }
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        Log.e("REMOVE DISC ON VAT","YES");
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        Log.e("REMOVE DISC ON VAT","NO");
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//                                                    //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                            String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO")&& ProRated.equals("NO")){
//                                                    discTransTotal=cashierItem.getTotalDueAmount();
//                                                    Log.e("OTHER exclude NO",String.valueOf(discTransTotal));
//
//                                                    discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("total",String.valueOf(discTransTotal));
//                                                    Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
//                                                    Log.e("total discount",String.valueOf(discTransDiscount));
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        Log.e("REMOVE DISC ON VAT","YES");
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                        discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                                    }
//                                                    else{
//                                                        Log.e("REMOVE DISC ON VAT","NO");
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                        discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                                    }
//
//
//
//
//
//                                                    //  discTransVatableSales=discTransTotal/1.12;
//                                                    //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
//                                                    //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
////                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
////                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
////                                               // String DiscAmount=String.valueOf(discTransDiscount);
////                                                Log.e("INSERT DISC",DiscAmount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);
//
//                                                            String DiscPercent=discountValue;
//                                                            // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                            String vat="0.00";
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//                                                if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                                    Log.e("PRORATED","YES");
//                                                    discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                                    Log.e("TOTAL",String.valueOf(discTransTotal));
//                                                    Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                                    if (RemoveDiscountOnVatsales.equals("YES")){
//                                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                    }
//                                                    else{
//                                                        discTransVatableSales=((discTransTotal)/1.12);
//                                                    }
//
//
//
//                                                    Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                                    // discTransVatExemptSales=discTransTotal/1.12;
//                                                    // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                                    discTransDueAmount=discTransTotal+discTransDiscount;
//                                                    discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                                    Log.e("-------","---------");
//                                                    Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                                    Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                                    Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                                    Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                                    Log.e("-------","---------");
//
//                                                    // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                                    cashierItem.setTotalAmountToPay(discTransTotal);
//                                                    cashierItem.setVatableAmount(discTransVatableSales);
//                                                    cashierItem.setAmountDiscount(discTransDiscount);
//                                                    cashierItem.setTaxAmount(discTransVatAmount);
//                                                    cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                                    cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                                    cashierItem.setLessVat(discTransLessVat);
//                                                    cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                                    //insert
//                                                    if (checkInvoiceReceiptItem.getCount()!=0){
//                                                        DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                        while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                            String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                            String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                            String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                            String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                            String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                            String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                            String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                            String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                            String DiscountType=discountType;
//                                                            String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                            String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                            //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                            //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                            String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                            Log.e("DiscAmount",DiscAmount);
//                                                            String DiscPercent=discountValue;
//                                                            String vat="0.00";
//                                                            // String vat=tv_lessVat.getText().toString();
//                                                            String DiscBuyerName=" ";
//                                                            String DiscIdNumber=" ";
//                                                            String DiscOther=" ";
//
//
//
//
//
//                                                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                                    (TransactionID,
//                                                                            OrderID,
//                                                                            OrderName,
//                                                                            OrderQty,
//                                                                            OrderPrice,
//                                                                            OrderPriceTotal,
//                                                                            TransactionTime,
//                                                                            TransactionDate,
//                                                                            DiscountType,
//                                                                            ItemRemarks,
//                                                                            DiscQty,
//                                                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                            DiscPercent,
//                                                                            String.format("%7.2f", Double.parseDouble(vat)),
//                                                                            DiscBuyerName,
//                                                                            DiscIdNumber,
//                                                                            DiscOther );
//                                                        }
//
//                                                    }
//
//
//
//
//                                                }
//
////                                    if (discountExlude.equals("NO") && ProRated.equals("YES")){
////                                        discTransTotal=cashierItem.getTotalDueAmount();
////                                        Log.e("OTHER exclude NO",String.valueOf(discTransTotal));
////
////                                        discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
////                                        Log.e("total",String.valueOf(discTransTotal));
////                                        Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
////                                        Log.e("total discount",String.valueOf(discTransDiscount));
////
////
////                                        if (RemoveDiscountOnVatsales.equals("YES")){
////                                            Log.e("REMOVE DISC ON VAT","YES");
////                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
////                                            discTransVatAmount=discTransTotal-(discTransVatableSales);
////                                        }
////                                        else{
////                                            Log.e("REMOVE DISC ON VAT","NO");
////                                            discTransVatableSales=((discTransTotal)/1.12);
////                                            discTransVatAmount=discTransTotal-(discTransVatableSales);
////                                        }
////
////
////
////
////
////                                        //  discTransVatableSales=discTransTotal/1.12;
////                                        //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
////                                        //discTransVatAmount = discTransTotal/1.12-discTransTotal;
////                                        discTransDueAmount=discTransTotal+discTransDiscount;
////
////                                        // discTransDiscount=100/1.12*.
////
////
////
////
////
////                                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
////                                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
////                                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
////                                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
////                                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
////                                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
////                                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
////                                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
////                                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
////
////
////
////                                        //insert
////                                        if (checkInvoiceReceiptItem.getCount()!=0){
////                                            DatabaseHandler myDb = new DatabaseHandler(getContext());
////                                            while(checkInvoiceReceiptItem.moveToNext()){
////
//////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//////                                                String DiscountType=discountType;
//////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//////                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
//////                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
//////                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
//////                                               // String DiscAmount=String.valueOf(discTransDiscount);
//////                                                Log.e("INSERT DISC",DiscAmount);
//////                                                String DiscPercent=discountValue;
//////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//////                                                String DiscBuyerName=" ";
//////                                                String DiscIdNumber=" ";
//////                                                String DiscOther=" ";
////
////
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);
////
////                                                String DiscPercent=discountValue;
////                                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String vat="0.00";
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
////
////
////
////
////
////
////
////
////                                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
////                                                        (TransactionID,
////                                                                OrderID,
////                                                                OrderName,
////                                                                OrderQty,
////                                                                OrderPrice,
////                                                                OrderPriceTotal,
////                                                                TransactionTime,
////                                                                TransactionDate,
////                                                                DiscountType,
////                                                                ItemRemarks,
////                                                                DiscQty,
////                                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
////                                                                DiscPercent,
////                                                                String.format("%7.2f", Double.parseDouble(vat)),
////                                                                DiscBuyerName,
////                                                                DiscIdNumber,
////                                                                DiscOther );
////                                            }
////
////                                        }
////
////
////
////
////                                    }
//                                            }
//
//
//
//
//
//
//                                            if (discCategory.equals("SCD")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
//                                            }
//                                            else if (discCategory.equals("PWD")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("PWD DISCOUNT");
//                                            }
//                                            else if (discountType.equals("DIPLOMAT")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("DIPLOMAT");
//                                            }
//                                            else if (discCategory.equals("REG")){
//                                                ll_forDiscountType.setVisibility(View.VISIBLE);
//                                                lbl_discountLabel.setText("REGULAR DISCOUNT");
//                                            }
//
//
//
//
//
//
//                                            loadLabelData();
//
//                                            cashierItem.setTotalAmountToPay(discTransDueAmount);
//                                            Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
//                                            alertDialog.dismiss();
//
//                                            //    RefreshScreen();
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//                                            Toast.makeText(getContext(), discountType + " Applied", Toast.LENGTH_LONG).show();
//                                            alertDialog.dismiss();
//
//
//                                        }
//                                    });
//
//                                    btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
//                                        @Override
//                                        public void onClick(View view) {
//
//                                            Toast.makeText(getContext(), discountType + " Canceled", Toast.LENGTH_LONG).show();
//                                            alertDialog.dismiss();
//
//
//                                        }
//                                    });
//
//
//
//                                    alertDialog.show();
//
//
//
//
//
//                                }
//                                else if(discCategory.equals("REG")) {
//                                    Log.e("discount type",discountType.substring(0,3));
//                                    Log.e("discount type",discountValue);
//                                    Log.e("discount Exclude",discountExlude);
//                                    Log.e("ProRated",ProRated);
//
//
//                                    Double discTransTotal=0.00;
//                                    Double discTransVatableSales=0.00;
//                                    Double discTransDiscount=0.00;
//                                    Double discTransVatAmount=0.00;
//                                    Double discTransVatExemptSales=0.00;
//                                    Double discTransZeroRatedSales=0.00;
//                                    Double discTransLessVat=0.00;
//                                    Double discServiceCharge=0.00;
//                                    Double discTransDueAmount=0.00;
//
//
//
//
//
//                                    if (discCategory.equals("SCD")){
//
//                                        //   custInfo.showDialog(getContext());
//                                        showDialog();
//                                        discountFormat=2;
//                                        discountLabelIndicator=3;
//                                        Log.e("DISCOUNT TRANSACTION","SCD");
//                                        discTransTotal=cashierItem.getTotalDueAmount();
//
//                                        if (discountExlude.equals("YES")){
//                                            Log.e("DISCOUNT EXCLUDE IF","YES");
//                                            discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                                            if (salesExlude.equals("YES")) {
//                                                discTransVatExemptSales = discTransTotal / 1.12;
//                                                discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                                            }
//                                            else if (salesExlude.equals("NO")){
//                                                discTransVatExemptSales = discTransTotal;
//                                                discTransLessVat = discTransTotal  - discTransTotal;
//                                            }
//                                            discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                                            cashierItem.setTotalAmountToPay((discTransTotal));
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                    String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                    String DiscPercent=discountValue;
//
//                                                    // String vat=tv_lessVat.getText().toString();
//                                                    String DiscBuyerName=custInfo.getCustName();
//                                                    String DiscIdNumber=custInfo.getCustIDNo();
//                                                    String DiscOther=custInfo.getCustTIN();
//
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                        if (discountExlude.equals("NO") && ProRated.equals("NO")){
//
//
//                                            Log.e("DISCOUNT EXCLUDE IF","NO");
//                                            discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                                            Log.e("TOTAL",String.valueOf(discTransTotal));
//                                            Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                            }
//
//
//
//                                            Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                            // discTransVatExemptSales=discTransTotal/1.12;
//                                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount;
//                                            discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                            cashierItem.setTotalAmountToPay(discTransTotal);
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                    Log.e("DiscAmount",DiscAmount);
//                                                    String DiscPercent=discountValue;
//                                                    String vat="0.00";
//                                                    // String vat=tv_lessVat.getText().toString();
//                                                    String DiscBuyerName="test2";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                        if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                            Log.e("PRORATED","YES");
//                                            discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                            Log.e("TOTAL",String.valueOf(discTransTotal));
//                                            Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                            }
//
//
//
//                                            Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                            // discTransVatExemptSales=discTransTotal/1.12;
//                                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount;
//                                            discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)-discTransDiscount-discTransVatAmount);
//                                            }
//
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                            cashierItem.setTotalAmountToPay(discTransTotal);
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                    String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                    Log.e("DiscAmount",DiscAmount);
//                                                    String DiscPercent=discountValue;
//                                                    String vat="0.00";
//                                                    // String vat=tv_lessVat.getText().toString();
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                    }
//                                    if (discCategory.equals("PWD")){
//                                        showDialog();
//                                        //  custInfo.showDialog(getContext());
//                                        discountFormat=2;
//                                        discountLabelIndicator=3;
//                                        Log.e("DISCOUNT TRANSACTION","SCD");
//                                        discTransTotal=cashierItem.getTotalDueAmount();
//
//                                        if (discountExlude.equals("YES")){
//                                            Log.e("DISCOUNT EXCLUDE IF","YES");
//                                            discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                                            if (salesExlude.equals("YES")) {
//                                                discTransVatExemptSales = discTransTotal / 1.12;
//                                                discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                                            }
//                                            else if (salesExlude.equals("NO")){
//                                                discTransVatExemptSales = discTransTotal;
//                                                discTransLessVat = discTransTotal  - discTransTotal;
//                                            }
//                                            discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                                            cashierItem.setTotalAmountToPay((discTransTotal));
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf(discTransDiscount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                    String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                    String DiscPercent=discountValue;
//                                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                        if (discountExlude.equals("NO") && ProRated.equals("NO")){
//                                            Log.e("DISCOUNT EXCLUDE IF","NO");
//                                            discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                                            Log.e("TOTAL",String.valueOf(discTransTotal));
//                                            Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                            }
//
//
////
////
////                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                            // discTransVatExemptSales=discTransTotal/1.12;
//                                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount;
//                                            discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                            cashierItem.setTotalAmountToPay(discTransTotal);
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
////
//
//
//
//
//
//
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//
//                                                    String DiscPercent=discountValue;
//                                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                    String vat="0.00";
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                        if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                            Log.e("PRORATED","YES");
//                                            discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                            Log.e("TOTAL",String.valueOf(discTransTotal));
//                                            Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                            }
//
//
//
//                                            Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                            // discTransVatExemptSales=discTransTotal/1.12;
//                                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount;
//                                            discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)-discTransDiscount-discTransVatAmount);
//                                            }
//
//
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                            cashierItem.setTotalAmountToPay(discTransTotal);
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                    String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                    Log.e("DiscAmount",DiscAmount);
//                                                    String DiscPercent=discountValue;
//                                                    String vat="0.00";
//                                                    // String vat=tv_lessVat.getText().toString();
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                    }
//                                    else  if (discCategory.equals("REG")){
//                                        Log.e("OTHER DISCOUNT","YES");
//
//                                        discountFormat=2;
//                                        discountLabelIndicator=4;
//                                        //  Log.e("DISCOUNT TRANSACTION","PWD");
//                                        discTransTotal=cashierItem.getTotalDueAmount();
//                                        Log.e("OTHER DISCTOTAL",String.valueOf(discTransTotal));
//                                        if (discountExlude.equals("YES")){
//
//
//
//
//                                            discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//
//
////                                        if (salesExlude.equals("YES")) {
////
////                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
////                                           // discTransVatableSales=discTransTotal/1.12;
////                                        }
////                                        else if (salesExlude.equals("NO")){
////                                            discTransVatableSales=((discTransTotal+discTransDiscount));
////                                           // discTransVatableSales=discTransTotal/1.12;
////                                        }
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                Log.e("REMOVE DISC ON VAT","YES");
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                Log.e("REMOVE DISC ON VAT","NO");
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                            }
//
//                                            //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                                    String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                                    String DiscPercent=discountValue;
//                                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                    // String vat=tv_lessVat.getText().toString();
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                        if (discountExlude.equals("NO")&& ProRated.equals("NO")){
//                                            discTransTotal=cashierItem.getTotalDueAmount();
//                                            Log.e("OTHER exclude NO",String.valueOf(discTransTotal));
//
//                                            discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
//                                            Log.e("total",String.valueOf(discTransTotal));
//                                            Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
//                                            Log.e("total discount",String.valueOf(discTransDiscount));
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                Log.e("REMOVE DISC ON VAT","YES");
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                                discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                            }
//                                            else{
//                                                Log.e("REMOVE DISC ON VAT","NO");
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                                discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                            }
//
//
//
//
//
//                                            //  discTransVatableSales=discTransTotal/1.12;
//                                            //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
//                                            //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount;
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
////                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
////                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
////                                               // String DiscAmount=String.valueOf(discTransDiscount);
////                                                Log.e("INSERT DISC",DiscAmount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);
//
//                                                    String DiscPercent=discountValue;
//                                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                    String vat="0.00";
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//                                        if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                                            Log.e("PRORATED","YES");
//                                            discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                                            Log.e("TOTAL",String.valueOf(discTransTotal));
//                                            Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                                            if (RemoveDiscountOnVatsales.equals("YES")){
//                                                discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            }
//                                            else{
//                                                discTransVatableSales=((discTransTotal)/1.12);
//                                            }
//
//
//
//
//
//
//                                            Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                                            // discTransVatExemptSales=discTransTotal/1.12;
//                                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                                            discTransDueAmount=discTransTotal+discTransDiscount;
//                                            discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//
//
//
//                                            Log.e("-------","---------");
//                                            Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                                            Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                                            Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                                            Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                                            Log.e("-------","---------");
//
//                                            // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//
//                                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                                            cashierItem.setTotalAmountToPay(discTransTotal);
//                                            cashierItem.setVatableAmount(discTransVatableSales);
//                                            cashierItem.setAmountDiscount(discTransDiscount);
//                                            cashierItem.setTaxAmount(discTransVatAmount);
//                                            cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                            cashierItem.setLessVat(discTransLessVat);
//                                            cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                                            //insert
//                                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                                DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                                while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                    String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                    String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                    String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                    String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                    String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                    String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                    String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                    String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                    String DiscountType=discountType;
//                                                    String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                    String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                    //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                                    String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                                    Log.e("DiscAmount",DiscAmount);
//                                                    String DiscPercent=discountValue;
//                                                    String vat="0.00";
//                                                    // String vat=tv_lessVat.getText().toString();
//                                                    String DiscBuyerName=" ";
//                                                    String DiscIdNumber=" ";
//                                                    String DiscOther=" ";
//
//
//
//
//
//                                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                            (TransactionID,
//                                                                    OrderID,
//                                                                    OrderName,
//                                                                    OrderQty,
//                                                                    OrderPrice,
//                                                                    OrderPriceTotal,
//                                                                    TransactionTime,
//                                                                    TransactionDate,
//                                                                    DiscountType,
//                                                                    ItemRemarks,
//                                                                    DiscQty,
//                                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                    DiscPercent,
//                                                                    String.format("%7.2f", Double.parseDouble(vat)),
//                                                                    DiscBuyerName,
//                                                                    DiscIdNumber,
//                                                                    DiscOther );
//                                                }
//
//                                            }
//
//
//
//
//                                        }
//
//                                    }
//
//
//
//
//
//
//                                    if (discCategory.equals("SCD")){
//                                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                                        lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
//                                    }
//                                    else if (discCategory.equals("PWD")){
//                                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                                        lbl_discountLabel.setText("PWD DISCOUNT");
//                                    }
//                                    else if (discountType.equals("DIPLOMAT")){
//                                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                                        lbl_discountLabel.setText("DIPLOMAT");
//                                    }
//                                    else if (discCategory.equals("REG")){
//                                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                                        lbl_discountLabel.setText("REGULAR DISCOUNT");
//                                    }
//
//
//
//
//
//
//                                    loadLabelData();
//
//                                    cashierItem.setTotalAmountToPay(discTransDueAmount);
//                                    Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
//                                    alertDialog.dismiss();
//
//                                    //    RefreshScreen();
//                                }
//
//
//                                alertDialog.dismiss();
//
//
//
//
//
//
//                            }
//
//
//
//
//
//
//
////find me
//
//                        }
//                    });
//
//                    cardView.addView(child);
//
//
//                    rootView.addView(cardView);
//
//
//
//                }
//                row2.addView(rootView);
//
//            }
//            rl.addView(row2);
//        }












        alertDialog.show();















    }

    RecyclerView rv_pluList;


    // cashier_invoice_dialog_cust_info CustInfo = new cashier_invoice_dialog_cust_info();
    public void showDialog(){


    }

    private void diplomatFunction(){
        SQLiteDatabase PosOutputDb = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        Cursor checkInvoiceReceiptItem = PosOutputDb.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor checkDiscountTemp = PosOutputDb.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp", null);

        if (checkDiscountTemp.getCount()!=0){
            Toast.makeText(view.getContext(), "CANNOT APPLY DIPLOMAT", Toast.LENGTH_LONG).show();
            Log.e("DIPLOMAT","CANNOT APPLY DISCOUNT");


        }
        else {
            Log.e("DISCOUNT TEMP", "EMPTY");

            discountType = "DIPLOMAT";
            discountValue = "0.00";
            discountExlude = "YES";
            Log.e("discount type", discountType);
            Log.e("discount type", discountValue);
            Log.e("discount Exclude", discountExlude);


            Double discTransTotal = 0.00;
            Double discTransVatableSales = 0.00;
            Double discTransDiscount = 0.00;
            Double discTransVatAmount = 0.00;
            Double discTransVatExemptSales = 0.00;
            Double discTransZeroRatedSales = 0.00;
            Double discTransLessVat = 0.00;
            Double discServiceCharge = 0.00;
            Double discTransDueAmount = 0.00;


            if (discountType.equals("DIPLOMAT")) {
                discountFormat = 2;
                discountLabelIndicator = 3;
                Log.e("DISCOUNT TRANSACTION", "DIPLOMAT");
                discTransTotal = cashierItem.getTotalDueAmount();
                if (discountExlude.equals("YES")) {
                    Log.e("DISCOUNT EXCLUDE IF", "YES");
                    // discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
                    // discTransVatExemptSales=discTransTotal/1.12;
                    discTransZeroRatedSales=discTransTotal/1.12;
                    discTransLessVat = discTransTotal / 1.12 - discTransTotal;
                    discTransDueAmount = discTransTotal + discTransLessVat;



                    // discTransDiscount=100/1.12*.





                    lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                    lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                    lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                    lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                    tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                    tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                    tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                    lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                    lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


//                                        cashierItem.setTotalAmountToPay((discTransTotal));
//                                        cashierItem.setVatableAmount(discTransVatableSales);
//                                        cashierItem.setAmountDiscount(discTransDiscount);
//                                        cashierItem.setTaxAmount(discTransVatAmount);
//                                        cashierItem.setVatExemptSale(discTransVatExemptSales);
//                                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                                        cashierItem.setLessVat(discTransLessVat);
//                                        cashierItem.setTotalDueAmount(discTransDueAmount);


                    //insert
                    if (checkInvoiceReceiptItem.getCount() != 0) {
                        DatabaseHandler myDb = new DatabaseHandler(getContext());
                        while (checkInvoiceReceiptItem.moveToNext()) {

                            String TransactionID = checkInvoiceReceiptItem.getString(0);
                            String OrderID = checkInvoiceReceiptItem.getString(1);
                            String OrderName = checkInvoiceReceiptItem.getString(2);
                            String OrderQty = checkInvoiceReceiptItem.getString(3);
                            String OrderPrice = checkInvoiceReceiptItem.getString(4);
                            String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                            String TransactionTime = checkInvoiceReceiptItem.getString(6);
                            String TransactionDate = checkInvoiceReceiptItem.getString(7);
                            String DiscountType = discountType;
                            String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                            String DiscQty = checkInvoiceReceiptItem.getString(3);
                            String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * (Double.parseDouble(discountValue) / 100)));
                            String DiscPercent = discountValue;
                            String vat = String.valueOf(Double.parseDouble(OrderPriceTotal) - Double.parseDouble(OrderPriceTotal) / 1.12);
                            String DiscBuyerName = " ";
                            String DiscIdNumber = " ";
                            String DiscOther = " ";


                            boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                    (TransactionID,
                                            OrderID,
                                            OrderName,
                                            OrderQty,
                                            OrderPrice,
                                            OrderPriceTotal,
                                            TransactionTime,
                                            TransactionDate,
                                            DiscountType,
                                            ItemRemarks,
                                            DiscQty,
                                            String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                            DiscPercent,
                                            String.format("%7.2f", Double.parseDouble(vat)),
                                            DiscBuyerName,
                                            DiscIdNumber,
                                            DiscOther );
                        }

                    }


//                    SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
//
//                    Cursor checkDiscountTypeSCD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='SCD'", null);
//                    Cursor checkDiscountTypePWD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='PWD'", null);
//                    Cursor checkDiscountTypeDIP = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='DIPLOMAT'", null);
//                    Cursor checkDiscountTypeREG = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType!='SCD' and DiscountType!='PWD' and DiscountType!='DIPLOMAT'", null);
//
//                    if (checkDiscountTypeSCD.getCount()!=0){
//                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                        lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
//                    }
//                    if (checkDiscountTypePWD.getCount()!=0){
//                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                        lbl_discountLabel.setText("PWD DISCOUNT");
//                    }
//                    if (checkDiscountTypeDIP.getCount()!=0){
                    ll_forDiscountType.setVisibility(View.VISIBLE);
                    lbl_discountLabel.setText("DIPLOMAT");
//                    }
//                    if (checkDiscountTypeREG.getCount()!=0){
//                        ll_forDiscountType.setVisibility(View.VISIBLE);
//                        lbl_discountLabel.setText("REGULAR DISCOUNT");
//                    }



                }
            }
            Double totalAmountMultiple=0.00;
            SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
            Cursor checkMultiItem = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
            Cursor checkMulti = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
            if (checkMultiItem.getCount()!=0){
                while (checkMulti.moveToNext()) {
                    Log.e("TEST AMOUNT",checkMulti.getString(0));

                    totalAmountMultiple = Double.parseDouble(checkMulti.getString(0));

                }
            }


            loadLabelData();
            cashierItem.setTotalAmountToPay(discTransDueAmount-totalAmountMultiple);
            Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));


        }
    }
    private void RefreshScreen(){
        //Intent refresh = new Intent(this.getActivity(), cashier_payment.class);
        //    startActivity(refresh);
        this.getActivity().recreate();

    }
    private void getRunningTransID(){
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor itemListC2 = db2.rawQuery("select TransactionID  from InvoiceReceiptItem ", null);
        if (itemListC2.getCount()!=0){
            itemListC2.moveToFirst();
            readRefNumber=itemListC2.getString(0);
        }
        db2.close();
    }


    private void showingOfTender(){
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor itemListC3 = db2.rawQuery("select *  from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
        Cursor itemListC4 = db2.rawQuery("select sum(amount)  from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);

        if (itemListC3.getCount()!=0){
            view_line.setVisibility(View.VISIBLE);
            Log.e("TENDER","NOT EMPTY");
            LinearLayout rl = (LinearLayout) view.findViewById(R.id.ll_paymentList);
            rl.removeAllViews();
            double FinalAmount=0.00;
            while(itemListC3.moveToNext()){

                View child = getLayoutInflater().inflate(R.layout.cashier_payment_tender_list, null);//child.xml
                TextView tv_tenderName = child.findViewById(R.id.tv_tenderName);
                TextView tv_tenderAmount = child.findViewById(R.id.tv_tenderAmount);
                tv_tenderName.setText(itemListC3.getString(2));

                // tv_tenderAmount.setText(itemListC3.getString(3));
                Double tenderAmount = Double.parseDouble(itemListC3.getString(3));
                tv_tenderAmount.setText((String.format("%15.2f",tenderAmount)));


                rl.addView(child);


            }
            if (itemListC4.getCount()!=0){
                itemListC4.moveToFirst();
                FinalAmount=Double.parseDouble(itemListC4.getString(0));

            }

            FinalAmount=cashierItem.getTotalDueAmount()-FinalAmount;


            Log.e("Final Amount",String.valueOf(FinalAmount));
            lbl_due.setText(String.valueOf(Finalformat.format(FinalAmount)));
            lbl_dueFinal.setText(String.valueOf(DecFormat.format(FinalAmount)));

        }
        else {


            Log.e("TENDER","EMPTY");
            //  Log.e("TENDER",readRefNumber);


        }
        db2.close();
    }


    //region showing of summary
    private void showSummary(){
        // fillInvoiceItemList();
        fillOrderList();
        refreshRecycleview();
    }
    private void fillOrderList() {
        invoiceItemCode = new ArrayList<>();
        invoiceItemName = new ArrayList<>();
        invoiceItemPrice = new ArrayList<>();
        invoiceItemQty = new ArrayList<>();
        invoiceItemPriceTotal = new ArrayList<>();
        invoiceRemarks = new ArrayList<>();
        invoiceItemQtyDisc = new ArrayList<>();
        invoiceItemVatIndicator=new ArrayList<>();
        orderItemList.clear();
        CheckItemDatabase2();
        int numberOfItem = itemListC.getCount();
        for (int itemCounter = 0;itemCounter<numberOfItem;itemCounter++){

            Double itemQty = Double.parseDouble(invoiceItemQty.get(itemCounter));
            String itemSubtotal = (invoiceItemPriceTotal.get(itemCounter));
            Log.e("fillOrderList",itemSubtotal);
            String itemname = String.valueOf(invoiceItemName.get(itemCounter));
            String id = String.valueOf(invoiceItemCode.get(itemCounter));
            String remarks = String.valueOf(invoiceRemarks.get(itemCounter));
            String vatIndicator = invoiceItemVatIndicator.get(itemCounter);
            orderItem p0=new orderItem(id,itemname,itemQty,itemSubtotal,remarks,vatIndicator);
            orderItemList.addAll(Arrays.asList(new orderItem[]{p0}));
        }

    }
    private void CheckItemDatabase2() {



        invoiceItemCode.clear();
        invoiceItemName.clear();
        invoiceItemPrice.clear();
        invoiceItemQty.clear();
        invoiceItemPriceTotal.clear();
        invoiceRemarks.clear();

        SQLiteDatabase db = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        itemListC = db2.rawQuery("select * from InvoiceReceiptItem", null);



        if (itemListC.getCount() == 0) {
            // Toast.makeText(getActivity(), "NO DATA FOUND", Toast.LENGTH_SHORT).show();
        }

        while(itemListC.moveToNext()){
            invoiceItemCode.add(itemListC.getString(1));
            invoiceItemName.add(itemListC.getString(2));
            invoiceItemPrice.add(itemListC.getInt(4));
            Cursor itemListCVat = db.rawQuery("select * from ITEM where ItemID='"+itemListC.getString(1)+"'", null);
            if(itemListCVat.getCount()!=0) {
                while (itemListCVat.moveToNext()) {
                    if (itemListCVat.getString(15).trim().equals("VATable")) {
                        invoiceItemVatIndicator.add("v");

                    } else if (itemListCVat.getString(15).trim().equals("Non-VATable")) {
                        invoiceItemVatIndicator.add("nv");
                    }

                }
            }
            else{
                invoiceItemVatIndicator.add("v");
            }

            if (itemListC.getString(3)!=null){
                invoiceItemQty.add(itemListC.getString(3));
            }

            else{
                invoiceItemQty.add("100");
            }

            invoiceItemPriceTotal.add(itemListC.getString(5));
            Log.e("TEST",itemListC.getString(5));
            invoiceRemarks.add(itemListC.getString(9));

            // Toast.makeText(this, c.getString(2), Toast.LENGTH_SHORT).show();

        }
        itemListC.close();
        db2.close();









    }
    public void refreshRecycleview(){
        recyclerView = view.findViewById(R.id.rv_orderList);
        recyclerView.setHasFixedSize(true);
        layoutManager=new LinearLayoutManager(getActivity());
        layoutManager.removeAllViews();
        recyclerView.setLayoutManager(layoutManager);
        mAdapter=new cashier_payment.RecyclerviewAdapter(orderItemList,orderItemListDisc,selectList,getActivity());
        // mAdapter=new RecyclerviewAdapter(orderItemList,selectList,getActivity());



        recyclerView.setAdapter(mAdapter);

        //invoice item list



    }
    public static class RecyclerviewAdapter extends RecyclerView.Adapter <cashier_payment.RecyclerviewAdapter.MyViewHolder>{
        List<orderItem> orderItemList;
        Context context;



        ArrayList<String> selectList = new ArrayList<>();
        public RecyclerviewAdapter(List<orderItem> orderItemList, List<orderItemDiscount> orderItemListDisc, ArrayList<String> selectList, Context context) {
            // public RecyclerviewAdapter(List<orderItem> orderItemList,ArrayList<String> selectList, Context context) {
            this.orderItemList = orderItemList;

            this.selectList = selectList;
            this.context = context;

        }



        @NonNull
        @Override
        public cashier_payment.RecyclerviewAdapter.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.order_list_layout2,parent,false);



            cashier_payment.RecyclerviewAdapter.MyViewHolder holder = new cashier_payment.RecyclerviewAdapter.MyViewHolder(view);
            return holder;
        }



        @Override
        public void onBindViewHolder(@NonNull cashier_payment.RecyclerviewAdapter.MyViewHolder holder, final int position) {
            final orderItem model = new orderItem(
                    orderItemList.get(position).getItemId(),
                    orderItemList.get(position).getItemName(),
                    orderItemList.get(position).getItemQty(),
                    orderItemList.get(position).getItemSubtotal(),
                    orderItemList.get(position).getItemRemarks(),
                    orderItemList.get(position).getItemVatIndicator());



            holder.tv_itemName.setText((orderItemList.get(position).getItemName()));
            holder.tv_itemQty.setText((String.valueOf(orderItemList.get(position).getItemQty())));
            holder.tv_VatIndicator.setText(orderItemList.get(position).getItemVatIndicator());

            holder.tv_itemSubtotal.setText((String.format("%15.2f",Double.parseDouble(orderItemList.get(position).getItemSubtotal()))));
            Log.e("ITEM SUBTOTAL",String.valueOf(orderItemList.get(position).getItemSubtotal()));
            Log.e("ITEM SUBTOTAL",orderItemList.get(position).getItemId());


        }

        @Override
        public int getItemCount() {
            return orderItemList.size();
        }
        public List<String> getList() {
            return selectList;
        }



        public class MyViewHolder extends RecyclerView.ViewHolder{
            TextView tv_itemName;
            TextView tv_itemQty;
            TextView tv_VatIndicator;
            TextView tv_remarks,tv_regdiscquantity,tv_regdiscsubtotal,tv_scdquantity,tv_scdsubtotal,tv_typeOfDiscount;
            ImageView iv_check;
            // LinearLayout linearRegDisc,linearSCD;


            TextView tv_itemSubtotal;
            CardView parentLayout;

            public MyViewHolder(@NonNull View itemView) {
                super(itemView);
                tv_itemName = itemView.findViewById(R.id.tv_itemName);
                tv_itemQty = itemView.findViewById(R.id.tv_quantity);
                tv_itemSubtotal = itemView.findViewById(R.id.tv_subtotal);
                tv_VatIndicator=itemView.findViewById(R.id.tv_VatIndicator);
                //tv_remarks = itemView.findViewById(R.id.tv_remarks);
                // iv_check = itemView.findViewById(R.id.iv_check);
                parentLayout = itemView.findViewById(R.id.linear_orderlist_layout2);
                // linearRegDisc = itemView.findViewById(R.id.linearRegDisc);
                //  tv_regdiscquantity=itemView.findViewById(R.id.tv_regdiscquantity);
                // tv_regdiscsubtotal=itemView.findViewById(R.id.tv_regdiscsubtotal);
                // tv_typeOfDiscount=itemView.findViewById(R.id.tv_typeOfDiscount);

                // tv_scdquantity=itemView.findViewById(R.id.tv_scdquantity);
                //  tv_scdsubtotal=itemView.findViewById(R.id.tv_scdsubtotal);
                // linearSCD = itemView.findViewById(R.id.linearSCD);




            }
        }
    }
    private void loadBankListDebit(){
        BankListDebit.clear();
        SQLiteDatabase db = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        Cursor c = db.rawQuery("select * from BankDetails where BankName like '%debit%'", null);
        if (c.getCount()!=0){
            while (c.moveToNext()){
                BankListDebit.add(c.getString(1).trim());
            }
        }
        db.close();
    }
    private void loadBankListCredit(){
        BankListCredit.clear();
        SQLiteDatabase db = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        Cursor c = db.rawQuery("select * from BankDetails where BankName like '%credit%'", null);
        if (c.getCount()!=0){
            while (c.moveToNext()){
                BankListCredit.add(c.getString(1).trim());
            }
        }
        db.close();
    }
    private void insertBankTransactionTemp(Context context){
        DatabaseHandler databaseHandler = new DatabaseHandler(context);

        boolean isInserted = databaseHandler.InsertBankTransactionFinal(
                bankTransactionVar.getTransNum(),
                bankTransactionVar.getORNum(),
                bankTransactionVar.getBankName(),

                bankTransactionVar.getCardNumber(),
                bankTransactionVar.getCardExpiry(),
                bankTransactionVar.getCardOwner(),
                bankTransactionVar.getCardApproval(),
                bankTransactionVar.getTransDate(),
                bankTransactionVar.getTransTime(),
                bankTransactionVar.getUser(),
                bankTransactionVar.getCardType()



        );

    }


    int printQty=1;
    int HeaderQuantity;


    private String convertdate(String finalDate){
        try {
            DateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
            DateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
            String inputDateStr = finalDate;
            Date date = inputFormat.parse(inputDateStr);
            String outputDateStr = outputFormat.format(date);
            return outputDateStr;
        }
        catch (Exception ex){
            Log.e("convertdate","ERROR");
        }
        return finalDate;
    }

    //================================CREATING TEXT FILE========================================

    Double FinalSalesOverrun = 0.00;
    String addedCustomerName="";
    String addedCustomerAddress="";
    String addedCustomerTin="";

    String ReferenceSI="";
    private void checkReferenceSI(){
        SQLiteDatabase posoutputdb = this.getContext().openOrCreateDatabase("PosOutputDB.db", android.content.Context.MODE_PRIVATE, null);
        Cursor item2 = posoutputdb.rawQuery("select * from  ReturnExchangeTemp", null);
        if (item2.getCount()!=0){
            if (item2.moveToFirst()){
                ReferenceSI=item2.getString(1);
            }
        }
        posoutputdb.close();

    }

    ArrayList<String> arraylist_kitchenPrinterItem = new ArrayList<>();
    ArrayList<String> arraylist_kitchenPrinterItemID = new ArrayList<>();
    ArrayList<Integer> arraylist_kitchenPrinterItemQty = new ArrayList<>();


    ArrayList<String> arraylist_orderSummaryItem = new ArrayList<>();
    ArrayList<String> arraylist_orderSummaryItemID = new ArrayList<>();
    ArrayList<Integer> arraylist_orderSummaryItemQty = new ArrayList<>();




    //region create textfile
    private void createTextfileMultiple() {

        arraylist_kitchenPrinterItemID.clear();
        arraylist_kitchenPrinterItem.clear();

        int diploFunction=0;
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor item1B = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor itemTotal = db2.rawQuery("select sum(OrderQty) from InvoiceReceiptItem", null);
        Double change = Double.valueOf(et_cash.getText().toString()) - Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        Double CashDouble = Double.valueOf(et_cash.getText().toString());
        String Cash = format.format(CashDouble);

        String TotalAmount = lbl_due.getText().toString();
        Double Subtotal = 0.00;
        String Change = format.format(change);
        String ServiceCharge = "0.00";
        String VatableCharges = "0.00";
        String VatableSales = lbl_subtotal.getText().toString();
        Double totalDiscount = 0.00;
        int RegDiscComputation=0;
        Double FinalVatSalesWRegDisc=0.00;
        Double FinalVatAmtWRegDisc=0.00;

        String VatAmount = lbl_tax.getText().toString();
        String VatExemptSale = "0.00";
        String ZeroRatedSales = tv_zeroRatedSales.getText().toString();
        itemTotal.moveToFirst();
        String TotalItem = String.valueOf(itemTotal.getString(0));
//            cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());


//            cashier_payment_item.readReferenceNumber(getContext());
//        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
//        or_trans_item.readOfficialReceiptNumber(getContext());
//        or_trans_item.readReferenceNumber(getContext());
        shift_active shift_active = new shift_active();
        shift_active.getShiftingTable(getContext());
        shift_active.getAccountInfo(getContext());
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate = SysDate.getSystemDate();
        Header_Footer_class HeaderFooterClass = new Header_Footer_class();
        HeaderFooterClass.HeaderNote(getContext());
        HeaderFooterClass.FooterNote(getContext());



        StringBuffer buffer = new StringBuffer();



        //==============for Transaction Counter===================================================

        int modx=Integer.parseInt(readRefNumber);
        Log.e("modx",String.valueOf(modx));
        int mody=999999999;
        int resetCount = modx/mody;
        Log.e("resetCt",String.valueOf(modx/mody));
        String formattedCtr = String.format("%02d", resetCount);
        String formattedTrans =  String.valueOf(modx % mody);
        String transactionNumberTemp=formattedTrans;
        String FinaltransactionNumber =String.format("%010d",Integer.parseInt(transactionNumberTemp));

        //=========================================================================================

        //==============for  OR Transaction Counter===================================================

        int modxOR=Integer.parseInt(FinalMultipleOR);
        Log.e("modx",String.valueOf(modx));
        int modyOR=999999999;
        int resetCountOR = modxOR/modyOR;
        Log.e("resetCt",String.valueOf(modxOR/modyOR));
        String formattedCtrOR = String.format("%02d", resetCountOR);
        String formattedOR =  String.valueOf(modxOR % modyOR);
        String ORNumber=formattedOR;
        String FinalORNumber =String.format("%010d",Integer.parseInt(ORNumber));

        //=========================================================================================




////            system_final_date sysDate= new system_final_date();
////            String FinalDate = sysDate.getSystemDate();
//            File eJournal=new File(Environment.getExternalStorageDirectory()+"/ANDROID_POS/EJournal/");
//            String dateForJournal = FinalDate.replace("/","");
//            File file = new File(eJournal, dateForJournal+or_trans_item.getTransactionNo()+".txt");
//            FileOutputStream stream = new FileOutputStream(file);



        buffer.append(HeaderFooterClass.getHeaderText());
        buffer.append(businessType.getBusiness_mode() + "\n");
        checkReferenceSI();
        if (!ReferenceSI.equals("")){
            buffer.append("Reference SI No.: " + ReferenceSI+ "\n");
        }
        buffer.append(businessType.getReceipt_type()+"#:" + ""+formattedCtrOR+"-" + FinalORNumber +"\n"  + "TRANS#: "+formattedCtr+"-" +FinaltransactionNumber + "\n");
        buffer.append("CASHIER: " + shift_active.getActiveUserID() + " " + shift_active.getActiveUserName().toUpperCase(Locale.ROOT) +"\n"+ " SHIFT: " +shift_active.getShiftActive() +"\t");
        buffer.append("POS: " + shift_active.getPOSCounter() + "\n" + convertdate(FinalDate) + "\t" + timeOnly.format(currentDate.getTime()) + "\n");
        buffer.append("--------------------------------" + "\n");



//            Cursor checkDiscountTypeSCD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='SCD'", null);
//            Cursor checkDiscountTypePWD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='PWD'", null);
//            Cursor checkDiscountTypeDIP = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='DIPLOMAT'", null);
//            Cursor checkDiscountTypeREG = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType!='SCD' and DiscountType!='PWD' and DiscountType!='DIPLOMAT'", null);
//
//            if (checkDiscountTypeSCD.getCount()!=0){
//                discountLabelIndicator=3;
//            }
//            if (checkDiscountTypePWD.getCount()!=0){
//                discountLabelIndicator=4;
//            }
//            if (checkDiscountTypeDIP.getCount()!=0){
//                discountLabelIndicator=5;
//            }
//            if (checkDiscountTypeREG.getCount()!=0){
//                discountLabelIndicator=2;
//            }
        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        String discType="";
        Cursor checkAllDiscType=db2.rawQuery("select DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (checkAllDiscType.getCount()!=0){
            while(checkAllDiscType.moveToNext()){




                discountType=checkAllDiscType.getString(0);
                if (!discountType.equals("DIPLOMAT")){

                    Cursor checkDiscCategory=db1.rawQuery("select DiscCategory,ReceiptOption from DiscountList where DiscountName='"+discountType+"' ", null);
                    if (checkDiscCategory.moveToNext()){
                        discCategory = checkDiscCategory.getString(0);

                        if (discCategory.equals("SCD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypeSCD",discType);
                            discountLabelIndicator=3;

                        }

                        else if (discCategory.equals("PWD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypePWD",discType);
                            discountLabelIndicator=4;

                        }


//                        else if (discCategory.equals("REG"))
//                        {
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//                            discountLabelIndicator=2;
//
//                        }

//                      else  if (discCategory.equals("REG")) {
//
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//                            if (discType.equals("SOL")){
//                                discountLabelIndicator=6;
//                            }
//                            if (discType.equals("ATH")){
//                                discountLabelIndicator=7;
//                            }
//                            else{
//                                discountLabelIndicator=2;
//                            }
//
//
//                        }

                        else if (discCategory.equals("REG")) {

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctype final",discType);

                            if (discType.equals("SOL")){
                                Log.e("soloparent",discType);
                                discountLabelIndicator=6;
                            }
                            if (discType.equals("ATH")){
                                Log.e("athletedisc",discType);
                                discountLabelIndicator=7;
                            }
//                            else{
//                                discountLabelIndicator=2;
//                            }



                        }


//                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
//                            printQty=1;
//                        }
//                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
//                            printQty=2;
//                        }

                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
                            printQty=printQty*1;
                        }
                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
                            printQty=printQty*2;
                        }




                    }


                }else{

                    if (discountType.equals("DIPLOMAT")){

                        discType= checkAllDiscType.getString(0);
                        discType = discType.substring(0,3);
                        Log.e("disctypeDIP",discType);
                        discountLabelIndicator=5;
                        diploFunction=1;
                        printQty=printQty;


                    }

                }


            }
        }



        if (discountLabelIndicator==3) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("     SENIOR CITIZEN DISCOUNT    " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==4) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("           PWD DISCOUNT         " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



        }
        if (discountLabelIndicator==5) {


            if (vatIndicator.getVatIndicator()==1){
                buffer.append("             DIPLOMAT           " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==2){

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("         REGULAR DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



            RegDiscComputation=1;
        }
        if (discountLabelIndicator==6){


            if (vatIndicator.getVatIndicator()==1){

                buffer.append("       SOLO-PARENT DISCOUNT     " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }
        if (discountLabelIndicator==7){

            if (vatIndicator.getVatIndicator()==1){

                buffer.append("         ATHLETE DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }

        //  try {



        SQLiteDatabase posAndroid = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);
        while (item1.moveToNext()) {
            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1.getString(0) + "'and OrderID='" + item1.getString(1) + "'", null);
            Double PricePerItem = Double.valueOf(item1.getString(5));
            Double PriceOfItem = Double.valueOf(item1.getString(4));
            Subtotal += PricePerItem;
            Cursor VatCursor = posAndroid.rawQuery("select * from ITEM where ItemID='" + item1.getString(1) + "'", null);
            if (VatCursor.getCount()!=0){
                while (VatCursor.moveToNext()){
                    if (VatCursor.getString(9)==("") || VatCursor.getString(15).equals(null) || VatCursor.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursor.getString(9);

                    }


                    if (VatCursor.getString(15).trim()==("")|| VatCursor.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursor.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursor.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }
            else{


                Cursor VatCursorReserve = posAndroid.rawQuery("select * from ITEM_RESERVE where ItemID='" + item1.getString(1) + "'", null);
                while (VatCursorReserve.moveToNext()){
                    if (VatCursorReserve.getString(9)==("") || VatCursorReserve.getString(15).equals(null) || VatCursorReserve.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursorReserve.getString(0);

                    }


                    if (VatCursorReserve.getString(15).trim()==("")|| VatCursorReserve.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }

            buffer.append(((item1.getString(2) + "                              ").substring(0, 30) + "\r\n" ));


            int ItemCount = Integer.parseInt(item1.getString(3));
            for(int kpCount = 0;kpCount<ItemCount;kpCount++){

                arraylist_kitchenPrinterItemID.add(item1.getString(1));
                arraylist_kitchenPrinterItem.add(item1.getString(2)); //
                arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3))); //
                //  arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3)));

            }
            arraylist_orderSummaryItemID.add(item1.getString(1));
            arraylist_orderSummaryItem.add(item1.getString(2));
            arraylist_orderSummaryItemQty.add(Integer.parseInt(item1.getString(3)));





            buffer.append(ItemBarcode+"\n");
            buffer.append(
                    (("      x" + item1.getString(3) + "            ").substring(0, 10))
                            + (String.format("%7.2f", PriceOfItem) + "           ").substring(0, 11) +
                            (String.format("%7.2f", PricePerItem) + " " +VatIndicator + "               ").substring(0, 15) +"" + "\n");

            if (discountFormat==1) {
                if (item2.getCount()!=0){



                    while (item2.moveToNext()) {

                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
                        //  buffer.append((((item2.getString(8) + "     ").substring(0, 6) + "x" + item2.getString(10)) + "                    ").substring(0, 25) + "-" + format.format(PricePerItemDiscount) + "\n");
                        //  buffer.append((((item2.getString(8) + "                ").substring(0, 16) + "x" + item2.getString(10)) + "    ").substring(0, 4) + "-" + format.format(PricePerItemDiscount) + "\n");
                        buffer.append((""+ item2.getString(8) + ""+"                          ").substring(0,31) + "\n" + ("                        ").substring(0, 21) +   (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n" );

                        if (!item2.getString(13).trim().equals("-0.00")){
                            Log.e("LESS VAT FINAL",item2.getString(13).trim());
                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(Double.parseDouble(item2.getString(13))))+"           ").substring(0,11) +"\n");
                        }
                    }
                }
            }

        }

        item1.close();



        if (discountFormat==2) {

            buffer.append("--------------------------------"+ "\n");
            buffer.append(("    SUB-TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getTotalAmountToPay()))+"           ").substring(0,11)+"\n");

//                        while (item1B.moveToNext()) {
//                            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1B.getString(0) + "'and OrderID='" + item1B.getString(1) + "'", null);
//                           Cursor item3 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1B.getString(0) + "'and OrderID='" + item1B.getString(1) + "'", null);
//
//                            if (item2.getCount() != 0) {
//                                while (item2.moveToNext()) {
////                            if (item2.getString(8).equals("scd")) {
//                                    Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
//                                    buffer.append((("        " + (item2.getString(12) + "% " + item2.getString(8) + "(" + item2.getString(10)) + ")") + "                                ").substring(0, 31) + (String.format("%7.2f", PricePerItemDiscount * -1) + "           ").substring(0, 11) + "\n");
//                                    totalDiscount += PricePerItemDiscount;
////                            }
//                                }
//                            }
//                        }
            //  while (item1B.moveToNext()) {
            item2 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
            if(item2.getCount()!=0){
                item2.moveToNext();

                Log.e("DISTINCT", item2.getString(0));


                Cursor item3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty) from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='" + item2.getString(0) + "'", null);
                Double PricePerItemDiscount = 0.00;
                item3.moveToNext();

//                                    if (item3.getCount() != 0) {
//                                        while (item3.moveToNext()) {
////                            if (item2.getString(8).equals("scd")) {
                if (diploFunction!=1) {

                    PricePerItemDiscount += Double.valueOf(item3.getString(0));
                    buffer.append((("" + (item2.getString(0) + "(" + item3.getString(1)) + ")") + "                                ").substring(0, 31) + (String.format("%7.2f", PricePerItemDiscount * -1) + "           ").substring(0, 11) + "\n");
//                                            totalDiscount += PricePerItemDiscount;
////                            }
//                                        }
//                                    }
                }

                if (cashier_payment_item.getLessVat()!=0.00){
                    buffer.append(("LESS-VAT"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getLessVat()*-1))+"           ").substring(0,11) +"\n");
                }

            }


            // }


        }




        //buffer.append(("  Service Charges" +"                        ").substring(0,31) + (String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n");

        buffer.append("--------------------------------"+ "\n");

        buffer.append(("TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getTotalDueAmount())+"           ").substring(0,11) +  "\n");
        //  buffer.append(("             CASH"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n");

        Cursor tenderList = db2.rawQuery("select * from InvoiceMultiplePaymentTemp where TransactionID='"+readRefNumber+"'", null);
        double finalAmountRendered=0.00;
        if (tenderList.getCount()!=0){
            while (tenderList.moveToNext()){
                buffer.append(((tenderList.getString(2)+"                               ")).substring(0,21)+(String.format("%7.2f",Double.parseDouble(tenderList.getString(3)))+"           ").substring(0,11) + "\n");
                finalAmountRendered+=Double.parseDouble(tenderList.getString(3));

            }

            if (finalAmountRendered>=cashier_payment_item.getTotalDueAmount()) {
                Change=String.valueOf(finalAmountRendered-cashier_payment_item.getTotalDueAmount());
                buffer.append("--------------------------------"+ "\n");
                buffer.append(("           CHANGE" + "                               ").substring(0, 21) + (String.format("%7.2f", Double.parseDouble(Change)) + "          ").substring(0, 11) + "\n");
                buffer.append("--------------------------------"+ "\n\n");
            }
        }
        tenderList.close();
//        if (!bankTransactionVar.getCardNumber().equals("")){
//            if (bankTransactionVar.getCardNumber().length()!=0){
//                buffer.append( "Card No: " + bankTransactionVar.getCardNumber() + "\n");
//                buffer.append("Name: " + bankTransactionVar.getCardOwner() + "\n");
//                buffer.append("Expiry Date: " + bankTransactionVar.getCardExpiry() + "\n");
//                buffer.append(  "Approval No: " + bankTransactionVar.getCardApproval() + "\n\n");
//            }
//        }








        //    buffer.append(("  Service Charges"+"                               ").substring(0,31)+(String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n\n" );




        if (vatIndicator.getVatIndicator()==0){
            buffer.append(("   NVATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("      NVAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append(("NVAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }
        else{
            buffer.append(("    VATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("       VAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append((" VAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }    buffer.append((" Zero-Rated Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(ZeroRatedSales))+"         ").substring(0,11) + "\n\n\n");
        buffer.append("Total Qty:" + TotalItem + "   " +"\n\n\n" );




        try {

            if (bankTransactionVar.getCardNumber().length() != 0) {
                buffer.append("--------------------------------"+ "\n");
                buffer.append(("Card No:           ").substring(0, 13) + getMaskedText(bankTransactionVar.getCardNumber()) + "\n");
                buffer.append(("Name:              ").substring(0, 13) + bankTransactionVar.getCardOwner() + "\n");
                buffer.append(("Expiry Date:       ").substring(0, 13) + bankTransactionVar.getCardExpiry() + "\n");
                buffer.append(("Trace No:          ").substring(0, 13) + bankTransactionVar.getCardApproval() + "\n");
            }
        }catch (Exception ex){


        }
        //buffer.append("--------------------------------"+ "\n");



        if (!otherPaymentReference.equals("") || !otherPaymentReference.equals(null) || otherPaymentReference.toString().length()!=0 || !otherPaymentReference.trim().toString().equals("")){
            buffer.append("--------------------------------"+ "\n");
            buffer.append("Reference Number: "+ otherPaymentReference+ "\n" );
        }



        if (discountLabelIndicator==3 || discountLabelIndicator==4){
            buffer.append("--------------------------------"+ "\n");
            buffer.append("      DISCOUNT CUSTOMER INFO    "+ "\n");


            SQLiteDatabase PosOutputDB= getActivity().openOrCreateDatabase("PosOutputDB.db",Context.MODE_PRIVATE,null);
            //  Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from InvoiceReceiptItemFinalWDiscountTemp", null);
            // Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from DiscountInfoTbl where TransactionID='"+or_trans_item.getTransactionNo()+"'" and, null);

            Cursor getCustInfo = PosOutputDB.rawQuery("SELECT DISTINCT DiscBuyerName, DiscIdNumber, DiscOther FROM DiscountInfoTbl WHERE TransactionID='" +readRefNumber+"' AND DiscBuyerName IS NOT NULL AND DiscBuyerName != ''",null);
            int idCount=1;
            if (getCustInfo.getCount()!=0){
                while (getCustInfo.moveToNext()){
                    buffer.append("--------------------------------"+ "\n");
                    buffer.append("ID # : " + String.valueOf(idCount) + "\n");
//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//
//
//                    buffer.append("Customer Tin : "+ getCustInfo.getString(2) +"\n");

//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//
//                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
                    if(discCategory.equalsIgnoreCase("SCD")){
                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else if(discCategory.equalsIgnoreCase("PWD")){
                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else{
                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");

                    }

                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("--------------------------------"+ "\n");

                    idCount++;

                }
            }
            else{
                buffer.append("--------------------------------"+ "\n");
                buffer.append("--------------------------------"+ "\n");
            }
            PosOutputDB.close();
//            buffer.append("--------------------------------"+ "\n\n");
        }



        buffer.append("         CUSTOMER INFO          "+ "\n");
        buffer.append("--------------------------------"+ "\n");


        buffer.append("Customer Name: "+ addedCustomerName +"\n");
        buffer.append("Address: "+ addedCustomerAddress +"\n");
        buffer.append("Customer Tin : "+ addedCustomerTin +"\n");
        buffer.append("SIGN:___________________________"+ "\n");
        buffer.append("--------------------------------"+ "\n\n");
        buffer.append(HeaderFooterClass.getFooterText()+ "\n");



        SQLiteDatabase headerQty = this.getContext().openOrCreateDatabase("PosSettings.db", android.content.Context.MODE_PRIVATE, null);
        itemListC = headerQty.rawQuery("select count(HeaderID) from receiptHeader", null);
        if (itemListC.getCount()!=0){
            itemListC.moveToFirst();
            HeaderQuantity = itemListC.getInt(0);
        }











        //mmOutputStream.write(buffer.toString().getBytes());// for bt printing
        printData=buffer.toString();



        Intent intent = new Intent("android.intent.action.CASHBOX");
        intent.putExtra("cashbox_open", true);
        //JMPrinter(printData); // for jolimark

        PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity,1);

        StringBuffer bufferOrderSummary = new StringBuffer();
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("          ORDER SUMMARY\n");
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
        bufferOrderSummary.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
        for (int x = 1; x <= arraylist_orderSummaryItem.size(); x++) {

            bufferOrderSummary.append(arraylist_orderSummaryItem.get(x - 1).toString() + "   x"+arraylist_orderSummaryItemQty.get(x-1)+"\n");
            bufferOrderSummary.append(arraylist_orderSummaryItemID.get(x - 1).toString() + "\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }

        PrinterSettings.OnlinePrinter(bufferOrderSummary.toString(), 1, 0, 3);



        StringBuffer bufferkitch = new StringBuffer();
        for (int x = 1; x <= arraylist_kitchenPrinterItemID.size(); x++) {
            bufferkitch.delete(0, bufferkitch.length());
            bufferkitch.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
            bufferkitch.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
            bufferkitch.append("ITEM OF " + String.valueOf(x) + " OUT OF " + arraylist_kitchenPrinterItemID.size() + "\n");
            bufferkitch.append("_____________________________________\n");

            bufferkitch.append(arraylist_kitchenPrinterItem.get(x - 1).toString() + "\n");
            bufferkitch.append(arraylist_kitchenPrinterItemID.get(x - 1).toString() + "\n");
            bufferkitch.append("*************************************\n\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            PrinterSettings.OnlinePrinter(bufferkitch.toString(), 1, 0, 2);

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }






        //  printPreview(printData,printQty,HeaderQuantity);
        headerQty.close();


        //   stream.write(buffer.toString().getBytes());

        create_journal_entry createJournal = new create_journal_entry();
        createJournal.setPrintData(printData);
        createJournal.setTransNumber(readRefNumber);
        createJournal.journalEntry(createJournal.getPrintData(),createJournal.getTransNumber(),FinalDate);






        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());





        boolean isInserted = databaseHandler.insertFinalTransactionReportDB(

                readRefNumber,
                FinalMultipleOR,

                String.format("%7.2f",cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",totalDiscount),
                String.format("%7.2f",Double.parseDouble(VatableSales)),
                String.format("%7.2f",Double.parseDouble(VatAmount)),
                String.format("%7.2f",cashier_payment_item.getVatExemptSale()),
                //String.valueOf( cashier_payment_item.getVatExemptSale()),
                String.format("%7.2f",Double.parseDouble(ZeroRatedSales)),
                String.format("%7.2f",cashier_payment_item.getLessVat()),
                String.format("%7.2f",cashier_payment_item.getServiceCharge()),
                shift_active.getActiveUserName(),
                shift_active.getActiveUserID(),
                FinalDate,
                timeOnly.format(currentDate.getTime()),
                shift_active.getShiftActive(),
                String.format("%7.2f",FinalSalesOverrun)





        );
        insertReturnExchangeFinal(FinaltransactionNumber,FinalORNumber);
        db2.close();





    }
    private void createTextfileCash() {
        arraylist_kitchenPrinterItem.clear();
        arraylist_kitchenPrinterItemID.clear();

        Log.e("TAG2", "createTextfileCash: CASH" );

//        try {

        checkReferenceSI();
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor item1B = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor itemTotal = db2.rawQuery("select sum(OrderQty) from InvoiceReceiptItem", null);
        Double change = Double.valueOf(et_cash.getText().toString()) - Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        Double CashDouble = Double.valueOf(et_cash.getText().toString());
        String Cash = format.format(CashDouble);

        String TotalAmount = lbl_due.getText().toString();
        Double Subtotal = 0.00;
        String Change = format.format(change);
        String ServiceCharge = "0.00";
        String VatableCharges = "0.00";
        String VatableSales = lbl_subtotal.getText().toString();
        Double totalDiscount = 0.00;
        int RegDiscComputation=0;
        Double FinalVatSalesWRegDisc=0.00;
        Double FinalVatAmtWRegDisc=0.00;

        String VatAmount = lbl_tax.getText().toString();
        String VatExemptSale = "0.00";
        String ZeroRatedSales = tv_zeroRatedSales.getText().toString();
        itemTotal.moveToFirst();
        String TotalItem = String.valueOf(itemTotal.getString(0));
//            cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());


//            cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        or_trans_item.readReferenceNumber(getContext());
        shift_active shift_active = new shift_active();
        shift_active.getShiftingTable(getContext());
        shift_active.getAccountInfo(getContext());
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate = SysDate.getSystemDate();
        Header_Footer_class HeaderFooterClass = new Header_Footer_class();
        HeaderFooterClass.HeaderNote(getContext());
        HeaderFooterClass.FooterNote(getContext());



        StringBuffer buffer = new StringBuffer();


        //==============for Transaction Counter===================================================

        int modx=Integer.parseInt(or_trans_item.getTransactionNo());
        Log.e("modx",String.valueOf(modx));
        int mody=999999999;
        int resetCount = modx/mody;
        Log.e("resetCt",String.valueOf(modx/mody));
        String formattedCtr = String.format("%02d", resetCount);
        String formattedTrans =  String.valueOf(modx % mody);
        String transactionNumberTemp=formattedTrans;
        String FinaltransactionNumber =String.format("%010d",Integer.parseInt(transactionNumberTemp));


        //=========================================================================================

        //==============for  OR Transaction Counter===================================================

        int modxOR=Integer.parseInt(or_trans_item.getOfficialReceiptNo() );
        Log.e("modx",String.valueOf(modx));
        int modyOR=999999999;
        int resetCountOR = modxOR/modyOR;
        Log.e("resetCt",String.valueOf(modxOR/modyOR));
        String formattedCtrOR = String.format("%02d", resetCountOR);
        String formattedOR =  String.valueOf(modxOR % modyOR);
        String ORNumber=formattedOR;
        String FinalORNumber =String.format("%010d",Integer.parseInt(ORNumber));

        //=========================================================================================



        buffer.append(HeaderFooterClass.getHeaderText());
        buffer.append(businessType.getBusiness_mode() + "\n");
        if (!ReferenceSI.equals("")){
            buffer.append("Reference SI No.: " + ReferenceSI+ "\n");
        }
        buffer.append(businessType.getReceipt_type()+"#:" + ""+formattedCtrOR+"-" + FinalORNumber +"\n"  + "TRANS#: "+""+formattedCtr+"-" +FinaltransactionNumber + "\n");
        buffer.append("CASHIER: " + shift_active.getActiveUserID() + " " + shift_active.getActiveUserName().toUpperCase(Locale.ROOT) + "\n" +"SHIFT: " +shift_active.getShiftActive() +"\t");
        buffer.append("POS: " + shift_active.getPOSCounter() + "\t" +"\n"+ convertdate(FinalDate) + "\t" + timeOnly.format(currentDate.getTime()) + "\n");
        buffer.append("--------------------------------" + "\n");




        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);

        String discType="";
        Cursor checkAllDiscType=db2.rawQuery("select DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (checkAllDiscType.getCount()!=0){
            while(checkAllDiscType.moveToNext()){

                discountType=checkAllDiscType.getString(0);
                if (discountType!="DIPLOMAT"){
                    Cursor checkDiscCategory=db1.rawQuery("select DiscCategory,ReceiptOption from DiscountList where DiscountName='"+discountType+"' ", null);
                    if (checkDiscCategory.moveToNext()){

                        discCategory=checkDiscCategory.getString(0);
                        Log.e("disccategoryshit",discCategory);

                        if (discCategory.equals("SCD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypeSCD",discType);
                            discountLabelIndicator=3;

                        }

                        if (discCategory.equals("PWD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypePWD",discType);
                            discountLabelIndicator=4;

                        }

                        if (discCategory.equals("REG")) {

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctype final",discType);

                            if (discType.equals("SOL")){
                                Log.e("soloparent",discType);
                                discountLabelIndicator=6;
                            }
                            if (discType.equals("ATH")){
                                Log.e("athletedisc",discType);
                                discountLabelIndicator=7;
                            }
//                            else{
//                                discountLabelIndicator=2;
//                            }



                        }


//                        if (discType.equals("SOL")) {
//
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//
//                            discountLabelIndicator=6;
//
//
//
//                        }
//                        if (discType.equals("ATH")) {
//
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//
//                            discountLabelIndicator=7;
//
//
//
//                        }


                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
                            printQty=1;
                        }
                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
                            printQty=2;
                        }

                    }


                }else{
                    if (discountType.equals("DIPLOMAT")){

                        discType= checkAllDiscType.getString(0);
                        discType = discType.substring(0,3);
                        Log.e("disctypeDIP",discType);
                        discountLabelIndicator=5;
                        printQty=printQty;

                    }
                }



            }
        }
        if (discountLabelIndicator==3) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("     SENIOR CITIZEN DISCOUNT    " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==4) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("           PWD DISCOUNT         " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



        }
        if (discountLabelIndicator==5) {


            if (vatIndicator.getVatIndicator()==1){
                buffer.append("             DIPLOMAT           " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==2){

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("         REGULAR DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



            RegDiscComputation=1;
        }
        if (discountLabelIndicator==6){


            if (vatIndicator.getVatIndicator()==1){

                buffer.append("       SOLO-PARENT DISCOUNT     " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }
        if (discountLabelIndicator==7){

            if (vatIndicator.getVatIndicator()==1){

                buffer.append("         ATHLETE DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }

        SQLiteDatabase posAndroid = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);
        while (item1.moveToNext()) {
            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1.getString(0) + "'and OrderID='" + item1.getString(1) + "'", null);
            Double PricePerItem = Double.valueOf(item1.getString(5));
            Double PriceOfItem = Double.valueOf(item1.getString(4));
            Subtotal += PricePerItem;
            Cursor VatCursor = posAndroid.rawQuery("select * from ITEM where ItemID='" + item1.getString(1) + "'", null);
            if (VatCursor.getCount()!=0){
                while (VatCursor.moveToNext()){
                    if (VatCursor.getString(9)==("") || VatCursor.getString(15).equals(null) || VatCursor.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursor.getString(9);

                    }


                    if (VatCursor.getString(15).trim()==("")|| VatCursor.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursor.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursor.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }
            else{


                Cursor VatCursorReserve = posAndroid.rawQuery("select * from ITEM_RESERVE where ItemID='" + item1.getString(1) + "'", null);
                while (VatCursorReserve.moveToNext()){
                    if (VatCursorReserve.getString(9)==("") || VatCursorReserve.getString(15).equals(null) || VatCursorReserve.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursorReserve.getString(0);

                    }


                    if (VatCursorReserve.getString(15).trim()==("")|| VatCursorReserve.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }

            buffer.append(((item1.getString(2) + "                              ").substring(0, 30) + "\r\n" ));

            int ItemCount = Integer.parseInt(item1.getString(3));
            for(int kpCount = 0;kpCount<ItemCount;kpCount++){

                arraylist_kitchenPrinterItemID.add(item1.getString(1));
                arraylist_kitchenPrinterItem.add(item1.getString(2)); //
                arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3))); //
                //  arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3)));

            }
            arraylist_orderSummaryItemID.add(item1.getString(1));
            arraylist_orderSummaryItem.add(item1.getString(2));
            arraylist_orderSummaryItemQty.add(Integer.parseInt(item1.getString(3)));






            if (item1.getString(2).length()>31) {
                buffer.append(((item1.getString(2) + "                                                              ").substring(31, 62) + "\r\n"));
            }
            buffer.append(ItemBarcode+"\n");
            buffer.append(
                    (("      x" + item1.getString(3) + "            ").substring(0, 10))
                            + (String.format("%7.2f", PriceOfItem) + "           ").substring(0, 11) +
                            (String.format("%7.2f", PricePerItem) + " " +VatIndicator + "               ").substring(0, 15) +"" + "\n");

            if (discountFormat==1) {
                if (item2.getCount()!=0){



                    while (item2.moveToNext()) {

                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
                        //  buffer.append((((item2.getString(8) + "     ").substring(0, 6) + "x" + item2.getString(10)) + "                    ").substring(0, 25) + "-" + format.format(PricePerItemDiscount) + "\n");
                        //  buffer.append((((item2.getString(8) + "                ").substring(0, 16) + "x" + item2.getString(10)) + "    ").substring(0, 4) + "-" + format.format(PricePerItemDiscount) + "\n");
                        buffer.append((""+ item2.getString(8) + ""+"                               ").substring(0,31) + "\n" + ("                        ").substring(0, 21) +   (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n" );

                        if (!item2.getString(13).trim().equals("-0.00")){
                            Log.e("LESS VAT FINAL",item2.getString(13).trim());
                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(Double.parseDouble(item2.getString(13))))+"           ").substring(0,11) +"\n");
                        }
                        totalDiscount+=PricePerItemDiscount;
                    }

                }
            }

        }

        item1.close();


        // discountFormat=2;
        if (discountFormat==2) {

            buffer.append("--------------------------------"+ "\n");
            buffer.append(("    SUB-TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getTotalAmountToPay()))+"           ").substring(0,11)+"\n");


            item2 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
            if(item2.getCount()!=0){
                item2.moveToNext();

                Log.e("DISTINCT", item2.getString(0));


                Cursor item3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty) from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='" + item2.getString(0) + "'", null);
                Double PricePerItemDiscount = 0.00;
                item3.moveToNext();

//                                    if (item3.getCount() != 0) {
//                                        while (item3.moveToNext()) {
////                            if (item2.getString(8).equals("scd")) {
                PricePerItemDiscount += Double.valueOf(item3.getString(0));
                buffer.append((("" +( item2.getString(0) + "(" + item3.getString(1)) + ")") + "                                ").substring(0, 31) + "\n" +"                     ".substring(0,21)+ (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n");
//                                            totalDiscount += PricePerItemDiscount;
////                            }
//                                        }
//                                    }

                if (cashier_payment_item.getLessVat()!=0.00){
                    buffer.append(("LESS-VAT"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getLessVat()*-1))+"           ").substring(0,11) +"\n");
                }


                totalDiscount+=PricePerItemDiscount;

            }


            // }


        }




        //buffer.append(("  Service Charges" +"                        ").substring(0,31) + (String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n");

        buffer.append("--------------------------------"+ "\n");

        buffer.append(("            TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getTotalDueAmount())+"           ").substring(0,11) +  "\n");
        buffer.append(("             CASH"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n");
        buffer.append(("           CHANGE"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Change))+"          ").substring(0,11) + "\n\n");
        //    buffer.append(("  Service Charges"+"                               ").substring(0,31)+(String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n\n" );
        buffer.append("--------------------------------"+ "\n");



        if (vatIndicator.getVatIndicator()==0){
            buffer.append(("   NVATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("      NVAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append(("NVAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }
        else{
            buffer.append(("    VATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("       VAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append((" VAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }

        buffer.append((" Zero-Rated Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(ZeroRatedSales))+"         ").substring(0,11) + "\n\n");
        buffer.append("Total Qty:" + TotalItem + "   " +"\n" );





        if (discountLabelIndicator==3 || discountLabelIndicator==4){
            buffer.append("--------------------------------"+ "\n");
            buffer.append("      DISCOUNT CUSTOMER INFO    "+ "\n");


            SQLiteDatabase PosOutputDB= getActivity().openOrCreateDatabase("PosOutputDB.db",Context.MODE_PRIVATE,null);
            //  Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from InvoiceReceiptItemFinalWDiscountTemp", null);
            // Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from DiscountInfoTbl where TransactionID='"+or_trans_item.getTransactionNo()+"'" and, null);
            Cursor getCustInfo = PosOutputDB.rawQuery(
                    "SELECT DISTINCT DiscBuyerName, DiscIdNumber, DiscOther " +
                            "FROM DiscountInfoTbl " +
                            "WHERE TransactionID='" + or_trans_item.getTransactionNo() + "' " +
                            "AND DiscBuyerName IS NOT NULL AND DiscBuyerName != ''",
                    null
            );
            int idCount=1;
            if (getCustInfo.getCount()!=0){
                while (getCustInfo.moveToNext()){
                    buffer.append("--------------------------------"+ "\n");
                    buffer.append("ID # : " + String.valueOf(idCount) + "\n");

                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
                    if(discCategory.equalsIgnoreCase("SCD")){
                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else if(discCategory.equalsIgnoreCase("PWD")){
                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else{
                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");

                    }

                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("--------------------------------"+ "\n");

                    idCount++;

                }
            }
            else{
                buffer.append("--------------------------------"+ "\n");
                buffer.append("--------------------------------"+ "\n");
            }
            PosOutputDB.close();
//            buffer.append("--------------------------------"+ "\n\n");
        }
//        else if (addedCustomerName.length()!=0){

        buffer.append("         CUSTOMER INFO          "+ "\n");
        buffer.append("--------------------------------"+ "\n");


        buffer.append("Customer Name: "+ addedCustomerName +"\n");
        buffer.append("Address: "+ addedCustomerAddress +"\n");
        buffer.append("Customer Tin : "+ addedCustomerTin +"\n");
        buffer.append("SIGN:___________________________"+ "\n");
        buffer.append("--------------------------------"+ "\n\n");
        buffer.append(HeaderFooterClass.getFooterText()+ "\n");

//                    buffer.append("Customer Name: "+ custInfo.getCustName() +"\n");
//                    buffer.append("Customer IDNo: "+ custInfo.getCustIDNo() +"\n");
//                    buffer.append("Customer Tin : "+ custInfo.getCustTIN() +"\n\n");


        SQLiteDatabase headerQty = this.getContext().openOrCreateDatabase("PosSettings.db", android.content.Context.MODE_PRIVATE, null);
        itemListC = headerQty.rawQuery("select count(HeaderID) from receiptHeader", null);
        if (itemListC.getCount()!=0){
            itemListC.moveToFirst();
            HeaderQuantity = itemListC.getInt(0);
        }


        //mmOutputStream.write(buffer.toString().getBytes());// for bt printing
        printData=buffer.toString();

        PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity,1);


        headerQty.close();

        SQLiteDatabase posSettings = this.getContext().openOrCreateDatabase("settings.db", android.content.Context.MODE_PRIVATE, null);



//        cashier_payment_printer prn = new cashier_payment_printer();
//        String status = prn.CheckPrinter(getContext(),3);
//        if (status.equalsIgnoreCase("OFF")){
            //region order summary printer




        if (orderSumPrint==1) {


            StringBuffer bufferOrderSummary = new StringBuffer();
            bufferOrderSummary.append("_____________________________________\n");
            bufferOrderSummary.append("          ORDER SUMMARY\n");
            bufferOrderSummary.append("_____________________________________\n");
            bufferOrderSummary.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
            bufferOrderSummary.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
            for (int x = 1; x <= arraylist_orderSummaryItem.size(); x++) {

                bufferOrderSummary.append(arraylist_orderSummaryItem.get(x - 1).toString() + "   x" + arraylist_orderSummaryItemQty.get(x - 1) + "\n");
                bufferOrderSummary.append(arraylist_orderSummaryItemID.get(x - 1).toString() + "\n");

                Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

                // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // Handle the exception, e.g., by logging it or taking appropriate action.
                }
            }

            PrinterSettings.OnlinePrinter(bufferOrderSummary.toString(), 1, 0, 3);

        }


            //endregion
//        }
//        status = prn.CheckPrinter(getContext(),4);
//
//        if(status.equalsIgnoreCase("OFF")){


//        cashier_payment_printer prn = new cashier_payment_printer();
//        String status = prn.CheckPrinter(posSettings,2);
//        if (!status.equalsIgnoreCase("OFF")){

            //region kitchen printer




        if (kitchPrint==1) {
            StringBuffer bufferkitch = new StringBuffer();
            for (int x = 1; x <= arraylist_kitchenPrinterItemID.size(); x++) {
                bufferkitch.delete(0, bufferkitch.length());
                bufferkitch.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
                bufferkitch.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
                bufferkitch.append("ITEM OF " + String.valueOf(x) + " OUT OF " + arraylist_kitchenPrinterItemID.size() + "\n");
                bufferkitch.append("_____________________________________\n");

                bufferkitch.append(arraylist_kitchenPrinterItem.get(x - 1).toString() + "\n");
                bufferkitch.append(arraylist_kitchenPrinterItemID.get(x - 1).toString() + "\n");
                bufferkitch.append("*************************************\n\n");

                Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

                PrinterSettings.OnlinePrinter(bufferkitch.toString(), 1, 0, 2);

                // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // Handle the exception, e.g., by logging it or taking appropriate action.
                }
            }
        }

            //endregion

//        }


//        }





        if (stickerPrint==1) {


            SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
            Cursor cursorStickerData = PosOutputDB.rawQuery("SELECT OrderName,TransactionTime,ItemRemarks, SUM(OrderQty) AS TotalOrderQty FROM InvoiceReceiptItem WHERE TransactionID='" + FinaltransactionNumber + "'", null);
            if (cursorStickerData.getCount() != 0) {
                while (cursorStickerData.moveToNext()) {
                    StringBuffer bufferStickerPrinter = new StringBuffer();
                    String transactionID = FinaltransactionNumber;
                    int totalOrderQty = cursorStickerData.getInt(cursorStickerData.getColumnIndex("TotalOrderQty"));
                    String OrderName = cursorStickerData.getString(cursorStickerData.getColumnIndex("OrderName"));
                    String ItemRemarks = cursorStickerData.getString(cursorStickerData.getColumnIndex("ItemRemarks"));
                    String Time = cursorStickerData.getString(cursorStickerData.getColumnIndex("TransactionTime"));
//                bufferkitch.append("Trans#: "+transactionID + "\n");
//                bufferkitch.append("Time : "+Time + "\n");

                    bufferStickerPrinter.append("TEXT 10,10,\"0\",0,1,1,\"" + "Trans#: " + transactionID + "\"\n");
                    bufferStickerPrinter.append("TEXT 10,30,\"2\",0,1,1,\"" + "Customer#: " + "1" + "\"\n");
                    bufferStickerPrinter.append("TEXT 10,50,\"2\",0,1,1,\"" + "Time : " + Time + "\"\n");
                    bufferStickerPrinter.append("TEXT 10,70,\"2\",0,1,1,\"" + "Details: " + "\"\n");
                    bufferStickerPrinter.append("TEXT 10,90,\"2\",0,1,1,\"" + OrderName + "\"\n");
                    bufferStickerPrinter.append("TEXT 10,130,\"2\",0,1,1,\"" + "Remarks:" + "\"\n");
                    // bufferkitch.append("TEXT 10,30,\"2\",0,1,1,\"" + "Trans#: " +  transactionID+"\"\n");
                    // buffer.append("TEXT 10,30,\"2\",0,1,1,\"" + "line2" + "\"\n");
                    PrinterSettings.OnlinePrinter(bufferStickerPrinter.toString(), 1, 0, 4);


                }
            }
            cursorStickerData.close();
            PosOutputDB.close();
        }







    // PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity);





        create_journal_entry createJournal = new create_journal_entry();
        createJournal.setPrintData(printData);
        createJournal.setTransNumber(or_trans_item.getTransactionNo());
        createJournal.journalEntry(createJournal.getPrintData(),createJournal.getTransNumber(),FinalDate);

//



        //



        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());





        boolean isInserted = databaseHandler.insertFinalTransactionReportDB(


                or_trans_item.getTransactionNo(),
                or_trans_item.getOfficialReceiptNo(),
                String.format("%7.2f",cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",totalDiscount),
                String.format("%7.2f",Double.parseDouble(VatableSales)),
                String.format("%7.2f",Double.parseDouble(VatAmount)),
                String.format("%7.2f",cashier_payment_item.getVatExemptSale()),
                //String.valueOf( cashier_payment_item.getVatExemptSale()),
                String.format("%7.2f",Double.parseDouble(ZeroRatedSales)),
                String.format("%7.2f",cashier_payment_item.getLessVat()),
                String.format("%7.2f",cashier_payment_item.getServiceCharge()),
                shift_active.getActiveUserName(),
                shift_active.getActiveUserID(),
                FinalDate,
                timeOnly.format(currentDate.getTime()),
                shift_active.getShiftActive(),
                String.format("%7.2f",FinalSalesOverrun)





        );
        insertReturnExchangeFinal(FinaltransactionNumber,FinalORNumber);
        db2.close();



        //    printPreview();
//
        //  sendBroadcast(intent);




    }

    int kitchPrint=0;
    int stickerPrint=0;
    int orderSumPrint=0;



    private void createTextfileBankDebitCard() {

        arraylist_kitchenPrinterItem.clear();
        arraylist_kitchenPrinterItemID.clear();

//        try {


        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor item1B = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor itemTotal = db2.rawQuery("select sum(OrderQty) from InvoiceReceiptItem", null);
        Double change = Double.valueOf(et_cash.getText().toString()) - Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        Double CashDouble = Double.valueOf(et_cash.getText().toString());
        String Cash = format.format(CashDouble);

        String TotalAmount = lbl_due.getText().toString();
        Double Subtotal = 0.00;
        String Change = format.format(change);
        String ServiceCharge = "0.00";
        String VatableCharges = "0.00";
        String VatableSales = lbl_subtotal.getText().toString();
        Double totalDiscount = 0.00;
        int RegDiscComputation=0;
        Double FinalVatSalesWRegDisc=0.00;
        Double FinalVatAmtWRegDisc=0.00;

        String VatAmount = lbl_tax.getText().toString();
        String VatExemptSale = "0.00";
        String ZeroRatedSales = tv_zeroRatedSales.getText().toString();
        itemTotal.moveToFirst();
        String TotalItem = String.valueOf(itemTotal.getString(0));
//            cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());


//            cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        or_trans_item.readReferenceNumber(getContext());
        shift_active shift_active = new shift_active();
        shift_active.getShiftingTable(getContext());
        shift_active.getAccountInfo(getContext());
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate = SysDate.getSystemDate();
        Header_Footer_class HeaderFooterClass = new Header_Footer_class();
        HeaderFooterClass.HeaderNote(getContext());
        HeaderFooterClass.FooterNote(getContext());



        StringBuffer buffer = new StringBuffer();


        //==============for Transaction Counter===================================================

        int modx=Integer.parseInt(or_trans_item.getTransactionNo());
        Log.e("modx",String.valueOf(modx));
        int mody=999999999;
        int resetCount = modx/mody;
        Log.e("resetCt",String.valueOf(modx/mody));
        String formattedCtr = String.format("%02d", resetCount);
        String formattedTrans =  String.valueOf(modx % mody);
        String transactionNumberTemp=formattedTrans;
        String FinaltransactionNumber =String.format("%010d",Integer.parseInt(transactionNumberTemp));

        //=========================================================================================

        //==============for  OR Transaction Counter===================================================

        int modxOR=Integer.parseInt(or_trans_item.getOfficialReceiptNo() );
        Log.e("modx",String.valueOf(modx));
        int modyOR=999999999;
        int resetCountOR = modxOR/modyOR;
        Log.e("resetCt",String.valueOf(modxOR/modyOR));
        String formattedCtrOR = String.format("%02d", resetCountOR);
        String formattedOR =  String.valueOf(modxOR % modyOR);
        String ORNumber=formattedOR;
        String FinalORNumber =String.format("%010d",Integer.parseInt(ORNumber));

        //=========================================================================================




        buffer.append(HeaderFooterClass.getHeaderText());
        buffer.append(businessType.getBusiness_mode() + "\n");
        checkReferenceSI();
        if (!ReferenceSI.equals("")){
            buffer.append("Reference SI No.: " + ReferenceSI+ "\n");
        }
        buffer.append(businessType.getReceipt_type()+"#:" + ""+formattedCtrOR+"-" + FinalORNumber +"\n"  + "TRANS#: "+""+formattedCtr+"-" +FinaltransactionNumber + "\n");
        buffer.append("CASHIER: " + shift_active.getActiveUserID() + " " + shift_active.getActiveUserName().toUpperCase(Locale.ROOT) + " SHIFT: " +shift_active.getShiftActive() +"\n");
        buffer.append("POS: " + shift_active.getPOSCounter() + "\t" + convertdate(FinalDate) + "\t" + timeOnly.format(currentDate.getTime()) + "\n");
        buffer.append("--------------------------------" + "\n");





        String discType="";
        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        Cursor checkAllDiscType=db2.rawQuery("select DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (checkAllDiscType.getCount()!=0){
            while(checkAllDiscType.moveToNext()){

                discountType=checkAllDiscType.getString(0);
                if (!discountType.equals("DIPLOMAT")){
                    Cursor checkDiscCategory=db1.rawQuery("select DiscCategory,ReceiptOption from DiscountList where DiscountName='"+discountType+"' ", null);
                    if (checkDiscCategory.moveToNext()){
                        discCategory=checkDiscCategory.getString(0);



                        if (discCategory.equals("SCD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypeSCD",discType);
                            discountLabelIndicator=3;

                        }

                        if (discCategory.equals("PWD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypePWD",discType);
                            discountLabelIndicator=4;

                        }

                        if (discCategory.equals("REG")) {

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctype final",discType);

                            if (discType.equals("SOL")){
                                Log.e("soloparent",discType);
                                discountLabelIndicator=6;
                            }
                            if (discType.equals("ATH")){
                                Log.e("athletedisc",discType);
                                discountLabelIndicator=7;
                            }


                        }

                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
                            printQty=printQty*1;
                        }
                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
                            printQty=printQty*2;
                        }




                    }

                }else{
                    if (discountType.equals("DIPLOMAT")){

                        discType= checkAllDiscType.getString(0);
                        discType = discType.substring(0,3);
                        Log.e("disctypeDIP",discType);
                        discountLabelIndicator=5;
                        printQty=printQty;

                    }
                }








            }
        }



        if (discountLabelIndicator==3) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("     SENIOR CITIZEN DISCOUNT    " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==4) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("           PWD DISCOUNT         " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



        }
        if (discountLabelIndicator==5) {


            if (vatIndicator.getVatIndicator()==1){
                buffer.append("             DIPLOMAT           " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==2){

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("         REGULAR DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



            RegDiscComputation=1;
        }
        if (discountLabelIndicator==6){


            if (vatIndicator.getVatIndicator()==1){

                buffer.append("       SOLO-PARENT DISCOUNT     " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }
        if (discountLabelIndicator==7){

            if (vatIndicator.getVatIndicator()==1){

                buffer.append("         ATHLETE DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }


        SQLiteDatabase posAndroid = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);
        while (item1.moveToNext()) {

            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1.getString(0) + "'and OrderID='" + item1.getString(1) + "'", null);
            Double PricePerItem = Double.valueOf(item1.getString(5));
            Double PriceOfItem = Double.valueOf(item1.getString(4));
            Subtotal += PricePerItem;


            Cursor VatCursor = posAndroid.rawQuery("select * from ITEM where ItemID='" + item1.getString(1) + "'", null);
            if (VatCursor.getCount()!=0){
                while (VatCursor.moveToNext()){
                    if (VatCursor.getString(9)==("") || VatCursor.getString(15).equals(null)||VatCursor.getString(15).equals("null") ){
                        ItemBarcode="";
                    }
                    else {
                        ItemBarcode=VatCursor.getString(9);
                    }


                    if (VatCursor.getString(15).trim()==("")|| VatCursor.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursor.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursor.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }



                }
            }
            else{


                Cursor VatCursorReserve = posAndroid.rawQuery("select * from ITEM_RESERVE where ItemID='" + item1.getString(1) + "'", null);
                while (VatCursorReserve.moveToNext()){
                    if (VatCursorReserve.getString(9)==("") || VatCursorReserve.getString(15).equals(null) || VatCursorReserve.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursorReserve.getString(0);

                    }


                    if (VatCursorReserve.getString(15).trim()==("")|| VatCursorReserve.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }

            int ItemCount = Integer.parseInt(item1.getString(3));
            for(int kpCount = 0;kpCount<ItemCount;kpCount++){

                arraylist_kitchenPrinterItemID.add(item1.getString(1));
                arraylist_kitchenPrinterItem.add(item1.getString(2)); //
                arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3))); //
                //  arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3)));

            }
            arraylist_orderSummaryItemID.add(item1.getString(1));
            arraylist_orderSummaryItem.add(item1.getString(2));
            arraylist_orderSummaryItemQty.add(Integer.parseInt(item1.getString(3)));



            buffer.append(((item1.getString(2) + "                              ").substring(0, 30) + "\r\n" ));
            buffer.append(ItemBarcode+"\n");
            buffer.append(
                    (("      x" + item1.getString(3) + "            ").substring(0, 10))
                            + (String.format("%7.2f", PriceOfItem) + "           ").substring(0, 11) +
                            (String.format("%7.2f", PricePerItem) + " " +VatIndicator + "               ").substring(0, 15) +"" + "\n");


            if (discountFormat==1) {
                if (item2.getCount()!=0){


                    while (item2.moveToNext()) {

                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
                        buffer.append((""+ item2.getString(8) + ""+"                               ").substring(0,31) + "\n" + ("                        ").substring(0, 21) +   (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n" );

                        if (!item2.getString(13).trim().equals("-0.00")){
                            Log.e("LESS VAT FINAL",item2.getString(13).trim());
                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(Double.parseDouble(item2.getString(13))))+"           ").substring(0,11) +"\n");
                        }
                        totalDiscount+=PricePerItemDiscount;
                    }



                }
            }

        }

        item1.close();
        if (discountFormat==2) {

            buffer.append("--------------------------------"+ "\n");
            buffer.append(("    SUB-TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getTotalAmountToPay()))+"           ").substring(0,11)+"\n");
            item2 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
            if(item2.getCount()!=0){
                item2.moveToNext();




                Cursor item3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty) from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='" + item2.getString(0) + "'", null);
                Double PricePerItemDiscount = 0.00;
                item3.moveToNext();

                PricePerItemDiscount += Double.valueOf(item3.getString(0));
                buffer.append((("Discount : " +( item2.getString(0) + "(" + item3.getString(1)) + ")") + "                                ").substring(0, 31) + (String.format("%7.2f", PricePerItemDiscount * -1) + "           ").substring(0, 11) + "\n");

                if (cashier_payment_item.getLessVat()!=0.00){
                    buffer.append(("LESS-VAT"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getLessVat()*-1))+"           ").substring(0,11) +"\n");
                }

            }

        }

        buffer.append("--------------------------------"+ "\n");

        buffer.append(("TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getTotalDueAmount())+"           ").substring(0,11) +  "\n");
        buffer.append((typeOfPayment+"                               ").substring(0,21) + (String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n\n" );

        buffer.append("--------------------------------"+ "\n");

        if (vatIndicator.getVatIndicator()==0){
            buffer.append(("   NVATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("      NVAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append(("NVAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }
        else{
            buffer.append(("    VATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("       VAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append((" VAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }   buffer.append((" Zero-Rated Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(ZeroRatedSales))+"         ").substring(0,11) + "\n\n\n");
        buffer.append("Total Qty:" + TotalItem + "   " +"\n\n" );

        buffer.append("--------------------------------"+ "\n");
        buffer.append(("Card No:           ").substring(0, 13) + getMaskedText(bankTransactionVar.getCardNumber()) + "\n");
        buffer.append(("Name:              ").substring(0,13) + bankTransactionVar.getCardOwner() + "\n");
        buffer.append(("Expiry Date:       ").substring(0,13) + bankTransactionVar.getCardExpiry() + "\n");
        buffer.append(("Trace No:          ").substring(0, 13) + bankTransactionVar.getCardApproval() + "\n\n");



        if (discountLabelIndicator==3 || discountLabelIndicator==4){
            buffer.append("--------------------------------"+ "\n");
            buffer.append("      DISCOUNT CUSTOMER INFO    "+ "\n");


            SQLiteDatabase PosOutputDB= getActivity().openOrCreateDatabase("PosOutputDB.db",Context.MODE_PRIVATE,null);
            //  Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from InvoiceReceiptItemFinalWDiscountTemp", null);
            // Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from DiscountInfoTbl where TransactionID='"+or_trans_item.getTransactionNo()+"'" and, null);

            Cursor getCustInfo = PosOutputDB.rawQuery("SELECT DISTINCT DiscBuyerName, DiscIdNumber, DiscOther FROM DiscountInfoTbl WHERE TransactionID='" +readRefNumber+"' AND DiscBuyerName IS NOT NULL AND DiscBuyerName != ''",null);
            int idCount=1;
            if (getCustInfo.getCount()!=0){
                while (getCustInfo.moveToNext()){
                    buffer.append("--------------------------------"+ "\n");
                    buffer.append("ID # : " + String.valueOf(idCount) + "\n");
//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//
//
//                    buffer.append("Customer Tin : "+ getCustInfo.getString(2) +"\n");

//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//
//                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
                    if(discCategory.equalsIgnoreCase("SCD")){
                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else if(discCategory.equalsIgnoreCase("PWD")){
                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else{
                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");

                    }

                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("--------------------------------"+ "\n");

                    idCount++;

                }
            }
            else{
                buffer.append("--------------------------------"+ "\n");
                buffer.append("--------------------------------"+ "\n");
            }
            PosOutputDB.close();
//            buffer.append("--------------------------------"+ "\n\n");
        }
        buffer.append("         CUSTOMER INFO          "+ "\n");
        buffer.append("--------------------------------"+ "\n");
        buffer.append("Customer Name: "+ addedCustomerName +"\n");
        buffer.append("Address: "+ addedCustomerAddress +"\n");
        buffer.append("Customer Tin : "+ addedCustomerTin +"\n");
        buffer.append("SIGN:___________________________"+ "\n");
        buffer.append("--------------------------------"+ "\n\n");
        buffer.append(HeaderFooterClass.getFooterText()+ "\n");




        SQLiteDatabase headerQty = this.getContext().openOrCreateDatabase("PosSettings.db", android.content.Context.MODE_PRIVATE, null);
        itemListC = headerQty.rawQuery("select count(HeaderID) from receiptHeader", null);
        if (itemListC.getCount()!=0){
            itemListC.moveToFirst();
            HeaderQuantity = itemListC.getInt(0);
        }



        Intent intent = new Intent("android.intent.action.CASHBOX");
        intent.putExtra("cashbox_open", true);



        //mmOutputStream.write(buffer.toString().getBytes());// for bt printing
        printData=buffer.toString();


        //JMPrinter(printData); // for jolimark
        PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity,1);
        // printPreview(printData,printQty,HeaderQuantity);



        StringBuffer bufferOrderSummary = new StringBuffer();
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("          ORDER SUMMARY\n");
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
        bufferOrderSummary.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
        for (int x = 1; x <= arraylist_orderSummaryItem.size(); x++) {

            bufferOrderSummary.append(arraylist_orderSummaryItem.get(x - 1).toString() + "   x"+arraylist_orderSummaryItemQty.get(x-1)+"\n");
            bufferOrderSummary.append(arraylist_orderSummaryItemID.get(x - 1).toString() + "\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }

        PrinterSettings.OnlinePrinter(bufferOrderSummary.toString(), 1, 0, 3);



        StringBuffer bufferkitch = new StringBuffer();
        for (int x = 1; x <= arraylist_kitchenPrinterItemID.size(); x++) {
            bufferkitch.delete(0, bufferkitch.length());
            bufferkitch.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
            bufferkitch.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
            bufferkitch.append("ITEM OF " + String.valueOf(x) + " OUT OF " + arraylist_kitchenPrinterItemID.size() + "\n");
            bufferkitch.append("_____________________________________\n");

            bufferkitch.append(arraylist_kitchenPrinterItem.get(x - 1).toString() + "\n");
            bufferkitch.append(arraylist_kitchenPrinterItemID.get(x - 1).toString() + "\n");
            bufferkitch.append("*************************************\n\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            PrinterSettings.OnlinePrinter(bufferkitch.toString(), 1, 0, 2);

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }









        headerQty.close();


        //   stream.write(buffer.toString().getBytes());

        create_journal_entry createJournal = new create_journal_entry();
        createJournal.setPrintData(printData);
        createJournal.setTransNumber(or_trans_item.getTransactionNo());
        createJournal.journalEntry(createJournal.getPrintData(),createJournal.getTransNumber(),FinalDate);
        // createJournal.callJournalEntry(getContext().getApplicationContext(),printData,or_trans_item.getTransactionNo());


        //   File file = new File(receiptFile, dateForJournal+or_trans_item.getTransactionNo());


        // stream.write(buffer.toString().getBytes());

//



        //









        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());





        boolean isInserted = databaseHandler.insertFinalTransactionReportDB(



                or_trans_item.getTransactionNo(),
                or_trans_item.getOfficialReceiptNo(),
                String.format("%7.2f",cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",totalDiscount),
                String.format("%7.2f",Double.parseDouble(VatableSales)),
                String.format("%7.2f",Double.parseDouble(VatAmount)),
                String.format("%7.2f",cashier_payment_item.getVatExemptSale()),
                //String.valueOf( cashier_payment_item.getVatExemptSale()),
                String.format("%7.2f",Double.parseDouble(ZeroRatedSales)),
                String.format("%7.2f",cashier_payment_item.getLessVat()),
                String.format("%7.2f",cashier_payment_item.getServiceCharge()),
                shift_active.getActiveUserName(),
                shift_active.getActiveUserID(),
                FinalDate,
                timeOnly.format(currentDate.getTime()),
                shift_active.getShiftActive(),
                String.format("%7.2f",FinalSalesOverrun)





        );


        bankTransactionVar.setTransNum(FinaltransactionNumber);
        bankTransactionVar.setORNum(FinalORNumber);
        bankTransactionVar.setTransDate(FinalDate);
        bankTransactionVar.setTransTime(timeOnly.format(currentDate.getTime()));
        bankTransactionVar.setUser(shift_active.getActiveUserName());
        Log.e("Bank Transaction",FinaltransactionNumber + "  " + FinalORNumber + "  ");
        insertBankTransactionTemp(getActivity());




        //insert BankTransaction Final


        //
        insertReturnExchangeFinal(FinaltransactionNumber,FinalORNumber);
        db2.close();


    }
    private void createTextfileBankCreditCard() {


        arraylist_kitchenPrinterItemID.clear();
        arraylist_kitchenPrinterItem.clear();

//        try {


        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor item1B = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor itemTotal = db2.rawQuery("select sum(OrderQty) from InvoiceReceiptItem", null);
        Double change = Double.valueOf(et_cash.getText().toString()) - Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        Double CashDouble = Double.valueOf(et_cash.getText().toString());
        String Cash = format.format(CashDouble);

        String TotalAmount = lbl_due.getText().toString();
        Double Subtotal = 0.00;
        String Change = format.format(change);
        String ServiceCharge = "0.00";
        String VatableCharges = "0.00";
        String VatableSales = lbl_subtotal.getText().toString();
        Double totalDiscount = 0.00;
        int RegDiscComputation=0;
        Double FinalVatSalesWRegDisc=0.00;
        Double FinalVatAmtWRegDisc=0.00;

        String VatAmount = lbl_tax.getText().toString();
        String VatExemptSale = "0.00";
        String ZeroRatedSales = tv_zeroRatedSales.getText().toString();
        itemTotal.moveToFirst();
        String TotalItem = String.valueOf(itemTotal.getString(0));
//            cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());


//            cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        or_trans_item.readReferenceNumber(getContext());
        shift_active shift_active = new shift_active();
        shift_active.getShiftingTable(getContext());
        shift_active.getAccountInfo(getContext());
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate = SysDate.getSystemDate();
        Header_Footer_class HeaderFooterClass = new Header_Footer_class();
        HeaderFooterClass.HeaderNote(getContext());
        HeaderFooterClass.FooterNote(getContext());



        StringBuffer buffer = new StringBuffer();


        //==============for Transaction Counter===================================================

        int modx=Integer.parseInt(or_trans_item.getTransactionNo());
        Log.e("modx",String.valueOf(modx));
        int mody=999999999;
        int resetCount = modx/mody;
        Log.e("resetCt",String.valueOf(modx/mody));
        String formattedCtr = String.format("%02d", resetCount);
        String formattedTrans =  String.valueOf(modx % mody);
        String transactionNumberTemp=formattedTrans;
        String FinaltransactionNumber =String.format("%010d",Integer.parseInt(transactionNumberTemp));

        //=========================================================================================

        //==============for  OR Transaction Counter===================================================

        int modxOR=Integer.parseInt(or_trans_item.getOfficialReceiptNo() );
        Log.e("modx",String.valueOf(modx));
        int modyOR=999999999;
        int resetCountOR = modxOR/modyOR;
        Log.e("resetCt",String.valueOf(modxOR/modyOR));
        String formattedCtrOR = String.format("%02d", resetCountOR);
        String formattedOR =  String.valueOf(modxOR % modyOR);
        String ORNumber=formattedOR;
        String FinalORNumber =String.format("%010d",Integer.parseInt(ORNumber));

        //=========================================================================================



////            system_final_date sysDate= new system_final_date();
////            String FinalDate = sysDate.getSystemDate();
//            File eJournal=new File(Environment.getExternalStorageDirectory()+"/ANDROID_POS/EJournal/");
//            String dateForJournal = FinalDate.replace("/","");
//            File file = new File(eJournal, dateForJournal+or_trans_item.getTransactionNo()+".txt");
//            FileOutputStream stream = new FileOutputStream(file);



        buffer.append(HeaderFooterClass.getHeaderText());
        buffer.append(businessType.getBusiness_mode() + "\n");
        checkReferenceSI();
        if (!ReferenceSI.equals("")){
            buffer.append("Reference SI No.: " + ReferenceSI+ "\n");
        }
        buffer.append(businessType.getReceipt_type()+"#:" + ""+formattedCtrOR+"-" + FinalORNumber +"\n"  + "TRANS#: "+""+formattedCtr+"-" +FinaltransactionNumber + "\n");
        buffer.append("CASHIER: " + shift_active.getActiveUserID() + " " + shift_active.getActiveUserName().toUpperCase(Locale.ROOT) + "\n" +  "SHIFT: " +shift_active.getShiftActive() +"\t");
        buffer.append("POS: " + shift_active.getPOSCounter() + "\t" +"\n"+ convertdate(FinalDate) + "\t" + timeOnly.format(currentDate.getTime()) + "\n");
        buffer.append("--------------------------------" + "\n");



//            Cursor checkDiscountTypeSCD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='SCD'", null);
//            Cursor checkDiscountTypePWD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='PWD'", null);
//            Cursor checkDiscountTypeDIP = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='DIPLOMAT'", null);
//            Cursor checkDiscountTypeREG = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType!='SCD' and DiscountType!='PWD' and DiscountType!='DIPLOMAT'", null);
//
//            if (checkDiscountTypeSCD.getCount()!=0){
//                discountLabelIndicator=3;
//            }
//            if (checkDiscountTypePWD.getCount()!=0){
//                discountLabelIndicator=4;
//            }
//            if (checkDiscountTypeDIP.getCount()!=0){
//                discountLabelIndicator=5;
//            }
//            if (checkDiscountTypeREG.getCount()!=0){
//                discountLabelIndicator=2;
//            }

        String discType="";
        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        Cursor checkAllDiscType=db2.rawQuery("select DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (checkAllDiscType.getCount()!=0){
            while(checkAllDiscType.moveToNext()){

                discountType=checkAllDiscType.getString(0);
                if (!discountType.equals("DIPLOMAT")){

                    Cursor checkDiscCategory=db1.rawQuery("select DiscCategory,ReceiptOption from DiscountList where DiscountName='"+discountType+"' ", null);
                    if (checkDiscCategory.moveToNext()){
                        discCategory=checkDiscCategory.getString(0);


                        if (discCategory.equals("SCD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypeSCD",discType);
                            discountLabelIndicator=3;

                        }

                        if (discCategory.equals("PWD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypePWD",discType);
                            discountLabelIndicator=4;

                        }

//                        if (discCategory.equals("REG"))
//                        {
//
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//                            discountLabelIndicator=2;
//
//                        }

                        if (discCategory.equals("REG")) {

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctype final",discType);

                            if (discType.equals("SOL")){
                                Log.e("soloparent",discType);
                                discountLabelIndicator=6;
                            }
                            if (discType.equals("ATH")){
                                Log.e("athletedisc",discType);
                                discountLabelIndicator=7;
                            }
//                            else{
//                                discountLabelIndicator=2;
//                            }



                        }

//                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
//                            printQty=1;
//                        }
//                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
//                            printQty=2;
//                        }

                    }

                }
                else{
                    if (discountType.equals("DIPLOMAT")){

                        discType= checkAllDiscType.getString(0);
                        discType = discType.substring(0,3);
                        Log.e("disctypeDIP",discType);
                        discountLabelIndicator=5;
                        printQty=printQty;

                    }

                }





            }
        }



        if (discountLabelIndicator==3) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("     SENIOR CITIZEN DISCOUNT    " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==4) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("           PWD DISCOUNT         " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



        }
        if (discountLabelIndicator==5) {


            if (vatIndicator.getVatIndicator()==1){
                buffer.append("             DIPLOMAT           " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==2){

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("         REGULAR DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



            RegDiscComputation=1;
        }
        if (discountLabelIndicator==6){


            if (vatIndicator.getVatIndicator()==1){

                buffer.append("       SOLO-PARENT DISCOUNT     " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }
        if (discountLabelIndicator==7){

            if (vatIndicator.getVatIndicator()==1){

                buffer.append("         ATHLETE DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }



        //  try {


        SQLiteDatabase posAndroid = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);

        while (item1.moveToNext()) {

            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1.getString(0) + "'and OrderID='" + item1.getString(1) + "'", null);
            Double PricePerItem = Double.valueOf(item1.getString(5));
            Double PriceOfItem = Double.valueOf(item1.getString(4));
            Subtotal += PricePerItem;


            Cursor VatCursor = posAndroid.rawQuery("select * from ITEM where ItemID='" + item1.getString(1) + "'", null);
            if (VatCursor.getCount()!=0){
                while (VatCursor.moveToNext()){
                    if (VatCursor.getString(9)==("") || VatCursor.getString(15).equals(null)||VatCursor.getString(15).equals("null") ){
                        ItemBarcode="";
                    }
                    else {
                        ItemBarcode=VatCursor.getString(9);
                    }


                    if (VatCursor.getString(15).trim()==("")|| VatCursor.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursor.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursor.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }



                }
            }
            else{


                Cursor VatCursorReserve = posAndroid.rawQuery("select * from ITEM_RESERVE where ItemID='" + item1.getString(1) + "'", null);
                while (VatCursorReserve.moveToNext()){
                    if (VatCursorReserve.getString(9)==("") || VatCursorReserve.getString(15).equals(null) || VatCursorReserve.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursorReserve.getString(0);

                    }


                    if (VatCursorReserve.getString(15).trim()==("")|| VatCursorReserve.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }

            int ItemCount = Integer.parseInt(item1.getString(3));
            for(int kpCount = 0;kpCount<ItemCount;kpCount++){

                arraylist_kitchenPrinterItemID.add(item1.getString(1));
                arraylist_kitchenPrinterItem.add(item1.getString(2)); //
                arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3))); //
                //  arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3)));

            }
            arraylist_orderSummaryItemID.add(item1.getString(1));
            arraylist_orderSummaryItem.add(item1.getString(2));
            arraylist_orderSummaryItemQty.add(Integer.parseInt(item1.getString(3)));


            buffer.append(((item1.getString(2) + "                              ").substring(0, 30) + "\r\n" ));
            buffer.append(ItemBarcode+"\n");
            buffer.append(
                    (("      x" + item1.getString(3) + "            ").substring(0, 10))
                            + (String.format("%7.2f", PriceOfItem) + "           ").substring(0, 11) +
                            (String.format("%7.2f", PricePerItem) + " " +VatIndicator + "               ").substring(0, 15) +"" + "\n");


            if (discountFormat==1) {
                if (item2.getCount()!=0){


                    while (item2.moveToNext()) {

                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
                        //  buffer.append((((item2.getString(8) + "     ").substring(0, 6) + "x" + item2.getString(10)) + "                    ").substring(0, 25) + "-" + format.format(PricePerItemDiscount) + "\n");
                        //  buffer.append((((item2.getString(8) + "                ").substring(0, 16) + "x" + item2.getString(10)) + "    ").substring(0, 4) + "-" + format.format(PricePerItemDiscount) + "\n");
                        buffer.append((""+ item2.getString(8) + ""+"                               ").substring(0,31) + "\n" + ("                        ").substring(0, 21) +   (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n" );

                        if (!item2.getString(13).trim().equals("-0.00")){
                            Log.e("LESS VAT FINAL",item2.getString(13).trim());
                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(Double.parseDouble(item2.getString(13))))+"           ").substring(0,11) +"\n");
                        }
                        totalDiscount+=PricePerItemDiscount;
                    }



                }
            }

        }

        item1.close();



        if (discountFormat==2) {

            buffer.append("--------------------------------"+ "\n");
            buffer.append(("    SUB-TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getTotalAmountToPay()))+"           ").substring(0,11)+"\n");


            item2 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
            if(item2.getCount()!=0){
                item2.moveToNext();

                Log.e("DISTINCT", item2.getString(0));


                Cursor item3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty) from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='" + item2.getString(0) + "'", null);
                Double PricePerItemDiscount = 0.00;
                item3.moveToNext();

                PricePerItemDiscount += Double.valueOf(item3.getString(0));
                buffer.append((("" +( item2.getString(0) + "(" + item3.getString(1)) + ")") + "                                ").substring(0, 31) + (String.format("%7.2f", PricePerItemDiscount * -1) + "           ").substring(0, 11) + "\n");


                if (cashier_payment_item.getLessVat()!=0.00){
                    buffer.append(("LESS-VAT"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getLessVat()*-1))+"           ").substring(0,11) +"\n");
                }

            }





        }




        //buffer.append(("  Service Charges" +"                        ").substring(0,31) + (String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n");

        buffer.append("--------------------------------"+ "\n");

        buffer.append(("TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getTotalDueAmount())+"           ").substring(0,11) +  "\n");
        buffer.append((typeOfPayment+"                               ").substring(0,21) + (String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n\n" );
//        buffer.append(("             CASH"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n");

        buffer.append("--------------------------------"+ "\n");


        //buffer.append(("           CHANGE"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Change))+"          ").substring(0,11) + "\n\n");
        //    buffer.append(("  Service Charges"+"                               ").substring(0,31)+(String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n\n" );



        if (vatIndicator.getVatIndicator()==0){
            buffer.append(("   NVATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("      NVAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append(("NVAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }
        else{
            buffer.append(("    VATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("       VAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append((" VAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        } buffer.append((" Zero-Rated Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(ZeroRatedSales))+"         ").substring(0,11) + "\n\n\n");
        buffer.append("Total Qty:" + TotalItem + "   " +"\n\n\n" );
        buffer.append("--------------------------------"+ "\n");

        buffer.append(("Card No:           ").substring(0, 13) + getMaskedText(bankTransactionVar.getCardNumber()) + "\n");
        buffer.append(("Name:              ").substring(0,13) + bankTransactionVar.getCardOwner() + "\n");
        buffer.append(("Expiry Date:       ").substring(0,13) + bankTransactionVar.getCardExpiry() + "\n");
        buffer.append(("Trace No:          ").substring(0, 13) + bankTransactionVar.getCardApproval() + "\n\n");
        //  buffer.append("--------------------------------"+ "\n");





        if (discountLabelIndicator==3 || discountLabelIndicator==4){
            buffer.append("--------------------------------"+ "\n");
            buffer.append("      DISCOUNT CUSTOMER INFO    "+ "\n");


            SQLiteDatabase PosOutputDB= getActivity().openOrCreateDatabase("PosOutputDB.db",Context.MODE_PRIVATE,null);
            //  Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from InvoiceReceiptItemFinalWDiscountTemp", null);
            // Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from DiscountInfoTbl where TransactionID='"+or_trans_item.getTransactionNo()+"'" and, null);

            Cursor getCustInfo = PosOutputDB.rawQuery("SELECT DISTINCT DiscBuyerName, DiscIdNumber, DiscOther FROM DiscountInfoTbl WHERE TransactionID='" +readRefNumber+"' AND DiscBuyerName IS NOT NULL AND DiscBuyerName != ''",null);
            int idCount=1;
            if (getCustInfo.getCount()!=0){
                while (getCustInfo.moveToNext()){
                    buffer.append("--------------------------------"+ "\n");
                    buffer.append("ID # : " + String.valueOf(idCount) + "\n");
//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//
//
//                    buffer.append("Customer Tin : "+ getCustInfo.getString(2) +"\n");

//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//
//                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
                    if(discCategory.equalsIgnoreCase("SCD")){
                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else if(discCategory.equalsIgnoreCase("PWD")){
                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else{
                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");

                    }

                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("--------------------------------"+ "\n");

                    idCount++;

                }
            }
            else{
                buffer.append("--------------------------------"+ "\n");
                buffer.append("--------------------------------"+ "\n");
            }
            PosOutputDB.close();
//            buffer.append("--------------------------------"+ "\n\n");
        }
        buffer.append("         CUSTOMER INFO          "+ "\n");
        buffer.append("--------------------------------"+ "\n");


        buffer.append("Customer Name: "+ addedCustomerName +"\n");
        buffer.append("Address: "+ addedCustomerAddress +"\n");
        buffer.append("Customer Tin : "+ addedCustomerTin +"\n\n");
        buffer.append("SIGN:___________________________"+ "\n");
        buffer.append("--------------------------------"+ "\n\n");
        buffer.append(HeaderFooterClass.getFooterText()+ "\n");






        SQLiteDatabase headerQty = this.getContext().openOrCreateDatabase("PosSettings.db", android.content.Context.MODE_PRIVATE, null);
        itemListC = headerQty.rawQuery("select count(HeaderID) from receiptHeader", null);
        if (itemListC.getCount()!=0){
            itemListC.moveToFirst();
            HeaderQuantity = itemListC.getInt(0);
        }



        Intent intent = new Intent("android.intent.action.CASHBOX");
        intent.putExtra("cashbox_open", true);






        //mmOutputStream.write(buffer.toString().getBytes());// for bt printing
        printData=buffer.toString();


        //JMPrinter(printData); // for jolimark
        PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity,1);
        //  printPreview(printData,printQty,HeaderQuantity);

        StringBuffer bufferOrderSummary = new StringBuffer();
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("          ORDER SUMMARY\n");
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
        bufferOrderSummary.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
        for (int x = 1; x <= arraylist_orderSummaryItem.size(); x++) {

            bufferOrderSummary.append(arraylist_orderSummaryItem.get(x - 1).toString() + "   x"+arraylist_orderSummaryItemQty.get(x-1)+"\n");
            bufferOrderSummary.append(arraylist_orderSummaryItemID.get(x - 1).toString() + "\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }

        PrinterSettings.OnlinePrinter(bufferOrderSummary.toString(), 1, 0, 3);


        if (kitchPrint==1) {

            StringBuffer bufferkitch = new StringBuffer();
            for (int x = 1; x <= arraylist_kitchenPrinterItemID.size(); x++) {
                bufferkitch.delete(0, bufferkitch.length());
                bufferkitch.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
                bufferkitch.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
                bufferkitch.append("ITEM OF " + String.valueOf(x) + " OUT OF " + arraylist_kitchenPrinterItemID.size() + "\n");
                bufferkitch.append("_____________________________________\n");

                bufferkitch.append(arraylist_kitchenPrinterItem.get(x - 1).toString() + "\n");
                bufferkitch.append(arraylist_kitchenPrinterItemID.get(x - 1).toString() + "\n");
                bufferkitch.append("*************************************\n\n");

                Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

                PrinterSettings.OnlinePrinter(bufferkitch.toString(), 1, 0, 2);

                // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // Handle the exception, e.g., by logging it or taking appropriate action.
                }
            }

        }






        headerQty.close();


        //   stream.write(buffer.toString().getBytes());

        create_journal_entry createJournal = new create_journal_entry();
        createJournal.setPrintData(printData);
        createJournal.setTransNumber(or_trans_item.getTransactionNo());
        createJournal.journalEntry(createJournal.getPrintData(),createJournal.getTransNumber(),FinalDate);
        // createJournal.callJournalEntry(getContext().getApplicationContext(),printData,or_trans_item.getTransactionNo());


        //   File file = new File(receiptFile, dateForJournal+or_trans_item.getTransactionNo());


        // stream.write(buffer.toString().getBytes());

//



        //









        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());





        boolean isInserted = databaseHandler.insertFinalTransactionReportDB(

//                or_trans_item.getTransactionNo(),
//                or_trans_item.getOfficialReceiptNo(),
//                String.valueOf(cashier_payment_item.getTotalDueAmount()),
//                String.valueOf(totalDiscount),
//                String.valueOf(Double.parseDouble(VatableSales)),
//                String.valueOf(Double.parseDouble(VatAmount)),
//                String.valueOf( cashier_payment_item.getVatExemptSale()),
//                String.valueOf(Double.parseDouble(ZeroRatedSales)),
//                String.valueOf(cashier_payment_item.getLessVat()),
//                String.valueOf(cashier_payment_item.getServiceCharge()),
//                shift_active.getActiveUserName(),
//                shift_active.getActiveUserID(),
//                FinalDate,
//                timeOnly.format(currentDate.getTime()),
//                shift_active.getShiftActive()
                or_trans_item.getTransactionNo(),
                or_trans_item.getOfficialReceiptNo(),
                String.format("%7.2f",cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",totalDiscount),
                String.format("%7.2f",Double.parseDouble(VatableSales)),
                String.format("%7.2f",Double.parseDouble(VatAmount)),
                String.format("%7.2f",cashier_payment_item.getVatExemptSale()),
                //String.valueOf( cashier_payment_item.getVatExemptSale()),
                String.format("%7.2f",Double.parseDouble(ZeroRatedSales)),
                String.format("%7.2f",cashier_payment_item.getLessVat()),
                String.format("%7.2f",cashier_payment_item.getServiceCharge()),
                shift_active.getActiveUserName(),
                shift_active.getActiveUserID(),
                FinalDate,
                timeOnly.format(currentDate.getTime()),
                shift_active.getShiftActive(),
                String.format("%7.2f",FinalSalesOverrun)





        );


        bankTransactionVar.setTransNum(FinaltransactionNumber);
        bankTransactionVar.setORNum(FinalORNumber);
        bankTransactionVar.setTransDate(FinalDate);
        bankTransactionVar.setTransTime(timeOnly.format(currentDate.getTime()));
        bankTransactionVar.setUser(shift_active.getActiveUserName());
        Log.e("Bank Transaction",FinaltransactionNumber + "  " + FinalORNumber + "  ");
        insertBankTransactionTemp(getActivity());

        insertReturnExchangeFinal(FinaltransactionNumber,FinalORNumber);
        db2.close();


    }
    private void createTextfileOtherPayment() {


        arraylist_kitchenPrinterItem.clear();
        arraylist_kitchenPrinterItemID.clear();

//        try {


        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor item1B = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor itemTotal = db2.rawQuery("select sum(OrderQty) from InvoiceReceiptItem", null);
        Double change = Double.valueOf(et_cash.getText().toString()) - Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        Double CashDouble = Double.valueOf(et_cash.getText().toString());
        String Cash = format.format(CashDouble);

        String TotalAmount = lbl_due.getText().toString();
        Double Subtotal = 0.00;
        String Change = format.format(change);
        String ServiceCharge = "0.00";
        String VatableCharges = "0.00";
        String VatableSales = lbl_subtotal.getText().toString();
        Double totalDiscount = 0.00;
        int RegDiscComputation=0;
        Double FinalVatSalesWRegDisc=0.00;
        Double FinalVatAmtWRegDisc=0.00;

        String VatAmount = lbl_tax.getText().toString();
        String VatExemptSale = "0.00";
        String ZeroRatedSales = tv_zeroRatedSales.getText().toString();
        itemTotal.moveToFirst();
        String TotalItem = String.valueOf(itemTotal.getString(0));
//            cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());


//            cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        or_trans_item.readReferenceNumber(getContext());
        shift_active shift_active = new shift_active();
        shift_active.getShiftingTable(getContext());
        shift_active.getAccountInfo(getContext());
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate = SysDate.getSystemDate();
        Header_Footer_class HeaderFooterClass = new Header_Footer_class();
        HeaderFooterClass.HeaderNote(getContext());
        HeaderFooterClass.FooterNote(getContext());



        StringBuffer buffer = new StringBuffer();


        //==============for Transaction Counter===================================================

        int modx=Integer.parseInt(or_trans_item.getTransactionNo());
        Log.e("modx",String.valueOf(modx));
        int mody=999999999;
        int resetCount = modx/mody;
        Log.e("resetCt",String.valueOf(modx/mody));
        String formattedCtr = String.format("%02d", resetCount);
        String formattedTrans =  String.valueOf(modx % mody);
        String transactionNumberTemp=formattedTrans;
        String FinaltransactionNumber =String.format("%010d",Integer.parseInt(transactionNumberTemp));

        //=========================================================================================

        //==============for  OR Transaction Counter===================================================

        int modxOR=Integer.parseInt(or_trans_item.getOfficialReceiptNo() );
        Log.e("modx",String.valueOf(modx));
        int modyOR=999999999;
        int resetCountOR = modxOR/modyOR;
        Log.e("resetCt",String.valueOf(modxOR/modyOR));
        String formattedCtrOR = String.format("%02d", resetCountOR);
        String formattedOR =  String.valueOf(modxOR % modyOR);
        String ORNumber=formattedOR;
        String FinalORNumber =String.format("%010d",Integer.parseInt(ORNumber));

        //=========================================================================================



////            system_final_date sysDate= new system_final_date();
////            String FinalDate = sysDate.getSystemDate();
//            File eJournal=new File(Environment.getExternalStorageDirectory()+"/ANDROID_POS/EJournal/");
//            String dateForJournal = FinalDate.replace("/","");
//            File file = new File(eJournal, dateForJournal+or_trans_item.getTransactionNo()+".txt");
//            FileOutputStream stream = new FileOutputStream(file);



        buffer.append(HeaderFooterClass.getHeaderText());
        buffer.append(businessType.getBusiness_mode() + "\n");
        checkReferenceSI();
        if (!ReferenceSI.equals("")){
            buffer.append("Reference SI No.: " + ReferenceSI+ "\n");
        }
        buffer.append(businessType.getReceipt_type()+"#:" + ""+formattedCtrOR+"-" + FinalORNumber +"\n"  + "TRANS#: "+""+formattedCtr+"-" +FinaltransactionNumber + "\n");
        buffer.append("CASHIER: " + shift_active.getActiveUserID() + " " + shift_active.getActiveUserName().toUpperCase(Locale.ROOT) + "\n" +  "SHIFT: " +shift_active.getShiftActive() +"\t");
        buffer.append("POS: " + shift_active.getPOSCounter() + "\t" +"\n"+ convertdate(FinalDate) + "\t" + timeOnly.format(currentDate.getTime()) + "\n");
        buffer.append("--------------------------------" + "\n");



//            Cursor checkDiscountTypeSCD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='SCD'", null);
//            Cursor checkDiscountTypePWD = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='PWD'", null);
//            Cursor checkDiscountTypeDIP = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='DIPLOMAT'", null);
//            Cursor checkDiscountTypeREG = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where DiscountType!='SCD' and DiscountType!='PWD' and DiscountType!='DIPLOMAT'", null);
//
//            if (checkDiscountTypeSCD.getCount()!=0){
//                discountLabelIndicator=3;
//            }
//            if (checkDiscountTypePWD.getCount()!=0){
//                discountLabelIndicator=4;
//            }
//            if (checkDiscountTypeDIP.getCount()!=0){
//                discountLabelIndicator=5;
//            }
//            if (checkDiscountTypeREG.getCount()!=0){
//                discountLabelIndicator=2;
//            }

        String discType="";
        SQLiteDatabase db1 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        Cursor checkAllDiscType=db2.rawQuery("select DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (checkAllDiscType.getCount()!=0){
            while(checkAllDiscType.moveToNext()){

                discountType=checkAllDiscType.getString(0);
                if (!discountType.equals("DIPLOMAT")){

                    Cursor checkDiscCategory=db1.rawQuery("select DiscCategory,ReceiptOption from DiscountList where DiscountName='"+discountType+"' ", null);
                    if (checkDiscCategory.moveToNext()){
                        discCategory=checkDiscCategory.getString(0);


                        if (discCategory.equals("SCD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypeSCD",discType);
                            discountLabelIndicator=3;

                        }

                        if (discCategory.equals("PWD")){

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctypePWD",discType);
                            discountLabelIndicator=4;

                        }

//                        if (discCategory.equals("REG"))
//                        {
//
//                            discType= checkAllDiscType.getString(0);
//                            discType = discType.substring(0,3);
//                            Log.e("disctype",discType);
//                            discountLabelIndicator=2;
//
//                        }

                        if (discCategory.equals("REG")) {

                            discType= checkAllDiscType.getString(0);
                            discType = discType.substring(0,3);
                            Log.e("disctype final",discType);

                            if (discType.equals("SOL")){
                                Log.e("soloparent",discType);
                                discountLabelIndicator=6;
                            }
                            if (discType.equals("ATH")){
                                Log.e("athletedisc",discType);
                                discountLabelIndicator=7;
                            }
//                            else{
//                                discountLabelIndicator=2;
//                            }



                        }
//
//                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
//                            printQty=1;
//                        }
//                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
//                            printQty=2;
//                        }

                        if(checkDiscCategory.getString(1).equalsIgnoreCase("SINGLE RECEIPT")){
                            printQty=printQty*1;
                        }
                        else     if(checkDiscCategory.getString(1).equalsIgnoreCase("DOUBLE RECEIPT")){
                            printQty=printQty*2;
                        }

                    }

                }
                else{
                    if (discountType.equals("DIPLOMAT")){

                        discType= checkAllDiscType.getString(0);
                        discType = discType.substring(0,3);
                        Log.e("disctypeDIP",discType);
                        discountLabelIndicator=5;
                        printQty=printQty;

                    }

                }





            }
        }



        if (discountLabelIndicator==3) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("     SENIOR CITIZEN DISCOUNT    " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==4) {

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("           PWD DISCOUNT         " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



        }
        if (discountLabelIndicator==5) {


            if (vatIndicator.getVatIndicator()==1){
                buffer.append("             DIPLOMAT           " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }

        }
        if (discountLabelIndicator==2){

            if (vatIndicator.getVatIndicator()==1){
                buffer.append("         REGULAR DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }



            RegDiscComputation=1;
        }
        if (discountLabelIndicator==6){


            if (vatIndicator.getVatIndicator()==1){

                buffer.append("       SOLO-PARENT DISCOUNT     " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }
        if (discountLabelIndicator==7){

            if (vatIndicator.getVatIndicator()==1){

                buffer.append("         ATHLETE DISCOUNT       " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }
            else{
                buffer.append("            DISCOUNT            " + "\n");
                buffer.append("--------------------------------" + "\n\n");
            }


            RegDiscComputation=1;
        }


        //  try {


        SQLiteDatabase posAndroid = getActivity().openOrCreateDatabase("POSAndroidDB.db", Context.MODE_PRIVATE, null);

        while (item1.moveToNext()) {

            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1.getString(0) + "'and OrderID='" + item1.getString(1) + "'", null);
            Double PricePerItem = Double.valueOf(item1.getString(5));
            Double PriceOfItem = Double.valueOf(item1.getString(4));
            Subtotal += PricePerItem;


            Cursor VatCursor = posAndroid.rawQuery("select * from ITEM where ItemID='" + item1.getString(1) + "'", null);
            if (VatCursor.getCount()!=0){
                while (VatCursor.moveToNext()){
                    if (VatCursor.getString(9)==("") || VatCursor.getString(15).equals(null)||VatCursor.getString(15).equals("null") ){
                        ItemBarcode="";
                    }
                    else {
                        ItemBarcode=VatCursor.getString(9);
                    }


                    if (VatCursor.getString(15).trim()==("")|| VatCursor.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursor.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursor.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }
            else{


                Cursor VatCursorReserve = posAndroid.rawQuery("select * from ITEM_RESERVE where ItemID='" + item1.getString(1) + "'", null);
                while (VatCursorReserve.moveToNext()){
                    if (VatCursorReserve.getString(9)==("") || VatCursorReserve.getString(15).equals(null) || VatCursorReserve.getString(15).equals("null")){
                        ItemBarcode="";
                    }
                    else {

                        //ItemBarcode=VatCursor.getString(9);

                        ItemBarcode=VatCursorReserve.getString(0);

                    }


                    if (VatCursorReserve.getString(15).trim()==("")|| VatCursorReserve.getString(15).trim()==(null)){
                        VatIndicator="V";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("Non-VATable")){
                        VatIndicator="NV";
                    }
                    else if(VatCursorReserve.getString(15).trim().equals("VATable")){
                        VatIndicator="V";
                    }
//                    else{
//                        VatIndicator="NV";
//                    }





                }
            }


            int ItemCount = Integer.parseInt(item1.getString(3));
            for(int kpCount = 0;kpCount<ItemCount;kpCount++){

                arraylist_kitchenPrinterItemID.add(item1.getString(1));
                arraylist_kitchenPrinterItem.add(item1.getString(2)); //
                arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3))); //
                //  arraylist_kitchenPrinterItemQty.add(Integer.parseInt(item1.getString(3)));

            }
            arraylist_orderSummaryItemID.add(item1.getString(1));
            arraylist_orderSummaryItem.add(item1.getString(2));
            arraylist_orderSummaryItemQty.add(Integer.parseInt(item1.getString(3)));




            buffer.append(((item1.getString(2) + "                              ").substring(0, 30) + "\r\n" ));

            buffer.append(ItemBarcode+"\n");
            buffer.append(
                    (("      x" + item1.getString(3) + "            ").substring(0, 10))
                            + (String.format("%7.2f", PriceOfItem) + "           ").substring(0, 11) +
                            (String.format("%7.2f", PricePerItem) + " " +VatIndicator + "               ").substring(0, 15) +"" + "\n");


            if (discountFormat==1) {
                if (item2.getCount()!=0){




                    while (item2.moveToNext()) {

                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
                        //  buffer.append((((item2.getString(8) + "     ").substring(0, 6) + "x" + item2.getString(10)) + "                    ").substring(0, 25) + "-" + format.format(PricePerItemDiscount) + "\n");
                        //  buffer.append((((item2.getString(8) + "                ").substring(0, 16) + "x" + item2.getString(10)) + "    ").substring(0, 4) + "-" + format.format(PricePerItemDiscount) + "\n");
                        buffer.append((""+ item2.getString(8) + ""+"                               ").substring(0,31) + "\n" + ("                        ").substring(0, 21) +   (String.format("%7.2f", PricePerItemDiscount) + "           ").substring(0, 11) + "\n" );

                        if (!item2.getString(13).trim().equals("-0.00")){
                            Log.e("LESS VAT FINAL",item2.getString(13).trim());
                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(Double.parseDouble(item2.getString(13))))+"           ").substring(0,11) +"\n");
                        }
                        totalDiscount+=PricePerItemDiscount;
                    }




//                    while (item2.moveToNext()) {
//                        Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
//                        //  buffer.append((((item2.getString(8) + "     ").substring(0, 6) + "x" + item2.getString(10)) + "                    ").substring(0, 25) + "-" + format.format(PricePerItemDiscount) + "\n");
//                        //  buffer.append((((item2.getString(8) + "                ").substring(0, 16) + "x" + item2.getString(10)) + "    ").substring(0, 4) + "-" + format.format(PricePerItemDiscount) + "\n");
//                        buffer.append((""+ item2.getString(8) + ""+"                    ").substring(0,20) + ("              ").substring(0, 11) +   (String.format("%7.2f", PricePerItemDiscount*-1) + "           ").substring(0, 11) + "\n" );
//
//                        if (cashier_payment_item.getLessVat()!=0.00){
//                            buffer.append(("LESS-VAT"+"                               ").substring(0,31)+(String.format("%7.2f",(cashier_payment_item.getLessVat()*-1))+"           ").substring(0,11) +"\n");
//                        }
//                    }
                }
            }

        }

        item1.close();



        if (discountFormat==2) {

            buffer.append("--------------------------------"+ "\n");
            buffer.append(("    SUB-TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getTotalAmountToPay()))+"           ").substring(0,11)+"\n");

//                        while (item1B.moveToNext()) {
//                            item2 = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1B.getString(0) + "'and OrderID='" + item1B.getString(1) + "'", null);
//                           Cursor item3 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp where TransactionID='" + item1B.getString(0) + "'and OrderID='" + item1B.getString(1) + "'", null);
//
//                            if (item2.getCount() != 0) {
//                                while (item2.moveToNext()) {
////                            if (item2.getString(8).equals("scd")) {
//                                    Double PricePerItemDiscount = Double.valueOf(item2.getString(11));
//                                    buffer.append((("        " + (item2.getString(12) + "% " + item2.getString(8) + "(" + item2.getString(10)) + ")") + "                                ").substring(0, 31) + (String.format("%7.2f", PricePerItemDiscount * -1) + "           ").substring(0, 11) + "\n");
//                                    totalDiscount += PricePerItemDiscount;
////                            }
//                                }
//                            }
//                        }
            //  while (item1B.moveToNext()) {
            item2 = db2.rawQuery("select DISTINCT DiscountType from InvoiceReceiptItemFinalWDiscountTemp", null);
            if(item2.getCount()!=0){
                item2.moveToNext();

                Log.e("DISTINCT", item2.getString(0));


                Cursor item3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty) from InvoiceReceiptItemFinalWDiscountTemp where DiscountType='" + item2.getString(0) + "'", null);
                Double PricePerItemDiscount = 0.00;
                item3.moveToNext();

//                                    if (item3.getCount() != 0) {
//                                        while (item3.moveToNext()) {
////                            if (item2.getString(8).equals("scd")) {
                PricePerItemDiscount += Double.valueOf(item3.getString(0));
                buffer.append((("" +( item2.getString(0) + "(" + item3.getString(1)) + ")") + "                                ").substring(0, 31) + (String.format("%7.2f", PricePerItemDiscount * -1) + "           ").substring(0, 11) + "\n");
//                                            totalDiscount += PricePerItemDiscount;
////                            }
//                                        }
//                                    }

                if (cashier_payment_item.getLessVat()!=0.00){
                    buffer.append(("LESS-VAT"+"                               ").substring(0,21)+(String.format("%7.2f",(cashier_payment_item.getLessVat()*-1))+"           ").substring(0,11) +"\n");
                }

            }


            // }


        }




        //buffer.append(("  Service Charges" +"                        ").substring(0,31) + (String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n");

        buffer.append("--------------------------------"+ "\n");

        buffer.append(("TOTAL"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getTotalDueAmount())+"           ").substring(0,11) +  "\n");
        buffer.append((typeOfPayment+"                               ").substring(0,21) + (String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n\n" );

        if (changeType==1){
            buffer.append(("UNCLAIMED AMOUNT"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Change))+"          ").substring(0,11) + "\n\n");
            FinalSalesOverrun = Double.parseDouble(Change);
        }
        if (changeType==2){
            buffer.append(("             CASH"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Cash))+"           ").substring(0,11) + "\n");

        }
        buffer.append("Reference #: " + otherPaymentReference+ "\n" );


        buffer.append("--------------------------------"+ "\n");


        //buffer.append(("           CHANGE"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(Change))+"          ").substring(0,11) + "\n\n");
        //    buffer.append(("  Service Charges"+"                               ").substring(0,31)+(String.format("%7.2f",cashier_payment_item.getServiceCharge())+"           ").substring(0,11) + "\n\n" );



        if (vatIndicator.getVatIndicator()==0){
            buffer.append(("   NVATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("      NVAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append(("NVAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }
        else{
            buffer.append(("    VATable Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatableSales))+"           ").substring(0,11)+ "\n" );
            buffer.append(("       VAT Amount"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(VatAmount))+"              ").substring(0,11)+ "\n" );
            buffer.append((" VAT Exempt Sales"+"                               ").substring(0,21)+(String.format("%7.2f",cashier_payment_item.getVatExemptSale())+"          ").substring(0,11)+ "\n" );

        }  buffer.append((" Zero-Rated Sales"+"                               ").substring(0,21)+(String.format("%7.2f",Double.parseDouble(ZeroRatedSales))+"         ").substring(0,11) + "\n\n\n");
        buffer.append("Total Qty:" + TotalItem + "   " +"\n\n\n" );
//        buffer.append("--------------------------------"+ "\n");

//        buffer.append(("Card No:           ").substring(0,13) + bankTransactionVar.getCardNumber() + "\n");
//        buffer.append(("Name:              ").substring(0,13) + bankTransactionVar.getCardOwner() + "\n");
//        buffer.append(("Expiry Date:       ").substring(0,13) + bankTransactionVar.getCardExpiry() + "\n");
//        buffer.append(("Approval No:       ").substring(0,13) + bankTransactionVar.getCardApproval() + "\n");
//        buffer.append("--------------------------------"+ "\n");





        if (discountLabelIndicator==3 || discountLabelIndicator==4){
            buffer.append("--------------------------------"+ "\n");
            buffer.append("      DISCOUNT CUSTOMER INFO    "+ "\n");


            SQLiteDatabase PosOutputDB= getActivity().openOrCreateDatabase("PosOutputDB.db",Context.MODE_PRIVATE,null);
            //  Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from InvoiceReceiptItemFinalWDiscountTemp", null);
            // Cursor getCustInfo = PosOutputDB.rawQuery("select DISTINCT DiscBuyerName,DiscIdNumber,DiscOther from DiscountInfoTbl where TransactionID='"+or_trans_item.getTransactionNo()+"'" and, null);

            Cursor getCustInfo = PosOutputDB.rawQuery("SELECT DISTINCT DiscBuyerName, DiscIdNumber, DiscOther FROM DiscountInfoTbl WHERE TransactionID='" +readRefNumber+"' AND DiscBuyerName IS NOT NULL AND DiscBuyerName != ''",null);
            int idCount=1;
            if (getCustInfo.getCount()!=0){
                while (getCustInfo.moveToNext()){
                    buffer.append("--------------------------------"+ "\n");
                    buffer.append("ID # : " + String.valueOf(idCount) + "\n");
//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//                    }
//
//
//                    buffer.append("Customer Tin : "+ getCustInfo.getString(2) +"\n");

//                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
//                    if(discCategory.equalsIgnoreCase("SCD")){
//                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else if(discCategory.equalsIgnoreCase("PWD")){
//                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//                    else{
//                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");
//
//                    }
//
//                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("Customer Name: "+ getCustInfo.getString(0) +"\n");
                    if(discCategory.equalsIgnoreCase("SCD")){
                        buffer.append("OSCA ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else if(discCategory.equalsIgnoreCase("PWD")){
                        buffer.append("PWD ID No: "+ getCustInfo.getString(1) +"\n");

                    }
                    else{
                        buffer.append("ID No: "+ getCustInfo.getString(1) +"\n");

                    }

                    buffer.append("ISSUED BY : "+ getCustInfo.getString(2) +"\n");
                    buffer.append("--------------------------------"+ "\n");

                    idCount++;

                }
            }
            else{
                buffer.append("--------------------------------"+ "\n");
                buffer.append("--------------------------------"+ "\n");
            }
            PosOutputDB.close();
//            buffer.append("--------------------------------"+ "\n\n");
        }
        buffer.append("         CUSTOMER INFO          "+ "\n");
        buffer.append("--------------------------------"+ "\n");


        buffer.append("Customer Name: "+ addedCustomerName +"\n");
        buffer.append("Address: "+ addedCustomerAddress +"\n");
        buffer.append("Customer Tin : "+ addedCustomerTin +"\n");
        buffer.append("SIGN:___________________________"+ "\n");
        buffer.append("--------------------------------"+ "\n\n");
        buffer.append(HeaderFooterClass.getFooterText()+ "\n");










        SQLiteDatabase headerQty = this.getContext().openOrCreateDatabase("PosSettings.db", android.content.Context.MODE_PRIVATE, null);
        itemListC = headerQty.rawQuery("select count(HeaderID) from receiptHeader", null);
        if (itemListC.getCount()!=0){
            itemListC.moveToFirst();
            HeaderQuantity = itemListC.getInt(0);
        }







        //mmOutputStream.write(buffer.toString().getBytes());// for bt printing
        printData=buffer.toString();

        Intent intent = new Intent("android.intent.action.CASHBOX");
        intent.putExtra("cashbox_open", true);


        //JMPrinter(printData); // for jolimark
        PrinterSettings.OnlinePrinter(printData,printQty,HeaderQuantity,1);



        StringBuffer bufferOrderSummary = new StringBuffer();
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("          ORDER SUMMARY\n");
        bufferOrderSummary.append("_____________________________________\n");
        bufferOrderSummary.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
        bufferOrderSummary.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
        for (int x = 1; x <= arraylist_orderSummaryItem.size(); x++) {

            bufferOrderSummary.append(arraylist_orderSummaryItem.get(x - 1).toString() + "   x"+arraylist_orderSummaryItemQty.get(x-1)+"\n");
            bufferOrderSummary.append(arraylist_orderSummaryItemID.get(x - 1).toString() + "\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }

        PrinterSettings.OnlinePrinter(bufferOrderSummary.toString(), 1, 0, 3);



        StringBuffer bufferkitch = new StringBuffer();
        for (int x = 1; x <= arraylist_kitchenPrinterItemID.size(); x++) {
            bufferkitch.delete(0, bufferkitch.length());
            bufferkitch.append("Reference # :" + formattedCtrOR + "-" + FinalORNumber + "\n");
            bufferkitch.append("TRANS#: " + "" + formattedCtr + "-" + FinaltransactionNumber + "\n");
            bufferkitch.append("ITEM OF " + String.valueOf(x) + " OUT OF " + arraylist_kitchenPrinterItemID.size() + "\n");
            bufferkitch.append("_____________________________________\n");

            bufferkitch.append(arraylist_kitchenPrinterItem.get(x - 1).toString() + "\n");
            bufferkitch.append(arraylist_kitchenPrinterItemID.get(x - 1).toString() + "\n");
            bufferkitch.append("*************************************\n\n");

            Log.e("Kitchen Printer", "counter print :" + String.valueOf(x));

            PrinterSettings.OnlinePrinter(bufferkitch.toString(), 1, 0, 2);

            // Introduce a pause of 2 seconds (2000 milliseconds) before the next iteration
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // Handle the exception, e.g., by logging it or taking appropriate action.
            }
        }






        // printPreview(printData,printQty,HeaderQuantity);

        headerQty.close();


        //   stream.write(buffer.toString().getBytes());

        create_journal_entry createJournal = new create_journal_entry();
        createJournal.setPrintData(printData);
        createJournal.setTransNumber(or_trans_item.getTransactionNo());
        createJournal.journalEntry(createJournal.getPrintData(),createJournal.getTransNumber(),FinalDate);
        // createJournal.callJournalEntry(getContext().getApplicationContext(),printData,or_trans_item.getTransactionNo());


        //   File file = new File(receiptFile, dateForJournal+or_trans_item.getTransactionNo());


        // stream.write(buffer.toString().getBytes());

//



        //









        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());





        boolean isInserted = databaseHandler.insertFinalTransactionReportDB(

//                or_trans_item.getTransactionNo(),
//                or_trans_item.getOfficialReceiptNo(),
//                String.valueOf(cashier_payment_item.getTotalDueAmount()),
//                String.valueOf(totalDiscount),
//                String.valueOf(Double.parseDouble(VatableSales)),
//                String.valueOf(Double.parseDouble(VatAmount)),
//                String.valueOf( cashier_payment_item.getVatExemptSale()),
//                String.valueOf(Double.parseDouble(ZeroRatedSales)),
//                String.valueOf(cashier_payment_item.getLessVat()),
//                String.valueOf(cashier_payment_item.getServiceCharge()),
//                shift_active.getActiveUserName(),
//                shift_active.getActiveUserID(),
//                FinalDate,
//                timeOnly.format(currentDate.getTime()),
//                shift_active.getShiftActive()


                or_trans_item.getTransactionNo(),
                or_trans_item.getOfficialReceiptNo(),
                String.format("%7.2f",cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",totalDiscount),
                String.format("%7.2f",Double.parseDouble(VatableSales)),
                String.format("%7.2f",Double.parseDouble(VatAmount)),
                String.format("%7.2f",cashier_payment_item.getVatExemptSale()),
                //String.valueOf( cashier_payment_item.getVatExemptSale()),
                String.format("%7.2f",Double.parseDouble(ZeroRatedSales)),
                String.format("%7.2f",cashier_payment_item.getLessVat()),
                String.format("%7.2f",cashier_payment_item.getServiceCharge()),
                shift_active.getActiveUserName(),
                shift_active.getActiveUserID(),
                FinalDate,
                timeOnly.format(currentDate.getTime()),
                shift_active.getShiftActive(),
                String.format("%7.2f",FinalSalesOverrun)





        );




        //insert BankTransaction Final


        //
        insertReturnExchangeFinal(FinaltransactionNumber,FinalORNumber);
        db2.close();

    }
    //endregion create print



    private void deleteReturnExchangeTemp(){
        SQLiteDatabase PosOutputDB = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        String InvoiceReturnExchangeTemp= "delete from ReturnExchangeTemp";
        PosOutputDB.execSQL(InvoiceReturnExchangeTemp);
        PosOutputDB.close();
    }
    private void insertReturnExchangeFinal(String NewTransNo,String NewInvNo){


        SQLiteDatabase posoutputdb = this.getContext().openOrCreateDatabase("PosOutputDB.db", android.content.Context.MODE_PRIVATE, null);
        Cursor item2 = posoutputdb.rawQuery("select * from  ReturnExchangeTemp", null);
        String RefTransNo="";
        String RefInvNo="";
        if (item2.moveToFirst()){
            RefTransNo=item2.getString(0);
            RefInvNo= item2.getString(1);
        }

        DatabaseHandler dbhandler = new DatabaseHandler(getActivity());
        dbhandler.insertReturnExchangeFinal(RefTransNo,RefInvNo,NewTransNo,NewInvNo);
        posoutputdb.close();
        deleteReturnExchangeTemp();
    }




    private void printPreview(){


//        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
//        LayoutInflater inflater = getLayoutInflater();
//        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_print_preview, null);
//        builder.setView(alertLayout);
//        AlertDialog alertDialog = builder.create();
        Log.d("PRINT PREVIEW","YES");

        AlertDialog.Builder builder  = new AlertDialog.Builder(this.getContext());
        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_print_preview, null);
        builder.setView(alertLayout);
        alertDialog = builder.create();








        alertDialog.show();


    }


    //============================= END CREATING TEXT FILE========================================





    private void updateReading(){

        SQLiteDatabase db2 = getActivity().openOrCreateDatabase("settings.db", Context.MODE_PRIVATE, null);
        SQLiteDatabase db3 = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        Cursor item2 = db2.rawQuery("select indicatorStatus from ReadingIndicator where indicatorID=1", null);
        if (item2.getCount()==0){
            readingIndicator=1;
            settingsDB settingsDB = new settingsDB(getContext());
            settingsDB.insertReadingStatus();

            Log.e("UpdateReading","readingIndicator=1");




        }
        else{
            item2.moveToFirst();
            readingIndicator = item2.getInt(0);
            Log.e("UpdateReading","readingIndicatorss "+readingIndicator);



        }
        String beginningOR="000000000";
        String beginningBal="000000000";
        String beginningTrans;





        if (readingIndicator==1){ // open for reading balance
            Log.e("UpdateReading","OPEN FOR READING");
            Cursor cursorReadingOR = db3.rawQuery("select * from OfficialReceipt", null);
            Cursor cursorReadingBalance =db3.rawQuery("select sum(OrderPriceTotal) from InvoiceReceiptTotal where typeOfTransaction='invoice'", null);
            Cursor cursorReadingTrans = db3.rawQuery("select TransactionID from InvoiceReceiptTotal", null);


            if (cursorReadingOR.getCount()==0){
                beginningOR=String.format("%010d", 1);;
                //
            }
            else{
                cursorReadingOR.moveToLast();



                int readPK = Integer.parseInt(cursorReadingOR.getString(0));

                int incrementPK = readPK + 1;
                String incrementPKString = String.format("%010d", incrementPK);
                beginningOR=incrementPKString;





            }
            if (cursorReadingTrans.getCount()==0){
//                beginningTrans="000000001";

                int readPK = 1;

                int incrementPK = readPK;
                String incrementPKString = String.format("%010d", incrementPK);

                // readRefNumber = incrementPKString;
                beginningTrans=incrementPKString;


            }
            else{
                cursorReadingTrans.moveToLast();
                // beginningTrans=;
                int readPK = Integer.parseInt(cursorReadingTrans.getString(0));

                int incrementPK = readPK;
                String incrementPKString = String.format("%010d", incrementPK);

                // readRefNumber = incrementPKString;
                beginningTrans=incrementPKString;




            }
            if(cursorReadingBalance.getCount()==0){

                String data="0";
                double dataInt = Double.parseDouble(data);
                //System.out.println();

                beginningBal=String.format("%013.2f", dataInt);



            }
            else{
                while (cursorReadingBalance.moveToNext()){
                    String data=cursorReadingBalance.getString(0);
//                    if (data.equals("") && data.equals(" ") && data.equals(null)){
//                        double dataInt = Double.parseDouble("0");
//                        beginningBal=String.format("%013.2f", dataInt) ;
//                    }
//                    else{
                    try {
                        double dataInt = Double.parseDouble(data);
                        beginningBal = String.format("%013.2f", dataInt);
                    }
                    catch (Exception ex){
                        double dataInt = Double.parseDouble("0");
                        beginningBal=String.format("%013.2f", dataInt) ;
                    }
//                    }

                }



                if (beginningBal=="null"){
                    String data2="0";
                    double dataInt2 = Double.parseDouble(data2);
                    beginningBal=String.format("%013.2f", dataInt2);

                }





            }



//            cursorReadingOR.moveToLast();
            Cursor readingShift = db2.rawQuery("select * from ShiftingTable", null);
            readingShift.moveToFirst();


//            String sql = "UPDATE ReadingTable set " +
//                    "readingBegOR='"+beginningOR+"'," +
//                    "readingStartTrans='"+beginningTrans+"'," +
//                    "readingBegBal='"+beginningBal+"'" +
//                    "where readingID=1";
            //   String sql = "UPDATE ReadingTable set readingBegOR='test1'   where readingID=1";


            String sql = "UPDATE ReadingTable set readingBegOR='"+beginningOR+"',readingStartTrans='"+beginningTrans+"',readingBegBal='"+beginningBal+ "'where readingID=1";
            db2.execSQL(sql);

            String updateStatus = "UPDATE ReadingIndicator set indicatorStatus=0 where indicatorID=1";
            db2.execSQL(updateStatus);
            Log.e("begTrans",beginningTrans);
            Log.e("begOR",beginningOR);
            Log.e("begBal",beginningBal);
            Log.e("READING",readingShift.getString(2));




        }
        else{ //close for reading balance
            Log.e("READING","close");
        }



    }
    private void loadReceiptData(){
        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null);
        Cursor item1 = db2.rawQuery("select * from receiptHeader", null);
        if (item1.getCount()==0){
            // db2.close();
        }else{
            while (item1.moveToNext()){
                HeaderContent=(item1.getString(1));

            }
        }

        Cursor item2 = db2.rawQuery("select * from receiptFooter", null);
        if (item2.getCount()==0){
            // db2.close();
        }else{
            while (item1.moveToNext()){
                FooterContent=(item1.getString(1));

            }
        }



        db2.close();
    }
    //complete transaction transfer to final transaction record
    public void getTransactionRecord(){
        String DB_NAME2 = "PosOutputDB.db";
        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());

        SQLiteDatabase db2 = getContext().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor TransactionRecord = db2.rawQuery("select * from InvoiceReceiptItem", null);
        Cursor TransactionRecordDiscount = db2.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp", null);
        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        if (TransactionRecord.getCount()==0){

        }
        else{
            while (TransactionRecord.moveToNext()){

                cashier_payment_item.setTransactionID(TransactionRecord.getString(0));
                cashier_payment_item.setOrderID( TransactionRecord.getString(1));
                cashier_payment_item.setOrderName (TransactionRecord.getString(2));
                cashier_payment_item.setOrderQty  (TransactionRecord.getString(3));
                cashier_payment_item.setOrderPrice ( TransactionRecord.getString(4));
                cashier_payment_item.setOrderPriceTotal(  TransactionRecord.getString(5));
                cashier_payment_item.setTransactionTime ( TransactionRecord.getString(6));
                cashier_payment_item.setTransactionDate ( TransactionRecord.getString(7));
                cashier_payment_item.setDiscountType ( TransactionRecord.getString(8));
                cashier_payment_item.setItemRemarks ( TransactionRecord.getString(9));

                boolean isInserted = databaseHandler.insertInvoiceReceiptFinal(
                        cashier_payment_item.getTransactionID(),
                        cashier_payment_item.getOrderID(),
                        cashier_payment_item.getOrderName(),
                        cashier_payment_item. getOrderQty(),
                        cashier_payment_item.getOrderPrice(),
                        cashier_payment_item. getOrderPriceTotal(),
                        cashier_payment_item.getTransactionTime(),
                        cashier_payment_item.getTransactionDate(),
                        cashier_payment_item.getDiscountType(),
                        cashier_payment_item.getItemRemarks()


                );


            }

            databaseHandler.deleteInvoiceReceipt();



        }


        if (TransactionRecordDiscount.getCount()==0){

        }
        else{
            while (TransactionRecordDiscount.moveToNext()){

                cashier_payment_item.setTransactionID(TransactionRecordDiscount.getString(0));
                cashier_payment_item.setOrderID( TransactionRecordDiscount.getString(1));
                cashier_payment_item.setOrderName (TransactionRecordDiscount.getString(2));
                cashier_payment_item.setOrderQty  (TransactionRecordDiscount.getString(3));
                cashier_payment_item.setOrderPrice ( TransactionRecordDiscount.getString(4));
                cashier_payment_item.setOrderPriceTotal(  TransactionRecordDiscount.getString(5));
                cashier_payment_item.setTransactionTime ( TransactionRecordDiscount.getString(6));
                cashier_payment_item.setTransactionDate ( TransactionRecordDiscount.getString(7));
                cashier_payment_item.setDiscountType ( TransactionRecordDiscount.getString(8));
                cashier_payment_item.setItemRemarks ( TransactionRecordDiscount.getString(9));
                cashier_payment_item.setDiscQty(TransactionRecordDiscount.getString(10));
                cashier_payment_item.setDiscAmount(TransactionRecordDiscount.getString(11));
                cashier_payment_item.setDiscPercent(TransactionRecordDiscount.getString(12));
                cashier_payment_item.setNegVat(TransactionRecordDiscount.getString(13));
                cashier_payment_item.setDiscBuyerName(TransactionRecordDiscount.getString(14));
                cashier_payment_item.setDiscIdNumber(TransactionRecordDiscount.getString(15));
                cashier_payment_item.setDiscOther(TransactionRecordDiscount.getString(16));

                boolean isInserted = databaseHandler.insertInvoiceReceiptDiscountTempFinal(
                        cashier_payment_item.getTransactionID(),
                        cashier_payment_item.getOrderID(),
                        cashier_payment_item.getOrderName(),
                        cashier_payment_item. getOrderQty(),
                        cashier_payment_item.getOrderPrice(),
                        cashier_payment_item. getOrderPriceTotal(),
                        cashier_payment_item.getTransactionTime(),
                        cashier_payment_item.getTransactionDate(),
                        cashier_payment_item.getDiscountType(),
                        cashier_payment_item.getItemRemarks(),
                        cashier_payment_item.getDiscQty(),
                        cashier_payment_item.getDiscAmount(),
                        cashier_payment_item.getDiscPercent(),
                        cashier_payment_item.getNegVat(),
                        cashier_payment_item.getDiscBuyerName(),
                        cashier_payment_item.getDiscIdNumber(),
                        cashier_payment_item.getDiscOther()



                );


            }

            databaseHandler.deleteInvoiceReceiptDiscount();




        }

        db2.close();


        ////for returning to invoices after settle


        Toast.makeText(getActivity(), "TRANSACTION COMPLETE", Toast.LENGTH_SHORT).show();
        this.getActivity().finish();
        this.getActivity().overridePendingTransition(0,0);
        startActivity(getActivity().getIntent());
        this.getActivity().overridePendingTransition(0,0);
        // printPreview();

        // printPreview();
        // showingDiscountList();

    }
    private void completeTransaction(){
        String DB_NAME2 = "PosOutputDB.db";
        shift_active shift_active = new shift_active();
        shift_active.getAccountInfo(getContext());
        shift_active.getShiftingTable(getContext());


        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
        SQLiteDatabase db2 = getContext().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor itemListC2 = db2.rawQuery("select sum(OrderQty),sum(OrderPriceTotal) from InvoiceReceiptItem", null);
        Cursor itemListC3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty),sum(DiscPercent),sum(VAT) from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (itemListC2.getCount()==0){
            db2.close();
        }
        if (itemListC2.getCount()!=0){
            if (itemListC2.moveToNext()) {

                transactionIDFinal = cashier_payment_item.getTransactionID();
                transactionOrderQtyFinal = itemListC2.getString(0);
                transactionOrderPriceTotalFinal = Double.valueOf(itemListC2.getString(1));
            }

            //cashier_payment_item.setTransactionID();
//            db2.close();
        }
        if (itemListC3.getCount()==0){
            Toast.makeText(getContext(), "ZERO", Toast.LENGTH_SHORT).show();
            db2.close();
        }
        if (itemListC3.getCount()!=0){
            itemListC3.moveToNext();

            // Toast.makeText(getContext(), "transdiscount " + transDiscount, Toast.LENGTH_SHORT).show();
            transactionOrderPriceTotalFinalDiscount = Double.valueOf(itemListC3.getDouble(0));
            finalDiscQty = itemListC3.getString(1);
            negVat=Double.valueOf(itemListC3.getDouble(3));



        }


        transactionOrderPriceTotalFinal = transactionOrderPriceTotalFinal - (-transactionOrderPriceTotalFinalDiscount)-(-negVat);
        Log.e("ORDER PRICE TOTAL",String.valueOf(transactionOrderPriceTotalFinal));

        paymentRenderedAmount = et_cash.getText().toString();
        Double amount = Double.valueOf(et_cash.getText().toString())-Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        dateFormat2 = new SimpleDateFormat("h:mm a");
        ChangeAmount= format.format(amount);
        // TransDate = new SimpleDateFormat("MM-dd-yyyy", Locale.getDefault()).format(new Date());
        Date currentTime = Calendar.getInstance().getTime();
        TransTime = dateFormat2.format(currentTime.getTime());
        TransUser=shift_active.getActiveUserID();
        transactionType = "invoice";


        cashier_payment_item.readReferenceNumber(getContext());
        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate=SysDate.getSystemDate();

//        Toast.makeText(getContext(), cashier_payment_item.getTransactionIdFinal() + "  " +
//                transactionOrderQtyFinal + "  " +
//                String.valueOf(transactionOrderPriceTotalFinal) + "  " +
//                paymentRenderedAmount + "  " +
//                ChangeAmount + "  " +
//                        typeOfPayment + "  " +
//                        TransDate + "  " +
//                        TransTime + "  " +
//                TransUser, Toast.LENGTH_SHORT).show();




        boolean isInserted = databaseHandler.insertInvoiceReceiptTotal(
                cashier_payment_item.getTransactionIdFinal(),
                transactionOrderQtyFinal,
                finalDiscQty,
                String.format("%7.2f",transactionOrderPriceTotalFinalDiscount),

                // String.valueOf(cashier_payment_item.getTotalDueAmount()),
                String.format("%7.2f",transactionOrderPriceTotalFinal),
                paymentRenderedAmount,
                ChangeAmount,
                modePayment, //typePayment
                transactionType,
                FinalDate,
                TransTime,
                TransUser,
                shift_active.getShiftActive()
        );



        checkIfInvoiceSuspendNotEmpty();

        boolean isInserted2 = databaseHandler.insertOfficialReceipt(
                or_trans_item.getOfficialReceiptNo(),
                cashier_payment_item.getTransactionIdFinal()


        );
        // Toast.makeText(getContext(), cashier_payment_item.getTransactionIdFinal() + "  " + transactionOrderQtyFinal + "   " + String.valueOf(transactionOrderPriceTotalFinal), Toast.LENGTH_SHORT).show();
        if (isInserted = true) {
            Toast.makeText(getActivity(), "INSERTED", Toast.LENGTH_SHORT).show();



        } else {
            Toast.makeText(getActivity(), "ERROR inserted final", Toast.LENGTH_SHORT).show();
        }

        db2.close();

    }

    String FinalMultipleOR;
    String FinalMultipleTrans;


    private void insertMultiplePayment(){
        Log.e("INVOICE","TRANSACTION INSERTED");
        String DB_NAME2 = "PosOutputDB.db";
        shift_active shift_active = new shift_active();
        shift_active.getAccountInfo(getContext());
        shift_active.getShiftingTable(getContext());
        system_final_date SysDate = new system_final_date();
        SysDate.insertDate(getContext());
        FinalDate=SysDate.getSystemDate();



        cashier_payment_item cashier_payment_item = new cashier_payment_item(getContext());
        cashier_payment_item.loadCashierPaymentDataTemp(getContext(),vatIndicator.getVatIndicator());
        DatabaseHandler databaseHandler = new DatabaseHandler(getContext());
        SQLiteDatabase db2 = getContext().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        Cursor itemListC2 = db2.rawQuery("select sum(OrderQty),sum(OrderPriceTotal) from InvoiceReceiptItem", null);
        Cursor itemListC3 = db2.rawQuery("select sum(DiscAmount),sum(DiscQty),sum(DiscPercent),sum(VAT) from InvoiceReceiptItemFinalWDiscountTemp", null);
        if (itemListC2.getCount()==0){
            db2.close();
        }
        if (itemListC2.getCount()!=0){
            if (itemListC2.moveToNext()) {

                transactionIDFinal = cashier_payment_item.getTransactionID();
                transactionOrderQtyFinal = itemListC2.getString(0);
                transactionOrderPriceTotalFinal = Double.valueOf(itemListC2.getString(1));
            }

            //cashier_payment_item.setTransactionID();
//            db2.close();
        }
        if (itemListC3.getCount()==0){
            Toast.makeText(getContext(), "ZERO", Toast.LENGTH_SHORT).show();
            db2.close();
        }
        if (itemListC3.getCount()!=0){
            itemListC3.moveToNext();

            // Toast.makeText(getContext(), "transdiscount " + transDiscount, Toast.LENGTH_SHORT).show();
            transactionOrderPriceTotalFinalDiscount = Double.valueOf(itemListC3.getDouble(0));
            finalDiscQty = itemListC3.getString(1);
            negVat=Double.valueOf(itemListC3.getDouble(3));



        }


        //   transactionOrderPriceTotalFinal = transactionOrderPriceTotalFinal - transactionOrderPriceTotalFinalDiscount-negVat;
        transactionOrderPriceTotalFinal = transactionOrderPriceTotalFinal - (-transactionOrderPriceTotalFinalDiscount)-(-negVat);
        paymentRenderedAmount = et_cash.getText().toString();
        Double amount = Double.valueOf(et_cash.getText().toString())-Double.valueOf(lbl_due.getText().toString());
        DecimalFormat format = new DecimalFormat("0.00");
        dateFormat2 = new SimpleDateFormat("h:mm a");
        ChangeAmount= format.format(amount);
        // TransDate = new SimpleDateFormat("MM-dd-yyyy", Locale.getDefault()).format(new Date());
        Date currentTime = Calendar.getInstance().getTime();
        TransTime = dateFormat2.format(currentTime.getTime());
        TransUser=shift_active.getActiveUserID();
        transactionType = "invoice";


        cashier_payment_item.readReferenceNumber(getContext());

        OR_TRANS_ITEM or_trans_item = new OR_TRANS_ITEM();
        or_trans_item.readOfficialReceiptNumber(getContext());

//        Toast.makeText(getContext(), cashier_payment_item.getTransactionIdFinal() + "  " +
//                transactionOrderQtyFinal + "  " +
//                String.valueOf(transactionOrderPriceTotalFinal) + "  " +
//                paymentRenderedAmount + "  " +
//                ChangeAmount + "  " +
//                        typeOfPayment + "  " +
//                        TransDate + "  " +
//                        TransTime + "  " +
//                TransUser, Toast.LENGTH_SHORT).show();

        FinalMultipleOR=or_trans_item.getOfficialReceiptNo();
        FinalMultipleTrans=cashier_payment_item.getTransactionIdFinal();




        boolean isInserted = databaseHandler.insertInvoiceReceiptTotal(
                cashier_payment_item.getTransactionIdFinal(),
                transactionOrderQtyFinal,
                finalDiscQty,
                String.valueOf(transactionOrderPriceTotalFinalDiscount),

                // String.valueOf(cashier_payment_item.getTotalDueAmount()),
                String.valueOf(transactionOrderPriceTotalFinal),
                "0.00",
                "0.00",
                "Multiple",
                transactionType,
                FinalDate,
                TransTime,
                TransUser,
                shift_active.getShiftActive()
        );
        checkIfInvoiceSuspendNotEmpty();

        boolean isInserted2 = databaseHandler.insertOfficialReceipt(
                or_trans_item.getOfficialReceiptNo(),
                cashier_payment_item.getTransactionIdFinal()


        );
        // Toast.makeText(getContext(), cashier_payment_item.getTransactionIdFinal() + "  " + transactionOrderQtyFinal + "   " + String.valueOf(transactionOrderPriceTotalFinal), Toast.LENGTH_SHORT).show();
        if (isInserted = true) {
            Toast.makeText(getActivity(), "INSERTED", Toast.LENGTH_SHORT).show();



        } else {
            Toast.makeText(getActivity(), "ERROR inserted final", Toast.LENGTH_SHORT).show();
        }

        db2.close();


    }
    private void ShowKeyboard(){

        MyKeyboard keyboard = view.findViewById(R.id.keyboard2);

        // prevent system keyboard from appearing when EditText is tapped
        et_cash.setRawInputType(InputType.TYPE_CLASS_NUMBER |  InputType.TYPE_NUMBER_FLAG_DECIMAL);
        et_cash.setTextIsSelectable(true);


        int type = InputType.TYPE_CLASS_NUMBER |  InputType.TYPE_NUMBER_FLAG_DECIMAL;

        ((EditText)view.findViewById(R.id.et_cash)).setInputType(type);
        //   pass the InputConnection from the EditText to the keyboard

        InputConnection ic = et_cash.onCreateInputConnection(new EditorInfo());
        Log.e("loginOutput",String.valueOf(ic));
        keyboard.setInputConnection(ic);
    }
    private void readReferenceNumber() {

        //primary key 00000001

        // int readPK;

        SQLiteDatabase db2 = getActivity().openOrCreateDatabase(DB_NAME2, Context.MODE_PRIVATE, null);
        itemListC = db2.rawQuery("select * from InvoiceReceiptTotal ", null);
        if (itemListC.getCount() == 0) {

            int origRefNumber = 1;
            String formatted = String.format("%010d", origRefNumber);
            readRefNumber = formatted;
        } else {

            itemListC = db2.rawQuery("SELECT * FROM InvoiceReceiptTotal", null);
            //while(itemListC.moveToLast()){
            itemListC.moveToLast();
            int origRefNumber = 1;

            int readPK = Integer.parseInt(itemListC.getString(0));

            int incrementPK = readPK + 1;
            String incrementPKString = String.format("%010d", incrementPK);

            readRefNumber = incrementPKString;


            // }
        }
        itemListC.close();
        db2.close();


    }

    @Override
    public void onPause() {
        super.onPause();
        //if (_broadcastReceiver != null)
        //  getActivity().unregisterReceiver(_broadcastReceiver);
        kboard.UnInit();
        Log.d("onUserLeaveHint", "FRAGMENT LEAVE");


//        super.onUserLeaveHint();
    }

    KeyboardDevice kboard;
    KeyCodeManager kManager;
    private void KeyBoardMap(){
        kboard=new KeyboardDevice();
        kManager=new KeyCodeManager();
        kboard.Init();
        kboard.BeepOnOff(false);
        kManager.InitKeyMap();
        kboard.mHandler=this.MyHandler;

    }
    private final Handler MyHandler = new Handler(Looper.getMainLooper()) {
        @SuppressLint({"StringFormatMatches", "DefaultLocale"})
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case KeyboardDevice.MSG_KEY: {
                    String strMsgInfo = "";
                    try {
                        strMsgInfo = msg.getData().getString("msg_info");
                        String[] keyData = strMsgInfo.split(":", 2);
                        if (keyData != null) {

                            int nKeyIndex = StringToInt(keyData[0]);
                            if (nKeyIndex == 0) {

                            } else {
                                String KeyIndex = String.format("%d", nKeyIndex);
                                KeyCodeManager kManager = new KeyCodeManager();




                                // editTextTextPersonName.setText(kManager.getDefaultKeyName(StringToInt(KeyIndex)));
                                //RouteKeyIndex(nKeyIndex);
//note!!!!

                                if(alertDialogQty!=null && alertDialogQty.isShowing()){
                                    Log.e("setNewKeyEvent", "alertDialogQty");
                                   // setNewKeyEvent(nKeyIndex);
                                    SimulateKeyboard(nKeyIndex);
                                }
                                else {

                                    if (mapCode2Activate == 1 || mapCode2Activate == 2 || mapCode2Activate == 3 || mapCode2Activate == 4) {

                                        Log.e("setNewKeyEvent", "proceed");
                                        setNewKeyEvent(nKeyIndex);

                                        //  SimulateKeyboard(nKeyIndex);
                                    } else {
                                        SimulateKeyboard(nKeyIndex);
                                    }
                                }





                                // Log.e("RouteKeyIndex",String.valueOf(nKeyIndex));

                            }
                            String keyName=KeyCodeManager.getDefaultKeyName(nKeyIndex);
                            String strShow = String.format("KeyIndex:%d", nKeyIndex) + " ScanCode:" + keyData[1]+" KeyName:"+keyName;
                            // ShowMsg(strShow);
                        } else {
                            //Toast.makeText(cashier_invoice.this, strMsgInfo, Toast.LENGTH_SHORT).show();


                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
                default:
                    break;
            }
        }
    };

    private void RouteKeyIndex(int nKeyIndex) {

        int nVKCode = KeyCodeManager.getVKCode(nKeyIndex);
        String nVKCode2 = KeyCodeManager.getDefaultKeyName(nKeyIndex);
        if (nVKCode == -100) {
        } else {
            Log.e("nVKCode",String.valueOf(nVKCode));
            SimulateKeyboard(nVKCode);
        }

        //clearing text
        if (nVKCode==123){
            et_cash.setText("");
        }
        //showing cust info
        if (nVKCode==165){
            showAdditionalInfo();
        }

        //131 for calling invoice
//        if (nVKCode==131) {
//           // replaceFragment(new cashier_invoice());
//            //  Log.e("new FragInv","1");
//
//        }
//
//
//        if (nVKCode==133) {  //131 for calling invoice
//           // replaceFragment(new cashier_shift());
//            Log.e("new FragInv","3");
//        }


        if (nVKCode==202){
            printer_settings_class prn = new printer_settings_class(this.getContext());
            prn.PaperFeed();

        }


        //cash payment
        if (nVKCode==135){
            cashPayment();
        }
        //credit payment
        if (nVKCode==136){
            creditCardPayment();
        }
        //debit payment
        if (nVKCode==137){

        }
        //other payment
        if (nVKCode==138){

        }
        //Discount
        if (nVKCode==140){
            showingDiscountList();
        }
        //Diplomat
        if (nVKCode==139){
            diplomatFunction();
        }

        //exact amount
        if (nVKCode==201){
            et_cash.setText(lbl_due.getText().toString());
        }




    }

    private void replaceFragment(Fragment fragment){


        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.framelayout,fragment).commitNow();


    }
    private void checkOut(){
        View invoiceBtn =  ((MainActivity)getActivity()).getViewById(R.id.invoice_fragment);
        View paymentBtn =  ((MainActivity)getActivity()).getViewById(R.id.payment_fragment);
        View shiftBtn =  ((MainActivity)getActivity()).getViewById(R.id.shift_fragment);
        Button buttoninv = invoiceBtn.findViewById(R.id.invoice_fragment);
        Button buttonpayment = paymentBtn.findViewById(R.id.payment_fragment);
        Button buttonshift = shiftBtn.findViewById(R.id.shift_fragment);
        buttoninv.setBackgroundColor(getResources().getColor(R.color.gray));
        buttonpayment.setBackgroundColor(getResources().getColor(R.color.Python));
        buttonshift.setBackgroundColor(getResources().getColor(R.color.gray));

        replaceFragment(new cashier_payment());

    }
    private void shift(){
        View invoiceBtn =  ((MainActivity)getActivity()).getViewById(R.id.invoice_fragment);
        View paymentBtn =  ((MainActivity)getActivity()).getViewById(R.id.payment_fragment);
        View shiftBtn =  ((MainActivity)getActivity()).getViewById(R.id.shift_fragment);
        Button buttoninv = invoiceBtn.findViewById(R.id.invoice_fragment);
        Button buttonpayment = paymentBtn.findViewById(R.id.payment_fragment);
        Button buttonshift = shiftBtn.findViewById(R.id.shift_fragment);
        buttoninv.setBackgroundColor(getResources().getColor(R.color.gray));
        buttonpayment.setBackgroundColor(getResources().getColor(R.color.gray));
        buttonshift.setBackgroundColor(getResources().getColor(R.color.Python));

        replaceFragment(new cashier_shift());

    }

    private void invoice(){
        View invoiceBtn =  ((MainActivity)getActivity()).getViewById(R.id.invoice_fragment);
        View paymentBtn =  ((MainActivity)getActivity()).getViewById(R.id.payment_fragment);
        View shiftBtn =  ((MainActivity)getActivity()).getViewById(R.id.shift_fragment);
        Button buttoninv = invoiceBtn.findViewById(R.id.invoice_fragment);
        Button buttonpayment = paymentBtn.findViewById(R.id.payment_fragment);
        Button buttonshift = shiftBtn.findViewById(R.id.shift_fragment);
        buttoninv.setBackgroundColor(getResources().getColor(R.color.Python));
        buttonpayment.setBackgroundColor(getResources().getColor(R.color.gray));
        buttonshift.setBackgroundColor(getResources().getColor(R.color.gray));

        replaceFragment(new cashier_invoice());

    }


    int mapCode2Activate=0; // 1 for AdditionalInfo 2=creditINFo 3=debitInfo
    EditText et_custName;
    EditText et_custIDNo;
    EditText et_custTIN;
    EditText et_noPax;
    Button btn_saveCustInfo;
    Button btn_cancelCustInfo;
    Button btn_addNewID;
    TextView tv_Dialoglabel;
    View alertLayout;
    //AlertDialog alertDialog;

    private void showAdditionalInfo(){
        DialogCursor=5;
        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
        LayoutInflater inflater = getLayoutInflater();
        alertLayout = inflater.inflate(R.layout.custom_alertdialog_customer_info, null);

        builder.setView(alertLayout);
        alertDialog = builder.create();
        alertDialog.setCanceledOnTouchOutside(false);
        et_custName = alertLayout.findViewById(R.id.et_custName);
        et_custIDNo = alertLayout.findViewById(R.id.et_custIDNo);
        et_custTIN = alertLayout.findViewById(R.id.et_custTIN);
        btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
        btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);

        et_custName.requestFocus();
        mapCode2Activate=1;
        InitT9MapCode();
        btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                addedCustomerName = et_custName.getText().toString();
                addedCustomerAddress = et_custIDNo.getText().toString();
                addedCustomerTin = et_custTIN.getText().toString();
                alertDialog.dismiss();
                mapCode2Activate=0;
                DialogCursor=0;

            }
        });



        btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                addedCustomerName ="";
                addedCustomerAddress = "";
                addedCustomerTin ="";
                alertDialog.dismiss();
                // KeyBoardMap();
                mapCode2Activate=0;
                DialogCursor=0;
            }
        });


        et_custName.setOnEditorActionListener(new EditText.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                Log.e("et_custName",String.valueOf(keyEvent));
                Log.e("et_custName",String.valueOf(i));

                if (i == EditorInfo.IME_ACTION_NEXT) {
                    et_custIDNo.requestFocus();
                    Log.e("et_custName","Finally");
                    return true;
                }
                return false;
            }
        });
        et_custName.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {
                Log.e("onKey",String.valueOf(keyEvent));
                Log.e("onKey",String.valueOf(i));
                return false;
            }
        });





        alertDialog.show();
    }


    
    private void showAdditionalInfoCard(){
        DialogCursor=5;
        AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
        LayoutInflater inflater = getLayoutInflater();
        alertLayout = inflater.inflate(R.layout.custom_alertdialog_scd_pwd_info, null);

        builder.setView(alertLayout);
        alertDialog = builder.create();
        alertDialog.setCanceledOnTouchOutside(false);
        et_custName = alertLayout.findViewById(R.id.et_custName);
        et_custIDNo = alertLayout.findViewById(R.id.et_custIDNo);
        et_custTIN = alertLayout.findViewById(R.id.et_custTIN);
        btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
        btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);

        et_custName.requestFocus();
        mapCode2Activate=1;
        InitT9MapCode();
        btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {



                addedCustomerName = et_custName.getText().toString();
                addedCustomerAddress = et_custIDNo.getText().toString();
                addedCustomerTin = et_custTIN.getText().toString();
                alertDialog.dismiss();
                mapCode2Activate=0;
                DialogCursor=0;

                DatabaseHandler myDb = new DatabaseHandler(getContext());
                boolean isInserted2 = myDb.insertDiscountInfo(
                        finalTransactionNumber,addedCustomerName,addedCustomerAddress,addedCustomerTin);
                Toast.makeText(getContext(), "ADDITIONAL DISCOUNT CARD ADDED", Toast.LENGTH_LONG).show();

            }
        });



        btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                addedCustomerName ="";
                addedCustomerAddress = "";
                addedCustomerTin ="";
                alertDialog.dismiss();
                // KeyBoardMap();
                mapCode2Activate=0;
                DialogCursor=0;
            }
        });


        et_custName.setOnEditorActionListener(new EditText.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
                Log.e("et_custName",String.valueOf(keyEvent));
                Log.e("et_custName",String.valueOf(i));

                if (i == EditorInfo.IME_ACTION_NEXT) {
                    et_custIDNo.requestFocus();
                    Log.e("et_custName","Finally");
                    return true;
                }
                return false;
            }
        });
        et_custName.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View view, int i, KeyEvent keyEvent) {
                Log.e("onKey",String.valueOf(keyEvent));
                Log.e("onKey",String.valueOf(i));
                return false;
            }
        });





        alertDialog.show();
    }





    private final static int EXECUTE_MSG = 750;
    public static HashMap<Integer,String> mapCode = new HashMap<>();
    public static HashMap<Integer,Integer> mapCode2 = new HashMap<>();
    // KeyCodeManager2 kManager2 = new KeyCodeManager2();
    //    public class InputMethod{
    public int nKickKeyIndex=0;
    private int nKickCnt=0;
    private Timer timer = null;
    private TimerTask timeOutTask = null;
    private static final int KICK_TIME_PERIOD_MILLS = 450;

    public void setNewKeyEvent(int nKeyIndex){
        StopTimeOutTask();
        if(nKeyIndex ==0){
            nKickKeyIndex = nKeyIndex;
            nKickCnt =1;
        }
        else{
            if (nKeyIndex == nKickKeyIndex){
                nKickCnt = nKickCnt+1;
            }
            else{
                DoInput(nKickKeyIndex,nKickCnt);
                nKickKeyIndex = nKeyIndex;
                nKickCnt=1;
            }
        }
        InitTimeOutTask();
    }

    private void StopTimeOutTask(){
        if (timeOutTask!=null){
            timeOutTask.cancel();
            timeOutTask = null;
        }
        if (timer!=null){
            timer.cancel();
            timer=null;
        }
    }
    private void InitTimeOutTask(){
        {
            try{
                timer = new Timer();
                timeOutTask = new TimerTask() {
                    @Override
                    public void run() {
                        DoInput(nKickKeyIndex,nKickCnt);
                        nKickKeyIndex =0;
                        nKickCnt = 0;
                    }
                };
                timer.schedule(timeOutTask,KICK_TIME_PERIOD_MILLS);
            }catch (Exception ex){
                ex.printStackTrace();
            }
        }
    }


    public void InitT9MapCode() {
        mapCode.clear();
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD0, " 0");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD1, "1PQRS");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD2, "2TUV");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD3, "3WXYZ");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD4, "4GHI");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD5, "5JKL");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD6, "6MNO");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD7, "7@[\\]");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD8, "8ABC");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD9, "9DEF");
        mapCode.put(KeyCodeManager.KEY_INDEX_NUMPAD9, "9DEF");
        mapCode2.put(KeyCodeManager.KEY_INDEX_TOTAL2, KeyEvent.KEYCODE_ENTER);
        mapCode2.put(KeyCodeManager.KEY_INDEX_PAGEDN, KeyEvent.KEYCODE_PAGE_DOWN);
        mapCode2.put(KeyCodeManager.KEY_INDEX_PAGEUP, KeyEvent.KEYCODE_PAGE_UP);
    }

    public void DoInput(int nKeyIndex,int nCnt){
        int nLayer = nCnt;
        if (nLayer>0){
            nLayer= nLayer-1;
        }

        if (mapCode.containsKey(nKeyIndex)) {
            try {
                String codeT9 = mapCode.get(nKeyIndex);
                if (codeT9 != null) {
                    List<String> lstSel = new ArrayList<>();
                    ///////////////
                    char[] charT9 = codeT9.toCharArray();
                    for (char chInput : charT9) {
                        String strInput = String.valueOf(chInput);
                        lstSel.add(strInput);
                    }
                    /////////////
                    String selIn = "";
                    if (nLayer < lstSel.size()) {
                        selIn = lstSel.get(nLayer);
                    } else {
                        selIn = lstSel.get(lstSel.size() - 1);
                    }
                    ////
                    int nKeyCode = KeyEvent.keyCodeFromString(selIn);
                    //Log.i(TAG, String.format("Do T9Input:%d %d %s=%d", nKeyIndex, nCnt, selIn, nKeyCode));
                    //PostMessage(T9_INPUT_EXECUTE_MSG, selIn);
//                Log.i("NKeyCOde",String.valueOf(nKeyCode));
//                Log.i("ACTION NEXT",String.valueOf(EditorInfo.IME_ACTION_NEXT));
//                Log.i("TAG",String.valueOf(KeyCodeManager.KEY_INDEX_EC));

                    //    if (nKeyCode == EditorInfo.IME_ACTION_NEXT)
                    if (Looper.myLooper() == null) {
                        Looper.prepare();
                    }

                    PostMessage(EXECUTE_MSG, selIn);

                }
            }
            catch (Exception ex){

            }
        }
        if (mapCode2.containsKey(nKeyIndex)) {
            Log.i("MAPCODE2", "DoInput: "+nKeyIndex);
            int codeT9 = mapCode2.get(nKeyIndex);
            Log.i("MAPCODE2", "DoInput: "+codeT9);
            Log.i("ACTION_SEARCH",  String.valueOf(EditorInfo.IME_ACTION_SEARCH));
            Log.i("ACTION_NEXT",  String.valueOf(EditorInfo.IME_ACTION_NEXT));
            Log.i("ACTION_DONE",  String.valueOf(EditorInfo.IME_ACTION_DONE));
            Log.i("KeyEventActionDown",  String.valueOf(KeyEvent.ACTION_DOWN));
            Log.i("Enter",  String.valueOf(KeyEvent.KEYCODE_ENTER));

            if (Looper.myLooper()==null){
                Looper.prepare();
            }



            if (codeT9 == KeyEvent.KEYCODE_PAGE_DOWN){
                moveEdittextDOWN(EXECUTE_MSG,"down");
            }
            if (codeT9 == KeyEvent.KEYCODE_PAGE_UP){
                moveEdittextUP(EXECUTE_MSG,"up");
            }


            if (nKeyIndex == EditorInfo.IME_ACTION_SEARCH || nKeyIndex == EditorInfo.IME_ACTION_DONE ||
                    codeT9 == KeyEvent.KEYCODE_ENTER){



                if (mapCode2Activate==2){
                    if (et_CardApproval.hasFocus()){
                        //  Toast.makeText(getContext(), "card approval has focus", Toast.LENGTH_SHORT).show();
                        //et_CardApproval.clearFocus();

                        moveEdittextDOWN(EXECUTE_MSG,"down");
                        et_CardApproval.onEditorAction(EditorInfo.IME_ACTION_DONE);

                        //  et_CardApproval.onEditorAction(EditorInfo.IME_ACTION_NEXT);




                    }
                    if (btn_EnterDebit.hasFocus()){

                        Toast.makeText(getContext(), "done", Toast.LENGTH_SHORT).show();
                        //test

                        creditConfirm(FinalTypeOfCard);


                    }
                }

                if (mapCode2Activate==3){
                    if (discCategory.equals("SCD")){
                        saveSCDInfo();

                    }
                    else if (discCategory.equals("PWD")){
                        //savePWDInfo();
                        saveSCDInfo();
                    }
                }
                else if(mapCode2Activate==4){
                   // savePaxInfo();
                    Toast.makeText(getContext(), "Saving Pax No", Toast.LENGTH_SHORT).show();

                    SQLiteDatabase PosOutputDb = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
                    Cursor checkInvoiceReceiptItem = PosOutputDb.rawQuery("select * from InvoiceReceiptItem", null);
                    if (checkInvoiceReceiptItem.getCount()!=0){
                        if (checkInvoiceReceiptItem.moveToFirst()){
                            transactionIDFinal = checkInvoiceReceiptItem.getString(0);
                            //Toast.makeText(getContext(), "TransactionID "+ transactionIDFinal, Toast.LENGTH_SHORT).show();
                            savePaxInfo();
                        }
                        else{
                            Toast.makeText(getContext(), "NO TRANSACTION FOUND", Toast.LENGTH_SHORT).show();
                        }
                    }




                }


                else{
                    moveEdittext(EXECUTE_MSG,"test");
                }


                // switch ()
            }





        }




        if (nKeyIndex==1537){


            if (mapCode2Activate==1) {

                if (et_custName.hasFocus()) {
                    int length = et_custName.getText().length();
                    if (length > 0) {
                        et_custName.getText().delete(length - 1, length);
                    }
                }
                if (et_custTIN.hasFocus()) {
                    int length = et_custTIN.getText().length();
                    if (length > 0) {
                        et_custTIN.getText().delete(length - 1, length);
                    }
                }
                if (et_custIDNo.hasFocus()) {
                    int length = et_custIDNo.getText().length();
                    if (length > 0) {
                        et_custIDNo.getText().delete(length - 1, length);
                    }
                }
            }
            else if(mapCode2Activate==2){


                if (et_CardOwner.hasFocus()){

                    int length = et_CardOwner.getText().length();
                    if (length > 0) {
                        et_CardOwner.getText().delete(length - 1, length);
                    }

                }
                else if (et_DebitNumber.hasFocus()){
                    int length = et_DebitNumber.getText().length();
                    if (length > 0) {
                        et_DebitNumber.getText().delete(length - 1, length);
                    }
                }
                else if (et_DebitExpiry.hasFocus()){
                    int length = et_DebitExpiry.getText().length();
                    if (length > 0) {
                        et_DebitExpiry.getText().delete(length - 1, length);
                    }
                }
                else if (et_CardApproval.hasFocus()){
                    int length = et_CardApproval.getText().length();
                    if (length > 0) {
                        et_CardApproval.getText().delete(length - 1, length);
                    }
                }

            }
            else if(mapCode2Activate==3){


                if (et_custName.hasFocus()){

                    int length = et_custName.getText().length();
                    if (length > 0) {
                        et_custName.getText().delete(length - 1, length);
                    }

                }
                else if (et_custIDNo.hasFocus()){
                    int length = et_custIDNo.getText().length();
                    if (length > 0) {
                        et_custIDNo.getText().delete(length - 1, length);
                    }
                }
                else if (et_custTIN.hasFocus()){
                    int length = et_custTIN.getText().length();
                    if (length > 0) {
                        et_custTIN.getText().delete(length - 1, length);
                    }
                }



            }
            else if(mapCode2Activate==4){
                 if (et_noPax.hasFocus()){
                    int length = et_noPax.getText().length();
                    if (length > 0) {
                        et_noPax.getText().delete(length - 1, length);
                    }
                }
            }






        }

        if(nKeyIndex==1538){
            Log.d("TAG", "SimulateKeyboard: Cust Info Exit");
            alertDialog.dismiss();

            mapCode2Activate=0;
            DialogCursor=0;
        }

        if(nKeyIndex==328 || nKeyIndex==320){
            if(mapCode2Activate==4){
                // savePaxInfo();
                DialogCursor=0;
                mapCode2Activate=0;
                alertDialog2.dismiss();




            }
            else if (mapCode2Activate==3){
                alertDialog.dismiss();
                mapCode2Activate=0;
            }
        }

        if (nKeyIndex==520){
          insertIDInfo();
        }





        Log.i("TAG", "NnKeyIndex: "+nKeyIndex);

//        }

    }

    private void insertIDInfo(){
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {

                if (numberOfID>= prorated_class.getNumberOfPax()){
                    Toast.makeText(getContext(), "CANNOT ADD ANOTHER ID", Toast.LENGTH_SHORT).show();
                }
                else{
                    prorated_class.insertNewID(getContext(),transactionIDFinal,et_custName.getText().toString(),et_custIDNo.getText().toString(),et_custTIN.getText().toString());
                    // saveSCDInfo();
                    alertDialog.dismiss();
                    savePaxInfo();
                }
            }
        });
    }


    InputMethodManager inputMethodManager;

    private void closeKeyboard(){

        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                //do stuff like remove view etc
                // adapter.remove(selecteditem);
                Toast.makeText(getContext(), "keyboard close", Toast.LENGTH_SHORT).show();
//                SoftKeyboard keyboardSettings = new SoftKeyboard();
//                int Hide=SoftKeyboard.getShowKboard();
//                if (Hide!=1){
//                    getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
//                }
                // Hide soft-keyboard:

            }
        });


        // Stuff that updates the UI'




    }

    public void PostMessage(int nMsg, String strMessage) {
        Log.i("TAG", String.valueOf(nMsg) +" "+strMessage);
        Log.i("POSTMESSAGEs",strMessage);

        //  editTextTextPersonName.setText(strMessage);

        if (mapCode2Activate==1) {


            if (et_custName.hasFocus()) {

                int start = Math.max(et_custName.getSelectionStart(), 0);
                int end = Math.max(et_custName.getSelectionEnd(), 0);
                et_custName.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
                //  et_custName.setText(strMessage);

            }

            if (et_custTIN.hasFocus()) {

                int start = Math.max(et_custTIN.getSelectionStart(), 0);
                int end = Math.max(et_custTIN.getSelectionEnd(), 0);
                et_custTIN.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
                //  et_custName.setText(strMessage);

            }

            if (et_custIDNo.hasFocus()) {

                int start = Math.max(et_custIDNo.getSelectionStart(), 0);
                int end = Math.max(et_custIDNo.getSelectionEnd(), 0);
                et_custIDNo.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
                //  et_custName.setText(strMessage);

            }



        }
        else if (mapCode2Activate==2){

            if (et_CardOwner.hasFocus()){
                int start = Math.max(et_CardOwner.getSelectionStart(), 0);
                int end = Math.max(et_CardOwner.getSelectionEnd(), 0);
                et_CardOwner.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());



            }
            else if (et_DebitNumber.hasFocus()){
                int start = Math.max(et_DebitNumber.getSelectionStart(), 0);
                int end = Math.max(et_DebitNumber.getSelectionEnd(), 0);
                et_DebitNumber.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
            }
            else if (et_DebitExpiry.hasFocus()){
                int start = Math.max(et_DebitExpiry.getSelectionStart(), 0);
                int end = Math.max(et_DebitExpiry.getSelectionEnd(), 0);
                et_DebitExpiry.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
            }
            else if (et_CardApproval.hasFocus()){
                //.requestFocus();
                int start = Math.max(et_CardApproval.getSelectionStart(), 0);
                int end = Math.max(et_CardApproval.getSelectionEnd(), 0);
                et_CardApproval.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
            }

        }

        else if (mapCode2Activate==3){ // dialog for pax

            Log.e("TAG", "PostMessage: mapcode"+mapCode2Activate );
            Log.e("TAG", "PostMessage: mapcode"+et_noPax.getText().toString() );

            if (et_custName.hasFocus()){
                Log.e("TAG", "PostMessage: et_custName has focus");
                int start = Math.max(et_custName.getSelectionStart(), 0);
                int end = Math.max(et_custName.getSelectionEnd(), 0);
                et_custName.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());



            }
            else if (et_custIDNo.hasFocus()){
                Log.e("TAG", "PostMessage: et_custIDNo has focus");
                int start = Math.max(et_custIDNo.getSelectionStart(), 0);
                int end = Math.max(et_custIDNo.getSelectionEnd(), 0);
                et_custIDNo.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
            }
            else if (et_custTIN.hasFocus()){
                Log.e("TAG", "PostMessage: et_custTIN has focus");
                int start = Math.max(et_custTIN.getSelectionStart(), 0);
                int end = Math.max(et_custTIN.getSelectionEnd(), 0);
                et_custTIN.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
            }


        }

        else if (mapCode2Activate==4){

            Log.e("TAG", "PostMessage: mapcode"+mapCode2Activate );
            Log.e("TAG", "PostMessage: mapcode"+et_noPax.getText().toString() );


             if (et_noPax.hasFocus()){
                Log.e("TAG", "PostMessage: et_nopax has focus");
                int start = Math.max(et_noPax.getSelectionStart(), 0);
                int end = Math.max(et_noPax.getSelectionEnd(), 0);
                et_noPax.getText().replace(Math.min(start, end), Math.max(start, end),
                        strMessage, 0, strMessage.length());
            }


        }









    }

//    public void debugMsg(String msg) {
//        final String str = msg;
//        getActivity().runOnUiThread(new Runnable() {
//            @Override
//            public void run() {
//                mInfo.setText(str);
//            }
//        });
//    }


    public void moveEdittext(int nMsg,String message){


        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //mInfo.setText(str);
                //Log.i("moveEdittext", String.valueOf(nMsg) +" "+message);

                if (mapCode2Activate==1) {



                    if (et_custName.hasFocus()) {
                        Log.e("Enter key", "proceed");
                        //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
                        et_custIDNo.requestFocus();
                    } else if (et_custIDNo.hasFocus()) {
                        //Log.e("Enter key","proceed");
                        //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
                        et_custTIN.requestFocus();
                    } else if (et_custTIN.hasFocus()) {
                        Log.e("Enter key", "et_custTin");
                        btn_saveCustInfo.setFocusableInTouchMode(true);
                        btn_saveCustInfo.requestFocus();

                    }
                    else if(btn_saveCustInfo.hasFocus()){

                        addedCustomerName = et_custName.getText().toString();
                        addedCustomerAddress = et_custIDNo.getText().toString();
                        addedCustomerTin = et_custTIN.getText().toString();
                        alertDialog.dismiss();
                        mapCode2Activate=0;

                    }
                    else{
                        alertDialog.dismiss();
                        mapCode2Activate=0;
                    }
                }
                else if (mapCode2Activate==2){


                    Log.e("Enter key", "mapcode22");
//                    Spinner spinnerBank;
//                    EditText et_CardOwner;
//                    EditText et_DebitNumber;
//                    EditText et_DebitExpiry;
//                    EditText et_CardApproval;
//                    Button btn_EnterDebit;
//                    TextView tv_typeOfCard;


                    if (et_CardOwner.hasFocus()){
                        et_DebitNumber.requestFocus();
                    }
                    else if (et_DebitNumber.hasFocus()){
                        et_DebitExpiry.requestFocus();
                    }
                    else if (et_DebitExpiry.hasFocus()){
                        et_CardApproval.requestFocus();
                    }
//                    if (et_CardApproval.hasFocus()){
//                        //.requestFocus();
//                       // et_CardOwner.requestFocus();
////                        btn_EnterDebit.setFocusableInTouchMode(true);
////                        btn_EnterDebit.requestFocus();
//
//
//
//
//
//
//                    }





                }
            }
        });



        // Log.i("TAG", String.valueOf(nMsg) +" "+message);
        //  Log.i("POSTMESSAGEs",strMessage);


    }
    public void moveEdittextUP(int nMsg,String message){


        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //mInfo.setText(str);
                //Log.i("moveEdittext", String.valueOf(nMsg) +" "+message);
                if (mapCode2Activate==1) {
                    if (et_custName.hasFocus()) {
                        btn_cancelCustInfo.setFocusableInTouchMode(true);
                        btn_cancelCustInfo.requestFocus();
                    } else if (et_custIDNo.hasFocus()) {
                        //Log.e("Enter key","proceed");
                        //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
                        et_custName.requestFocus();
                    } else if (et_custTIN.hasFocus()) {
                        Log.e("Enter key", "et_custTin");
                        //   btn_saveCustInfo.setFocusableInTouchMode(true);
                        et_custIDNo.requestFocus();
                    } else if (btn_saveCustInfo.hasFocus()) {
                        Log.e("Enter key", "et_custTin");

                        et_custTIN.requestFocus();
                    } else if (btn_cancelCustInfo.hasFocus()) {
                        Log.e("Enter key", "et_custTin");
                        btn_saveCustInfo.setFocusableInTouchMode(true);

                        btn_saveCustInfo.requestFocus();
                    }
                }
                else if (mapCode2Activate==2) {


                    if (et_CardOwner.hasFocus()) {
                        et_DebitNumber.requestFocus();
                    } else if (et_DebitNumber.hasFocus()) {
                        et_CardOwner.requestFocus();
                    } else if (et_DebitExpiry.hasFocus()) {
                        et_DebitNumber.requestFocus();
                    } else if (et_CardApproval.hasFocus()) {
                        //.requestFocus();
                        // et_CardOwner.requestFocus();
                        //et_DebitExpiry.setFocusableInTouchMode(true);
                        et_DebitExpiry.requestFocus();
                    }
                    else if (btn_EnterDebit.hasFocus()){
                        et_CardApproval.requestFocus();
                        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);
                    }
                }

                else if (mapCode2Activate==3){


                    Log.e("Enter key", "mapcode3");
//                    Spinner spinnerBank;
//                    EditText et_CardOwner;
//                    EditText et_DebitNumber;
//                    EditText et_DebitExpiry;
//                    EditText et_CardApproval;
//                    Button btn_EnterDebit;
//                    TextView tv_typeOfCard;


                    if (et_custName.hasFocus()){
                        // et_custIDNo.requestFocus();
                    }
                    else if (et_custIDNo.hasFocus()){
                        et_custName.requestFocus();
                    }
                    else if (et_custTIN.hasFocus()){
                        et_custIDNo.requestFocus();
                        //  et_custTIN.onEditorAction(EditorInfo.IME_ACTION_DONE);
                    }
                    else if (btn_saveCustInfo.hasFocus()){

                        et_custTIN.requestFocus();
                        InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);
                    }






                }


            }
        });



        // Log.i("TAG", String.valueOf(nMsg) +" "+message);
        //  Log.i("POSTMESSAGEs",strMessage);


    }
    public void moveEdittextDOWN(int nMsg,String message){


        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //mInfo.setText(str);
                //Log.i("moveEdittext", String.valueOf(nMsg) +" "+message);
//                if (et_custName.hasFocus()){
//                    Log.e("Enter key","proceed");
//                    //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
//                    et_custIDNo.requestFocus();
//                }
//                else if (et_custIDNo.hasFocus()){
//                    //Log.e("Enter key","proceed");
//                    //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
//                    et_custTIN.requestFocus();
//                }
//                else  if (et_custTIN.hasFocus()){
//                    btn_saveCustInfo.setFocusableInTouchMode(true);
//                    btn_saveCustInfo.requestFocus();
//                }
//                else if (btn_saveCustInfo.hasFocus()){
//                    Log.e("Enter key", "et_custTin");
//                     btn_cancelCustInfo.setFocusableInTouchMode(true);
//                    btn_cancelCustInfo.requestFocus();
//                }
//                else if (btn_cancelCustInfo.hasFocus()){
//                    Log.e("Enter key", "et_custTin");
//                   // btn_cancelCustInfo.setFocusableInTouchMode(true);
//                    et_custName.requestFocus();
//                }


                if (mapCode2Activate==1) {



                    if (et_custName.hasFocus()) {
                        Log.e("Enter key", "proceed");
                        //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
                        et_custIDNo.requestFocus();
                    } else if (et_custIDNo.hasFocus()) {
                        //Log.e("Enter key","proceed");
                        //et_custName.onEditorAction(EditorInfo.IME_ACTION_NEXT);
                        et_custTIN.requestFocus();
                    } else if (et_custTIN.hasFocus()) {
                        Log.e("Enter key", "et_custTin");
                        btn_saveCustInfo.setFocusableInTouchMode(true);
                        btn_saveCustInfo.requestFocus();

                    }
                    else if(btn_saveCustInfo.hasFocus()){

                        addedCustomerName = et_custName.getText().toString();
                        addedCustomerAddress = et_custIDNo.getText().toString();
                        addedCustomerTin = et_custTIN.getText().toString();
                        alertDialog.dismiss();
                        mapCode2Activate=0;

                    }
                    else{
                        alertDialog.dismiss();
                        mapCode2Activate=0;
                    }
                }
                else if (mapCode2Activate==2){


                    Log.e("Enter key", "mapcode22");
//                    Spinner spinnerBank;
//                    EditText et_CardOwner;
//                    EditText et_DebitNumber;
//                    EditText et_DebitExpiry;
//                    EditText et_CardApproval;
//                    Button btn_EnterDebit;
//                    TextView tv_typeOfCard;


                    if (et_CardOwner.hasFocus()){
                        et_DebitNumber.requestFocus();
                    }
                    else if (et_DebitNumber.hasFocus()){
                        et_DebitExpiry.requestFocus();
                    }
                    else if (et_DebitExpiry.hasFocus()){
                        et_CardApproval.requestFocus();
                    }
                    else if (et_CardApproval.hasFocus()){
                        et_CardApproval.onEditorAction(EditorInfo.IME_ACTION_DONE);
                        //.requestFocus();
                        // et_CardOwner.requestFocus();
                        btn_EnterDebit.setFocusableInTouchMode(true);
                        btn_EnterDebit.requestFocus();
                        // btn_EnterDebit.setBackgroundColor(Color.GRAY);

                    }
                    else{
                        Toast.makeText(getContext(), "focus else", Toast.LENGTH_SHORT).show();
                    }





                }

                else if (mapCode2Activate==3){


                    Log.e("Enter key", "mapcode3");
//                    Spinner spinnerBank;
//                    EditText et_CardOwner;
//                    EditText et_DebitNumber;
//                    EditText et_DebitExpiry;
//                    EditText et_CardApproval;
//                    Button btn_EnterDebit;
//                    TextView tv_typeOfCard;


                    if (et_custName.hasFocus()){
                        et_custIDNo.requestFocus();
                    }
                    else if (et_custIDNo.hasFocus()){
                        et_custTIN.requestFocus();
                    }
                    else if (et_custTIN.hasFocus()){
                        btn_saveCustInfo.setFocusableInTouchMode(true);
                        btn_saveCustInfo.requestFocus();
                        et_custTIN.onEditorAction(EditorInfo.IME_ACTION_DONE);
                    }
                    else if (btn_saveCustInfo.hasFocus()){
                        Toast.makeText(getContext(), "btn save cust focus", Toast.LENGTH_SHORT).show();
                        //.requestFocus();
                        // et_CardOwner.requestFocus();
                        btn_saveCustInfo.setFocusableInTouchMode(true);
                        btn_saveCustInfo.requestFocus();
                        // btn_EnterDebit.setBackgroundColor(Color.GRAY);

                    }
                    else{
                        et_custName.requestFocus();

                    }






                }







            }
        });



        // Log.i("TAG", String.valueOf(nMsg) +" "+message);
        //  Log.i("POSTMESSAGEs",strMessage);


    }









    public static String removeWords(String word ,String remove) {
        return word.replace(remove,"");
    }

    private void SimulateKeyboard(int keyCode) {


//            Log.e("TAG", "SimulateKeyboard: " + String.valueOf(keyCode));
//            KeyEvent keyEventDown = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
//            KeyEvent keyEventUp = new KeyEvent(KeyEvent.ACTION_UP, keyCode);
//            et_cash.onKeyDown(keyCode, keyEventDown);
//            et_cash.onKeyUp(keyCode, keyEventUp);

        kManager = new KeyCodeManager();
        Log.d("TAG", "SimulateKeyboard: "+kManager.getDefaultKeyName(keyCode));
        String input = kManager.getDefaultKeyName(keyCode);
        Log.d("TAG", "input: "+input);
        int digitType=1; //1 number //2 letter
        final int PRESS_INTERVAL =  700;

        String[] allowedInput = {"0","1","2","3","4","5","6","7","8","9","00","Btn","."};
//        if (et_scanItem.getText().toString().equalsIgnoreCase("PLU")){
//            et_scanItem.setText("PLU");
//        }


        for (String element : allowedInput){
            if (element ==  input){



                if (alertDialogQty!=null && alertDialogQty.isShowing()){

                    int start = Math.max(et_quantity.getSelectionStart(), 0);
                    int end = Math.max(et_quantity.getSelectionEnd(), 0);
                    et_quantity.getText().replace(Math.min(start, end), Math.max(start, end),
                            input, 0, input.length());


                }else {

                    Log.e("TAG", "SimulateKeyboard: "+alertDialogQty );
                    Log.e("TAG", "SimulateKeyboard: "+mapCode2Activate );


                    if (DialogCursor == 1) {

                        if (input.equalsIgnoreCase("Btn")) {
                            input = "Btn";
                        }
//                    if (et_command.hasFocus()) {
                        Toast.makeText(getContext(), input, Toast.LENGTH_SHORT).show();
//            KeyEvent keyEventDown = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
//            KeyEvent keyEventUp = new KeyEvent(KeyEvent.ACTION_UP, keyCode);
//
//            editTextTextPersonName.onKeyDown(keyCode, keyEventDown);
//            editTextTextPersonName.onKeyUp(keyCode, keyEventUp);


                        int start = Math.max(et_command.getSelectionStart(), 0);
                        int end = Math.max(et_command.getSelectionEnd(), 0);
                        et_command.getText().replace(Math.min(start, end), Math.max(start, end),
                                input, 0, input.length());


                        if (et_command.length() == 0) {
                            return;
                        }
                    } else if (DialogCursor == 2) {

                        if (input.equalsIgnoreCase("Btn")) {
                            input = "Btn";
                        }

                        Toast.makeText(getContext(), input, Toast.LENGTH_SHORT).show();


                        int start = Math.max(et_command.getSelectionStart(), 0);
                        int end = Math.max(et_command.getSelectionEnd(), 0);
                        et_command.getText().replace(Math.min(start, end), Math.max(start, end),
                                input, 0, input.length());


                        if (et_command.length() == 0) {
                            return;
                        }
                    } else if (DialogCursor == 3) {

                        if (input.equalsIgnoreCase("PLU")) {
                            input = "Btn";
                        }
//                    if (et_command.hasFocus()) {
                        Toast.makeText(getContext(), input, Toast.LENGTH_SHORT).show();
//            KeyEvent keyEventDown = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
//            KeyEvent keyEventUp = new KeyEvent(KeyEvent.ACTION_UP, keyCode);
//
//            editTextTextPersonName.onKeyDown(keyCode, keyEventDown);
//            editTextTextPersonName.onKeyUp(keyCode, keyEventUp);


                        int start = Math.max(et_command.getSelectionStart(), 0);
                        int end = Math.max(et_command.getSelectionEnd(), 0);
                        et_command.getText().replace(Math.min(start, end), Math.max(start, end),
                                input, 0, input.length());


                        if (et_command.length() == 0) {
                            return;
                        }
                    } else if (DialogCursor == 4) {

                        if (input.equalsIgnoreCase("PLU")) {
                            input = "Btn";
                        }
//                    if (et_command.hasFocus()) {
                        Toast.makeText(getContext(), input, Toast.LENGTH_SHORT).show();
//            KeyEvent keyEventDown = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
//            KeyEvent keyEventUp = new KeyEvent(KeyEvent.ACTION_UP, keyCode);
//
//            editTextTextPersonName.onKeyDown(keyCode, keyEventDown);
//            editTextTextPersonName.onKeyUp(keyCode, keyEventUp);


                        int start = Math.max(et_command.getSelectionStart(), 0);
                        int end = Math.max(et_command.getSelectionEnd(), 0);
                        et_command.getText().replace(Math.min(start, end), Math.max(start, end),
                                input, 0, input.length());


                        if (et_command.length() == 0) {
                            return;
                        }
                    } else if (DialogCursor == 6) {

                    } else if (showReference == 1) {
                        Log.e("TAG", "SimulateKeyboard: show Reference");
                        int start = Math.max(et_referenceNumber.getSelectionStart(), 0);
                        int end = Math.max(et_referenceNumber.getSelectionEnd(), 0);
                        et_referenceNumber.getText().replace(Math.min(start, end), Math.max(start, end),
                                input, 0, input.length());


                        if (et_referenceNumber.length() == 0) {
                            return;

                        }
                    } else {
                        et_cash.requestFocus();
                        if (et_cash.hasFocus()) {
                            if (et_cash.hasFocus()) {
                                Toast.makeText(getContext(), input, Toast.LENGTH_SHORT).show();
//            KeyEvent keyEventDown = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
//            KeyEvent keyEventUp = new KeyEvent(KeyEvent.ACTION_UP, keyCode);
//
//            editTextTextPersonName.onKeyDown(keyCode, keyEventDown);
//            editTextTextPersonName.onKeyUp(keyCode, keyEventUp);


                                int start = Math.max(et_cash.getSelectionStart(), 0);
                                int end = Math.max(et_cash.getSelectionEnd(), 0);
                                et_cash.getText().replace(Math.min(start, end), Math.max(start, end),
                                        input, 0, input.length());


                                if (et_cash.length() == 0) {
                                    return;
                                }
                            }


                        }
                    }
                    Log.e("TAG", "SimulateKeyboard: show Reference" + DialogCursor + "  " + showReference);
//                }

                }


            }

        }


        if (input.equalsIgnoreCase("Invoice")){
            try{
                alertDialog.dismiss();
            }
            catch (Exception ex){

            }


            invoice();
        }
        if (input.equalsIgnoreCase("Shift")){
            try{
                alertDialog.dismiss();
            }
            catch (Exception ex){

            }

            shift();
        }
        if (input.equalsIgnoreCase("Payment")){
            try{
                alertDialog.dismiss();
            }
            catch (Exception ex){

            }

            checkOut();
        }
        if(input.equalsIgnoreCase("PO") || input.equalsIgnoreCase("RA")){
            startActivity(new Intent(view.getContext(), cashier_cash.class));
        }

        if (input.equalsIgnoreCase("Void")){
            CancelSale();


        }



        if (keyboardCursor==3){
            if (input.equalsIgnoreCase("Total")){


                confirmCancelSale();
                alertDialog.dismiss();


            }
            if (input.equalsIgnoreCase("Sub Total")){
                alertDialog.dismiss();
            }
        }

        if (input.equalsIgnoreCase("Clear")){
            if (DialogCursor==1) {


                et_command.setText("");

            }
        }



        if (input.equalsIgnoreCase("EC")){

            if (alertDialogQty!=null && alertDialogQty.isShowing()){

                int length = et_quantity.getText().length();
                if (length > 0) {
                    et_quantity.getText().delete(length - 1, length);

                }
            }
            else {

                if (DialogCursor == 1) {


                    int length = et_command.getText().length();
                    if (length > 0) {
                        et_command.getText().delete(length - 1, length);

                    }
                }
                if (DialogCursor == 2) {


                    int length = et_command.getText().length();
                    if (length > 0) {
                        et_command.getText().delete(length - 1, length);

                    }
                }
                if (DialogCursor == 3) {

                    int length = et_command.getText().length();
                    if (length > 0) {
                        et_command.getText().delete(length - 1, length);

                    }
                }
            }


        }



        if (input.equalsIgnoreCase("Cash Payment"))
        {
            keyboardCursor=0;
            DialogCursor=0;

            cashPayment();
        }
        if (input.equalsIgnoreCase("Credit Payment")){
            try {
                keyboardCursor=0;
                DialogCursor=0;
                alertDialog.dismiss();
            }catch (Exception ex){

            }
            creditCardPayment();
        }
        if (input.equalsIgnoreCase("Debit Payment")){
            try {
                keyboardCursor=0;
                DialogCursor=0;
                alertDialog.dismiss();
            }catch (Exception ex){

            }
            debitCardPayment();
        }
        if(input.equalsIgnoreCase("Other Payment")){
            try {
                keyboardCursor=0;
                DialogCursor=0;

                alertDialog.dismiss();
            }catch (Exception ex){

            }
            showingOtherPayment();
        }
        if (input.equalsIgnoreCase("Discount")){
            try {
                alertDialog.dismiss();
            }catch (Exception ex){

            }
            showingDiscountList();
        }
        if (input.equalsIgnoreCase("Diplomat")){
            diplomatFunction();
        }
        if (input.equalsIgnoreCase("Sub Total")){
            et_cash.setText(lbl_due.getText().toString());
        }
        if (input.equalsIgnoreCase("Clear")){
            et_cash.setText("");
        }
        if (input.equalsIgnoreCase("EC")){
            if (et_cash.hasFocus()){
                int length = et_cash.getText().length();
                if (length > 0) {
                    et_cash.getText().delete(length - 1, length);
                }
            }

        }
        if (input.equalsIgnoreCase("D14")){
            showAdditionalInfo();
        }
        if (input.equalsIgnoreCase("D13")){
            showAdditionalInfoCard();
        }


        if (input.equalsIgnoreCase("EXIT")){

            if (alertDialogQty!=null && alertDialogQty.isShowing()){
                alertDialogQty.dismiss();
                alertDialog.dismiss();
                alertDialogQty.dismiss();
                DialogCursor=0;
                checkOut();
            }
            else{

                if(DialogCursor==1){
                    Log.d("TAG", "SimulateKeyboard: Credit Card");
                    alertDialog.dismiss();
                    DialogCursor=0;
                }
                else if(DialogCursor==2){
                    Log.d("TAG", "SimulateKeyboard: Debit Card");
                    alertDialog.dismiss();
                    DialogCursor=0;
                }
                else   if(DialogCursor==3){
                    Log.d("TAG", "SimulateKeyboard: Otherpayment");
                    alertDialog.dismiss();
                    DialogCursor=0;
                }
                else  if(DialogCursor==4){
                    Log.d("TAG", "SimulateKeyboard: Discount");
                    alertDialog.dismiss();
                    DialogCursor=0;
                }
                else if (DialogCursor==5){
                    Log.d("TAG", "SimulateKeyboard: Cust Info Exit");
                    alertDialog.dismiss();
                    DialogCursor=0;
                }
                else{
                    Log.d("TAG", "SimulateKeyboard: Else");
                }

            }



        }


        if(input.equalsIgnoreCase("Total")){

            if (alertDialogQty!=null && alertDialogQty.isShowing()){

                if (et_quantity.getText().length()==0){
                    Toast.makeText(getContext(), "PLEASE INPUT AMOUNT", Toast.LENGTH_SHORT).show();
                }
                else{
                    openPriceDiscount(et_quantity.getText().toString());

                    alertDialog.dismiss();
                    alertDialogQty.dismiss();
                    DialogCursor=0;
                    checkOut();
                }



            }else {


                if (keyboardCursor == 01) {
                    cashConfirm();
                    alertDialog.dismiss();
                    keyboardCursor = 0;
                    // et_cash.setText("");
                } else if (DialogCursor == 4) {
                    //DiscountSelection();
                    String str = removeWords(et_command.getText().toString(), "Btn");
                    int Cursor = Integer.parseInt(str) - 1;
                    DiscountSelection(Cursor);
                    // DialogCursor=0;
//                alertDialog.dismiss();
//                DialogCursor=0;
//                checkOut();
                    //test
                    // Toast.makeText(getContext(),str, Toast.LENGTH_SHORT).show();
                } else if (showReference == 1) {


                    alertDialog.dismiss();
                    otherPaymentMode = PaymentNameList.get(otherPaymentPosition);
                    otherPaymentReference = et_referenceNumber.getText().toString();
                    Toast.makeText(getContext(), et_referenceNumber.getText().toString(), Toast.LENGTH_SHORT).show();


                    showReference = 0;
                    DialogCursor = 33;
                    otherPayment();
                    // et_cash.setText("");
                } else if (DialogCursor == 1) {
                    if (et_command.getText().length() == 0) {
                        Toast.makeText(getContext(), "No Btn command inputted", Toast.LENGTH_SHORT).show();///
                    } else {

                        //  Toast.makeText(getContext(), "enter credit okay", Toast.LENGTH_SHORT).show();
                        String index = et_command.getText().toString();
                        String indexReplace = index.replace("Btn", "");
                        int indexNum = Integer.parseInt(indexReplace) - 1;
                        alertDialog.dismiss();
                        creditCardPaymentDetails(BankListCredit.get(indexNum));

                    }


                } else if (DialogCursor == 11) {
                    Toast.makeText(getContext(), "Final Confirming credit card", Toast.LENGTH_SHORT).show();
                    finalCreditConfirm(FinalConfirmingInsertAmount);
                    alertDialog.dismiss();
                    DialogCursor = 0;
                } else if (DialogCursor == 2) {
                    if (et_command.getText().length() == 0) {
                        Toast.makeText(getContext(), "No Btn command inputted", Toast.LENGTH_SHORT).show();
                    } else {

                        //  Toast.makeText(getContext(), "enter credit okay", Toast.LENGTH_SHORT).show();
                        String index = et_command.getText().toString();
                        String indexReplace = index.replace("Btn", "");
                        int indexNum = Integer.parseInt(indexReplace) - 1;
                        Toast.makeText(getContext(), BankListDebit.get(indexNum), Toast.LENGTH_SHORT).show();


                        alertDialog.dismiss();
                        debitCardPaymentDetails(BankListDebit.get(indexNum));

                    }


                } else if (DialogCursor == 22) {
                    Toast.makeText(getContext(), "Final Confirming debit card", Toast.LENGTH_SHORT).show();
                    finalCreditConfirm(FinalConfirmingInsertAmount);
                    alertDialog.dismiss();
                    DialogCursor = 0;
                } else if (DialogCursor == 3) {

                    if (et_command.getText().length() == 0) {
                        Toast.makeText(getContext(), "No Btn command inputted", Toast.LENGTH_SHORT).show();
                    } else {

                        //  Toast.makeText(getContext(), "enter credit okay", Toast.LENGTH_SHORT).show();
                        String index = et_command.getText().toString();
                        String indexReplace = index.replace("Btn", "");
                        int indexNum = Integer.parseInt(indexReplace) - 1;
                        //Toast.makeText(getContext(), "Other payment :" + otherPaymentList.get(indexNum).toString(), Toast.LENGTH_SHORT).show();

                        Toast.makeText(getContext(), "confirming" + DialogCursor + "  " + showReference, Toast.LENGTH_SHORT).show();
                        otherPaymentSelection(indexNum);

                        DialogCursor = 0;


                    }


                } else if (DialogCursor == 33) {
                    Toast.makeText(getContext(), "confirming" + DialogCursor + "  " + showReference, Toast.LENGTH_SHORT).show();
                    // DialogCursor=3;
                    confirmOtherPayment(FinalConfirmingInsertAmount);
                }
//            else{
//
//                Toast.makeText(getContext(), "SOMETHING WENT WRONG" + DialogCursor + "  " + showReference, Toast.LENGTH_SHORT).show();
//            }


            }


        }
        if (input.equalsIgnoreCase("Sub Total")){
            Log.d("TAG", "SimulateKeyboard: Sub total");

            if (DialogCursor==0 || keyboardCursor ==0){
                et_cash.setText(lbl_due.getText().toString());
            }
            else if (keyboardCursor==1 || DialogCursor ==11 || DialogCursor == 22){
                alertDialog.dismiss();
            }
            try {
                alertDialog.dismiss();
            }
            catch (Exception ex){
                Log.e("TAG", "SimulateKeyboard: "+ex.getMessage().toString() );
            }

        }











    }


    int otherPaymentPosition;

    public static int StringToInt(String strParse) {
        int iValue = 0;
        try {
            if (strParse.length() > 0) {
                iValue = Integer.parseInt(strParse);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return iValue;
    }

    ArrayList<invoice_fragment_button_model> FunctionList= new ArrayList<>();


    String finalTransactionNumber;



    private void saveSCDInfo(){

        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                custInfo.setCustName(et_custName.getText().toString());
                custInfo.setCustIDNo((et_custIDNo.getText().toString()));
                custInfo.setCustTIN((et_custTIN.getText().toString()));
                Log.e("finalTransactionNumber", "run: "+finalTransactionNumber);
                //  discountComputation();


                Log.e("discount type",discountType.substring(0,3));
                Log.e("discount type",discountValue);
                Log.e("discount Exclude",discountExlude);
                Log.e("ProRated",ProRated);
                Log.e("MaxDiscountAmount",MaxDiscountAmt);


                Double discTransTotal=0.00;
                Double discTransVatableSales=0.00;
                Double discTransDiscount=0.00;
                Double discTransVatAmount=0.00;
                Double discTransVatExemptSales=0.00;
                Double discTransZeroRatedSales=0.00;
                Double discTransLessVat=0.00;
                Double discServiceCharge=0.00;
                Double discTransDueAmount=0.00;





                if (discCategory.equals("SCD") || discCategory.equals("PWD")){

                    //   custInfo.showDialog(getContext());
                    showDialog();
                    discountFormat=2;
                    discountLabelIndicator=3;
                    Log.e("DISCOUNT TRANSACTION","SCD");
                    discTransTotal=cashierItem.getTotalDueAmount();

                    if (discountExlude.equals("YES")){
                        Log.e("DISCOUNT EXCLUDE IF","YES");










                        //Context context,String transNo,Double totalAmt,String discountValu
                        //cashier_payment_prorated prorated = new cashier_payment_prorated();
                        //prorated.pro_rated_computation(getContext(),);


                       // prorated_class.setMaxDiscAmt();
                        discTransDiscount = prorated_class.discount_per_card(discTransTotal,(discountValue),Double.parseDouble(MaxDiscountAmt));
                        Toast.makeText(getContext(), "MaxDiscountAmt" + MaxDiscountAmt, Toast.LENGTH_SHORT).show();
                        Toast.makeText(getContext(), "Final Discount " + discTransDiscount.toString(), Toast.LENGTH_SHORT).show();


                        Log.e("NumberOfPax", String.valueOf(prorated_class.getNumberOfPax()) );
                        Log.e("NumberOfPax", String.valueOf(prorated_class.getNumberOfCard()) );

                        if (prorated_class.getNumberOfPax()>prorated_class.getNumberOfCard()){

                            int totalNumberOfReg = prorated_class.getNumberOfPax()-prorated_class.getNumberOfCard();
                            discTransVatableSales = ((totalNumberOfReg*prorated_class.getPricePerPax())/1.12);
                            discTransVatAmount = (discTransVatableSales*0.12);
                            Log.e("VATABLESALES", String.valueOf(discTransVatableSales) );



                        }
                        else{
                            int totalNumberOfReg = 1;
                            prorated_class.read_number_card(getContext(),transactionIDFinal);
                            discTransVatableSales = ((totalNumberOfReg*prorated_class.getPricePerPax())/1.12);
                            discTransVatAmount = (discTransVatableSales*0.12);
                            Log.e("VATABLESALES", String.valueOf(discTransVatableSales) );

                           // discTransDiscount= (Double.parseDouble(MaxDiscountAmount)/ 1.12 )* (Double.parseDouble(discountValue)/100)*-1;

                        }





                      // discTransDiscount= (Double.parseDouble(MaxDiscountAmount)/ 1.12 )* (Double.parseDouble(discountValue)/100)*-1;





//                       Log.e("Final disc amt",discTransDiscount.toString());
                     //   discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;

                        // add function per maximum discount


                        if (salesExlude.equals("YES")) {
                            discTransVatExemptSales = discTransTotal / 1.12;
                            discTransLessVat = discTransTotal / 1.12 - discTransTotal;
                           // discTransVatExemptSales = discTransTotal / 1.12 -discTransTotal;
                            Log.e("TAG", "run: tangina" );
                        }
                        else if (salesExlude.equals("NO")){
                            discTransVatExemptSales = discTransTotal;
                            discTransLessVat = discTransTotal  - discTransTotal;
                            Log.e("TAG", "run: tangina2" );
                        }
                        discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;

                        Log.e("-------","---------");
                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                        Log.e("-------","---------");

                        // discTransDiscount=100/1.12*.





                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                        //Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));




                        cashierItem.setTotalAmountToPay((discTransTotal));
                        cashierItem.setVatableAmount(discTransVatableSales);
                        cashierItem.setAmountDiscount(discTransDiscount);

                        cashierItem.setTaxAmount(discTransVatAmount);
                        cashierItem.setVatExemptSale(discTransVatExemptSales);
                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                        cashierItem.setLessVat(discTransLessVat);
                        cashierItem.setTotalDueAmount(discTransDueAmount);


                        //insert
                        if (checkInvoiceReceiptItem.getCount()!=0){
                            DatabaseHandler myDb = new DatabaseHandler(getContext());
                            while(checkInvoiceReceiptItem.moveToNext()){

                                String TransactionID=checkInvoiceReceiptItem.getString(0);
                                String OrderID=checkInvoiceReceiptItem.getString(1);
                                String OrderName=checkInvoiceReceiptItem.getString(2);
                                String OrderQty=checkInvoiceReceiptItem.getString(3);
                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                                String DiscountType=discountType;
                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                                String DiscQty=checkInvoiceReceiptItem.getString(3);
                                //String DiscAmount=String.valueOf((300/1.12*(Double.parseDouble(discountValue)/100))*-1);
                                String DiscAmount=String.valueOf(((Double.parseDouble(OrderPriceTotal)/discTransTotal)*discTransDiscount));
                                Log.e("Super Final Disc Amt",DiscAmount);
                                String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
                                String DiscPercent=discountValue;

                                // String vat=tv_lessVat.getText().toString();
                                String DiscBuyerName=custInfo.getCustName();
                                String DiscIdNumber=custInfo.getCustIDNo();
                                String DiscOther=custInfo.getCustTIN();


                                finalTransactionNumber=TransactionID.toString();






                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                        (TransactionID,
                                                OrderID,
                                                OrderName,
                                                OrderQty,
                                                OrderPrice,
                                                OrderPriceTotal,
                                                TransactionTime,
                                                TransactionDate,
                                                DiscountType,
                                                ItemRemarks,
                                                DiscQty,
                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                DiscPercent,
                                                String.format("%7.2f", Double.parseDouble(vat)),
                                                DiscBuyerName,
                                                DiscIdNumber,
                                                DiscOther );


                                boolean isInserted2 = myDb.insertDiscountInfo(
                                        TransactionID,DiscBuyerName,DiscIdNumber,DiscOther);


                            }

                        }




                    }
                    if (discountExlude.equals("NO") && ProRated.equals("NO")){


                        Log.e("DISCOUNT EXCLUDE IF","NO");
                        discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
                        Log.e("TOTAL",String.valueOf(discTransTotal));
                        Log.e("DISCOUNT",String.valueOf(discTransDiscount));



                        if (RemoveDiscountOnVatsales.equals("YES")){
                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                        }
                        else{
                            discTransVatableSales=((discTransTotal)/1.12);
                        }



                        Log.e("DISCOUNT",String.valueOf(discTransVatableSales));

                        // discTransVatExemptSales=discTransTotal/1.12;
                        // discTransLessVat = discTransTotal/1.12-discTransTotal;
                        discTransDueAmount=discTransTotal+discTransDiscount;
                        discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;


                        Log.e("-------","---------");
                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                        Log.e("-------","---------");

                        // discTransDiscount=100/1.12*.





                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                        cashierItem.setTotalAmountToPay(discTransTotal);
                        cashierItem.setVatableAmount(discTransVatableSales);
                        cashierItem.setAmountDiscount(discTransDiscount);
                        cashierItem.setTaxAmount(discTransVatAmount);
                        cashierItem.setVatExemptSale(discTransVatExemptSales);
                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                        cashierItem.setLessVat(discTransLessVat);
                        cashierItem.setTotalDueAmount(discTransDueAmount);










                        //insert
                        if (checkInvoiceReceiptItem.getCount()!=0){
                            DatabaseHandler myDb = new DatabaseHandler(getContext());
                            while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                String TransactionID=checkInvoiceReceiptItem.getString(0);
                                String OrderID=checkInvoiceReceiptItem.getString(1);
                                String OrderName=checkInvoiceReceiptItem.getString(2);
                                String OrderQty=checkInvoiceReceiptItem.getString(3);
                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                                String DiscountType=discountType;
                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                                String DiscQty=checkInvoiceReceiptItem.getString(3);
                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                                Log.e("DiscAmount",DiscAmount);
                                String DiscPercent=discountValue;
                                String vat="0.00";
                                // String vat=tv_lessVat.getText().toString();
                                String DiscBuyerName="test2";
                                String DiscIdNumber=" ";
                                String DiscOther=" ";





                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                        (TransactionID,
                                                OrderID,
                                                OrderName,
                                                OrderQty,
                                                OrderPrice,
                                                OrderPriceTotal,
                                                TransactionTime,
                                                TransactionDate,
                                                DiscountType,
                                                ItemRemarks,
                                                DiscQty,
                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                DiscPercent,
                                                String.format("%7.2f", Double.parseDouble(vat)),
                                                DiscBuyerName,
                                                DiscIdNumber,
                                                DiscOther );
                            }

                        }




                    }
                    if (discountExlude.equals("NO") && ProRated.equals("YES")){


                        Log.e("PRORATED","YES");
                        discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
                        Log.e("TOTAL",String.valueOf(discTransTotal));
                        Log.e("DISCOUNT",String.valueOf(discTransDiscount));



                        if (RemoveDiscountOnVatsales.equals("YES")){
                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                        }
                        else{
                            discTransVatableSales=((discTransTotal)/1.12);
                        }



                        Log.e("DISCOUNT",String.valueOf(discTransVatableSales));

                        // discTransVatExemptSales=discTransTotal/1.12;
                        // discTransLessVat = discTransTotal/1.12-discTransTotal;
                        discTransDueAmount=discTransTotal+discTransDiscount;
                        discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;


                        Log.e("-------","---------");
                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                        Log.e("-------","---------");

                        // discTransDiscount=100/1.12*.





                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                        cashierItem.setTotalAmountToPay(discTransTotal);
                        cashierItem.setVatableAmount(discTransVatableSales);
                        cashierItem.setAmountDiscount(discTransDiscount);
                        cashierItem.setTaxAmount(discTransVatAmount);
                        cashierItem.setVatExemptSale(discTransVatExemptSales);
                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                        cashierItem.setLessVat(discTransLessVat);
                        cashierItem.setTotalDueAmount(discTransDueAmount);










                        //insert
                        if (checkInvoiceReceiptItem.getCount()!=0){
                            DatabaseHandler myDb = new DatabaseHandler(getContext());
                            while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                String TransactionID=checkInvoiceReceiptItem.getString(0);
                                String OrderID=checkInvoiceReceiptItem.getString(1);
                                String OrderName=checkInvoiceReceiptItem.getString(2);
                                String OrderQty=checkInvoiceReceiptItem.getString(3);
                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                                String DiscountType=discountType;
                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                                String DiscQty=checkInvoiceReceiptItem.getString(3);
                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                                String DiscAmount=String.valueOf(((discTransDiscount)));;
                                Log.e("DiscAmount",DiscAmount);
                                String DiscPercent=discountValue;
                                String vat="0.00";
                                // String vat=tv_lessVat.getText().toString();
                                String DiscBuyerName=" ";
                                String DiscIdNumber=" ";
                                String DiscOther=" ";





                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                        (TransactionID,
                                                OrderID,
                                                OrderName,
                                                OrderQty,
                                                OrderPrice,
                                                OrderPriceTotal,
                                                TransactionTime,
                                                TransactionDate,
                                                DiscountType,
                                                ItemRemarks,
                                                DiscQty,
                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                DiscPercent,
                                                String.format("%7.2f", Double.parseDouble(vat)),
                                                DiscBuyerName,
                                                DiscIdNumber,
                                                DiscOther );
                            }

                        }




                    }
                }
//                if (discCategory.equals("PWD")){
//                    showDialog();
//                    //  custInfo.showDialog(getContext());
//                    discountFormat=2;
//                    discountLabelIndicator=3;
//                    Log.e("DISCOUNT TRANSACTION","SCD");
//                    discTransTotal=cashierItem.getTotalDueAmount();
//
//                    if (discountExlude.equals("YES")){
//                        Log.e("DISCOUNT EXCLUDE IF","YES");
//                        discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                        if (salesExlude.equals("YES")) {
//                            discTransVatExemptSales = discTransTotal / 1.12;
//                            discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                        }
//                        else if (salesExlude.equals("NO")){
//                            discTransVatExemptSales = discTransTotal;
//                            discTransLessVat = discTransTotal  - discTransTotal;
//                        }
//                        discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                        Log.e("-------","---------");
//                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                        Log.e("-------","---------");
//
//                        // discTransDiscount=100/1.12*.
//
//
//
//
//
//                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                        cashierItem.setTotalAmountToPay((discTransTotal));
//                        cashierItem.setVatableAmount(discTransVatableSales);
//                        cashierItem.setAmountDiscount(discTransDiscount);
//                        cashierItem.setTaxAmount(discTransVatAmount);
//                        cashierItem.setVatExemptSale(discTransVatExemptSales);
//                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                        cashierItem.setLessVat(discTransLessVat);
//                        cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                        //insert
//                        if (checkInvoiceReceiptItem.getCount()!=0){
//                            DatabaseHandler myDb = new DatabaseHandler(getContext());
//                            while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf(discTransDiscount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                String DiscountType=discountType;
//                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                                String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                                String DiscPercent=discountValue;
//                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//
//                                String DiscBuyerName=" ";
//                                String DiscIdNumber=" ";
//                                String DiscOther=" ";
//
//
//
//
//
//
//
//                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                        (TransactionID,
//                                                OrderID,
//                                                OrderName,
//                                                OrderQty,
//                                                OrderPrice,
//                                                OrderPriceTotal,
//                                                TransactionTime,
//                                                TransactionDate,
//                                                DiscountType,
//                                                ItemRemarks,
//                                                DiscQty,
//                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                DiscPercent,
//                                                String.format("%7.2f", Double.parseDouble(vat)),
//                                                DiscBuyerName,
//                                                DiscIdNumber,
//                                                DiscOther );
//                            }
//
//                        }
//
//
//
//
//                    }
//                    if (discountExlude.equals("NO") && ProRated.equals("NO")){
//                        Log.e("DISCOUNT EXCLUDE IF","NO");
//                        discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                        Log.e("TOTAL",String.valueOf(discTransTotal));
//                        Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//
//                        if (RemoveDiscountOnVatsales.equals("YES")){
//                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                        }
//                        else{
//                            discTransVatableSales=((discTransTotal)/1.12);
//                        }
//
//
////
////
////                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                        Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                        // discTransVatExemptSales=discTransTotal/1.12;
//                        // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                        discTransDueAmount=discTransTotal+discTransDiscount;
//                        discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                        Log.e("-------","---------");
//                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                        Log.e("-------","---------");
//
//                        // discTransDiscount=100/1.12*.
//
//
//
//
//
//                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                        cashierItem.setTotalAmountToPay(discTransTotal);
//                        cashierItem.setVatableAmount(discTransVatableSales);
//                        cashierItem.setAmountDiscount(discTransDiscount);
//                        cashierItem.setTaxAmount(discTransVatAmount);
//                        cashierItem.setVatExemptSale(discTransVatExemptSales);
//                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                        cashierItem.setLessVat(discTransLessVat);
//                        cashierItem.setTotalDueAmount(discTransDueAmount);
////
//
//
//
//
//
//
//
//
//
//                        //insert
//                        if (checkInvoiceReceiptItem.getCount()!=0){
//                            DatabaseHandler myDb = new DatabaseHandler(getContext());
//                            while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                String DiscountType=discountType;
//                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//
//                                String DiscPercent=discountValue;
//                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                String vat="0.00";
//                                String DiscBuyerName=" ";
//                                String DiscIdNumber=" ";
//                                String DiscOther=" ";
//
//
//
//
//
//
//
//                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                        (TransactionID,
//                                                OrderID,
//                                                OrderName,
//                                                OrderQty,
//                                                OrderPrice,
//                                                OrderPriceTotal,
//                                                TransactionTime,
//                                                TransactionDate,
//                                                DiscountType,
//                                                ItemRemarks,
//                                                DiscQty,
//                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                DiscPercent,
//                                                String.format("%7.2f", Double.parseDouble(vat)),
//                                                DiscBuyerName,
//                                                DiscIdNumber,
//                                                DiscOther );
//                            }
//
//                        }
//
//
//
//
//                    }
//                    if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                        Log.e("PRORATED","YES");
//                        discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                        Log.e("TOTAL",String.valueOf(discTransTotal));
//                        Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                        if (RemoveDiscountOnVatsales.equals("YES")){
//                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                        }
//                        else{
//                            discTransVatableSales=((discTransTotal)/1.12);
//                        }
//
//
//
//                        Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                        // discTransVatExemptSales=discTransTotal/1.12;
//                        // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                        discTransDueAmount=discTransTotal+discTransDiscount;
//                        discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                        Log.e("-------","---------");
//                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                        Log.e("-------","---------");
//
//                        // discTransDiscount=100/1.12*.
//
//
//
//
//
//                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                        cashierItem.setTotalAmountToPay(discTransTotal);
//                        cashierItem.setVatableAmount(discTransVatableSales);
//                        cashierItem.setAmountDiscount(discTransDiscount);
//                        cashierItem.setTaxAmount(discTransVatAmount);
//                        cashierItem.setVatExemptSale(discTransVatExemptSales);
//                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                        cashierItem.setLessVat(discTransLessVat);
//                        cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                        //insert
//                        if (checkInvoiceReceiptItem.getCount()!=0){
//                            DatabaseHandler myDb = new DatabaseHandler(getContext());
//                            while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                String DiscountType=discountType;
//                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                                String DiscAmount=String.valueOf(((discTransDiscount)));;
//                                Log.e("DiscAmount",DiscAmount);
//                                String DiscPercent=discountValue;
//                                String vat="0.00";
//                                // String vat=tv_lessVat.getText().toString();
//                                String DiscBuyerName=" ";
//                                String DiscIdNumber=" ";
//                                String DiscOther=" ";
//
//
//
//
//
//                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                        (TransactionID,
//                                                OrderID,
//                                                OrderName,
//                                                OrderQty,
//                                                OrderPrice,
//                                                OrderPriceTotal,
//                                                TransactionTime,
//                                                TransactionDate,
//                                                DiscountType,
//                                                ItemRemarks,
//                                                DiscQty,
//                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                DiscPercent,
//                                                String.format("%7.2f", Double.parseDouble(vat)),
//                                                DiscBuyerName,
//                                                DiscIdNumber,
//                                                DiscOther );
//                            }
//
//                        }
//
//
//
//
//                    }
//                }
                else  if (discCategory.equals("REG")){
                    Log.e("OTHER DISCOUNT","YES");

                    discountFormat=2;
                    discountLabelIndicator=4;
                    //  Log.e("DISCOUNT TRANSACTION","PWD");
                    discTransTotal=cashierItem.getTotalDueAmount();
                    Log.e("OTHER DISCTOTAL",String.valueOf(discTransTotal));
                    if (discountExlude.equals("YES")){




                        discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;


//                                        if (salesExlude.equals("YES")) {
//
//                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                           // discTransVatableSales=discTransTotal/1.12;
//                                        }
//                                        else if (salesExlude.equals("NO")){
//                                            discTransVatableSales=((discTransTotal+discTransDiscount));
//                                           // discTransVatableSales=discTransTotal/1.12;
//                                        }

                        if (RemoveDiscountOnVatsales.equals("YES")){
                            Log.e("REMOVE DISC ON VAT","YES");
                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                        }
                        else{
                            Log.e("REMOVE DISC ON VAT","NO");
                            discTransVatableSales=((discTransTotal)/1.12);
                        }

                        //discTransVatAmount = discTransTotal/1.12-discTransTotal;
                        discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;

                        // discTransDiscount=100/1.12*.





                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));



                        //insert
                        if (checkInvoiceReceiptItem.getCount()!=0){
                            DatabaseHandler myDb = new DatabaseHandler(getContext());
                            while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                String TransactionID=checkInvoiceReceiptItem.getString(0);
                                String OrderID=checkInvoiceReceiptItem.getString(1);
                                String OrderName=checkInvoiceReceiptItem.getString(2);
                                String OrderQty=checkInvoiceReceiptItem.getString(3);
                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                                String DiscountType=discountType;
                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                                String DiscQty=checkInvoiceReceiptItem.getString(3);
                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
                                String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
                                String DiscPercent=discountValue;
                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                                // String vat=tv_lessVat.getText().toString();
                                String DiscBuyerName=" ";
                                String DiscIdNumber=" ";
                                String DiscOther=" ";








                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                        (TransactionID,
                                                OrderID,
                                                OrderName,
                                                OrderQty,
                                                OrderPrice,
                                                OrderPriceTotal,
                                                TransactionTime,
                                                TransactionDate,
                                                DiscountType,
                                                ItemRemarks,
                                                DiscQty,
                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                DiscPercent,
                                                String.format("%7.2f", Double.parseDouble(vat)),
                                                DiscBuyerName,
                                                DiscIdNumber,
                                                DiscOther );
                            }

                        }




                    }
                    if (discountExlude.equals("NO")&& ProRated.equals("NO")){
                        discTransTotal=cashierItem.getTotalDueAmount();
                        Log.e("OTHER exclude NO",String.valueOf(discTransTotal));

                        discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
                        Log.e("total",String.valueOf(discTransTotal));
                        Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
                        Log.e("total discount",String.valueOf(discTransDiscount));


                        if (RemoveDiscountOnVatsales.equals("YES")){
                            Log.e("REMOVE DISC ON VAT","YES");
                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                            discTransVatAmount=discTransTotal-(discTransVatableSales);
                        }
                        else{
                            Log.e("REMOVE DISC ON VAT","NO");
                            discTransVatableSales=((discTransTotal)/1.12);
                            discTransVatAmount=discTransTotal-(discTransVatableSales);
                        }





                        //  discTransVatableSales=discTransTotal/1.12;
                        //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
                        //discTransVatAmount = discTransTotal/1.12-discTransTotal;
                        discTransDueAmount=discTransTotal+discTransDiscount;

                        // discTransDiscount=100/1.12*.





                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));



                        //insert
                        if (checkInvoiceReceiptItem.getCount()!=0){
                            DatabaseHandler myDb = new DatabaseHandler(getContext());
                            while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
//                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
//                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
//                                               // String DiscAmount=String.valueOf(discTransDiscount);
//                                                Log.e("INSERT DISC",DiscAmount);
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                String TransactionID=checkInvoiceReceiptItem.getString(0);
                                String OrderID=checkInvoiceReceiptItem.getString(1);
                                String OrderName=checkInvoiceReceiptItem.getString(2);
                                String OrderQty=checkInvoiceReceiptItem.getString(3);
                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                                String DiscountType=discountType;
                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                                String DiscQty=checkInvoiceReceiptItem.getString(3);
                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);

                                String DiscPercent=discountValue;
                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                                String vat="0.00";
                                String DiscBuyerName=" ";
                                String DiscIdNumber=" ";
                                String DiscOther=" ";








                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                        (TransactionID,
                                                OrderID,
                                                OrderName,
                                                OrderQty,
                                                OrderPrice,
                                                OrderPriceTotal,
                                                TransactionTime,
                                                TransactionDate,
                                                DiscountType,
                                                ItemRemarks,
                                                DiscQty,
                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                DiscPercent,
                                                String.format("%7.2f", Double.parseDouble(vat)),
                                                DiscBuyerName,
                                                DiscIdNumber,
                                                DiscOther );
                            }

                        }




                    }
                    if (discountExlude.equals("NO") && ProRated.equals("YES")){


                        Log.e("PRORATED","YES");
                        discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
                        Log.e("TOTAL",String.valueOf(discTransTotal));
                        Log.e("DISCOUNT",String.valueOf(discTransDiscount));



                        if (RemoveDiscountOnVatsales.equals("YES")){
                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                        }
                        else{
                            discTransVatableSales=((discTransTotal)/1.12);
                        }



                        Log.e("DISCOUNT",String.valueOf(discTransVatableSales));

                        // discTransVatExemptSales=discTransTotal/1.12;
                        // discTransLessVat = discTransTotal/1.12-discTransTotal;
                        discTransDueAmount=discTransTotal+discTransDiscount;
                        discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;


                        Log.e("-------","---------");
                        Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                        Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                        Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                        Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                        Log.e("-------","---------");

                        // discTransDiscount=100/1.12*.





                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                        cashierItem.setTotalAmountToPay(discTransTotal);
                        cashierItem.setVatableAmount(discTransVatableSales);
                        cashierItem.setAmountDiscount(discTransDiscount);
                        cashierItem.setTaxAmount(discTransVatAmount);
                        cashierItem.setVatExemptSale(discTransVatExemptSales);
                        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                        cashierItem.setLessVat(discTransLessVat);
                        cashierItem.setTotalDueAmount(discTransDueAmount);










                        //insert
                        if (checkInvoiceReceiptItem.getCount()!=0){
                            DatabaseHandler myDb = new DatabaseHandler(getContext());
                            while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                String TransactionID=checkInvoiceReceiptItem.getString(0);
                                String OrderID=checkInvoiceReceiptItem.getString(1);
                                String OrderName=checkInvoiceReceiptItem.getString(2);
                                String OrderQty=checkInvoiceReceiptItem.getString(3);
                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                                String DiscountType=discountType;
                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                                String DiscQty=checkInvoiceReceiptItem.getString(3);
                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                                String DiscAmount=String.valueOf(((discTransDiscount)));;
                                Log.e("DiscAmount",DiscAmount);
                                String DiscPercent=discountValue;
                                String vat="0.00";
                                // String vat=tv_lessVat.getText().toString();
                                String DiscBuyerName=" ";
                                String DiscIdNumber=" ";
                                String DiscOther=" ";





                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                        (TransactionID,
                                                OrderID,
                                                OrderName,
                                                OrderQty,
                                                OrderPrice,
                                                OrderPriceTotal,
                                                TransactionTime,
                                                TransactionDate,
                                                DiscountType,
                                                ItemRemarks,
                                                DiscQty,
                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                DiscPercent,
                                                String.format("%7.2f", Double.parseDouble(vat)),
                                                DiscBuyerName,
                                                DiscIdNumber,
                                                DiscOther );
                            }

                        }




                    }


                }






                if (discCategory.equals("SCD")){
                    ll_forDiscountType.setVisibility(View.VISIBLE);
                    lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
                }
                else if (discCategory.equals("PWD")){
                    ll_forDiscountType.setVisibility(View.VISIBLE);
                    lbl_discountLabel.setText("PWD DISCOUNT");
                }
                else if (discountType.equals("DIPLOMAT")){
                    ll_forDiscountType.setVisibility(View.VISIBLE);
                    lbl_discountLabel.setText("DIPLOMAT");
                }
                else if (discCategory.equals("REG")){
                    ll_forDiscountType.setVisibility(View.VISIBLE);
                    lbl_discountLabel.setText("REGULAR DISCOUNT");
                }





                //fix labelData for adding vatables sales and vat amount 1/25/23
                loadLabelData();

                cashierItem.setTotalAmountToPay(discTransDueAmount);
                Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
                alertDialog.dismiss();

                //    RefreshScreen();


                DialogCursor=0;
                mapCode2Activate=0;







                Toast.makeText(getContext(), discountType + " Applied", Toast.LENGTH_LONG).show();
                alertDialog.dismiss();
            }
        });

    }
    private void savePWDInfo(){
        custInfo.setCustName(et_custName.getText().toString());
        custInfo.setCustIDNo((et_custIDNo.getText().toString()));
        custInfo.setCustTIN((et_custTIN.getText().toString()));
        //  discountComputation();


        Log.e("discount type",discountType.substring(0,3));
        Log.e("discount type",discountValue);
        Log.e("discount Exclude",discountExlude);
        Log.e("ProRated",ProRated);


        Double discTransTotal=0.00;
        Double discTransVatableSales=0.00;
        Double discTransDiscount=0.00;
        Double discTransVatAmount=0.00;
        Double discTransVatExemptSales=0.00;
        Double discTransZeroRatedSales=0.00;
        Double discTransLessVat=0.00;
        Double discServiceCharge=0.00;
        Double discTransDueAmount=0.00;


        if (discCategory.equals("SCD") || discCategory.equals("PWD")){

            //   custInfo.showDialog(getContext());
            showDialog();
            discountFormat=2;
            discountLabelIndicator=3;
            Log.e("DISCOUNT TRANSACTION","SCD");
            discTransTotal=cashierItem.getTotalDueAmount();

            if (discountExlude.equals("YES")){
                Log.e("DISCOUNT EXCLUDE IF","YES");










                //Context context,String transNo,Double totalAmt,String discountValu
                //cashier_payment_prorated prorated = new cashier_payment_prorated();
                //prorated.pro_rated_computation(getContext(),);


                // prorated_class.setMaxDiscAmt();
                discTransDiscount = prorated_class.discount_per_card(discTransTotal,(discountValue),Double.parseDouble(MaxDiscountAmt));
                Toast.makeText(getContext(), "MaxDiscountAmt" + MaxDiscountAmt, Toast.LENGTH_SHORT).show();
                Toast.makeText(getContext(), "Final Discount " + discTransDiscount.toString(), Toast.LENGTH_SHORT).show();



                // discTransDiscount= (Double.parseDouble(MaxDiscountAmount)/ 1.12 )* (Double.parseDouble(discountValue)/100)*-1;





//                       Log.e("Final disc amt",discTransDiscount.toString());
                //   discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;

                // add function per maximum discount


                if (salesExlude.equals("YES")) {
                    discTransVatExemptSales = discTransTotal / 1.12;
                    discTransLessVat = discTransTotal / 1.12 - discTransTotal;
                }
                else if (salesExlude.equals("NO")){
                    discTransVatExemptSales = discTransTotal;
                    discTransLessVat = discTransTotal  - discTransTotal;
                }
                discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;

                Log.e("-------","---------");
                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                Log.e("-------","---------");

                // discTransDiscount=100/1.12*.





                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));




                cashierItem.setTotalAmountToPay((discTransTotal));
                cashierItem.setVatableAmount(discTransVatableSales);
                cashierItem.setAmountDiscount(discTransDiscount);

                cashierItem.setTaxAmount(discTransVatAmount);
                cashierItem.setVatExemptSale(discTransVatExemptSales);
                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                cashierItem.setLessVat(discTransLessVat);
                cashierItem.setTotalDueAmount(discTransDueAmount);


                //insert
                if (checkInvoiceReceiptItem.getCount()!=0){
                    DatabaseHandler myDb = new DatabaseHandler(getContext());
                    while(checkInvoiceReceiptItem.moveToNext()){

                        String TransactionID=checkInvoiceReceiptItem.getString(0);
                        String OrderID=checkInvoiceReceiptItem.getString(1);
                        String OrderName=checkInvoiceReceiptItem.getString(2);
                        String OrderQty=checkInvoiceReceiptItem.getString(3);
                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
                        String DiscountType=discountType;
                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                        String DiscQty=checkInvoiceReceiptItem.getString(3);
                        //String DiscAmount=String.valueOf((300/1.12*(Double.parseDouble(discountValue)/100))*-1);
                        String DiscAmount=String.valueOf(((Double.parseDouble(OrderPriceTotal)/discTransTotal)*discTransDiscount));
                        Log.e("Super Final Disc Amt",DiscAmount);
                        String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
                        String DiscPercent=discountValue;

                        // String vat=tv_lessVat.getText().toString();
                        String DiscBuyerName=custInfo.getCustName();
                        String DiscIdNumber=custInfo.getCustIDNo();
                        String DiscOther=custInfo.getCustTIN();


                        finalTransactionNumber=TransactionID.toString();






                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                (TransactionID,
                                        OrderID,
                                        OrderName,
                                        OrderQty,
                                        OrderPrice,
                                        OrderPriceTotal,
                                        TransactionTime,
                                        TransactionDate,
                                        DiscountType,
                                        ItemRemarks,
                                        DiscQty,
                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                        DiscPercent,
                                        String.format("%7.2f", Double.parseDouble(vat)),
                                        DiscBuyerName,
                                        DiscIdNumber,
                                        DiscOther );


                        boolean isInserted2 = myDb.insertDiscountInfo(
                                TransactionID,DiscBuyerName,DiscIdNumber,DiscOther);


                    }

                }




            }
            if (discountExlude.equals("NO") && ProRated.equals("NO")){


                Log.e("DISCOUNT EXCLUDE IF","NO");
                discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
                Log.e("TOTAL",String.valueOf(discTransTotal));
                Log.e("DISCOUNT",String.valueOf(discTransDiscount));



                if (RemoveDiscountOnVatsales.equals("YES")){
                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                }
                else{
                    discTransVatableSales=((discTransTotal)/1.12);
                }



                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));

                // discTransVatExemptSales=discTransTotal/1.12;
                // discTransLessVat = discTransTotal/1.12-discTransTotal;
                discTransDueAmount=discTransTotal+discTransDiscount;
                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;


                Log.e("-------","---------");
                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                Log.e("-------","---------");

                // discTransDiscount=100/1.12*.





                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                cashierItem.setTotalAmountToPay(discTransTotal);
                cashierItem.setVatableAmount(discTransVatableSales);
                cashierItem.setAmountDiscount(discTransDiscount);
                cashierItem.setTaxAmount(discTransVatAmount);
                cashierItem.setVatExemptSale(discTransVatExemptSales);
                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                cashierItem.setLessVat(discTransLessVat);
                cashierItem.setTotalDueAmount(discTransDueAmount);










                //insert
                if (checkInvoiceReceiptItem.getCount()!=0){
                    DatabaseHandler myDb = new DatabaseHandler(getContext());
                    while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                        String TransactionID=checkInvoiceReceiptItem.getString(0);
                        String OrderID=checkInvoiceReceiptItem.getString(1);
                        String OrderName=checkInvoiceReceiptItem.getString(2);
                        String OrderQty=checkInvoiceReceiptItem.getString(3);
                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
                        String DiscountType=discountType;
                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                        String DiscQty=checkInvoiceReceiptItem.getString(3);
                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                        Log.e("DiscAmount",DiscAmount);
                        String DiscPercent=discountValue;
                        String vat="0.00";
                        // String vat=tv_lessVat.getText().toString();
                        String DiscBuyerName="test2";
                        String DiscIdNumber=" ";
                        String DiscOther=" ";





                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                (TransactionID,
                                        OrderID,
                                        OrderName,
                                        OrderQty,
                                        OrderPrice,
                                        OrderPriceTotal,
                                        TransactionTime,
                                        TransactionDate,
                                        DiscountType,
                                        ItemRemarks,
                                        DiscQty,
                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                        DiscPercent,
                                        String.format("%7.2f", Double.parseDouble(vat)),
                                        DiscBuyerName,
                                        DiscIdNumber,
                                        DiscOther );
                    }

                }




            }
            if (discountExlude.equals("NO") && ProRated.equals("YES")){


                Log.e("PRORATED","YES");
                discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
                Log.e("TOTAL",String.valueOf(discTransTotal));
                Log.e("DISCOUNT",String.valueOf(discTransDiscount));



                if (RemoveDiscountOnVatsales.equals("YES")){
                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                }
                else{
                    discTransVatableSales=((discTransTotal)/1.12);
                }



                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));

                // discTransVatExemptSales=discTransTotal/1.12;
                // discTransLessVat = discTransTotal/1.12-discTransTotal;
                discTransDueAmount=discTransTotal+discTransDiscount;
                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;


                Log.e("-------","---------");
                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                Log.e("-------","---------");

                // discTransDiscount=100/1.12*.





                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                cashierItem.setTotalAmountToPay(discTransTotal);
                cashierItem.setVatableAmount(discTransVatableSales);
                cashierItem.setAmountDiscount(discTransDiscount);
                cashierItem.setTaxAmount(discTransVatAmount);
                cashierItem.setVatExemptSale(discTransVatExemptSales);
                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                cashierItem.setLessVat(discTransLessVat);
                cashierItem.setTotalDueAmount(discTransDueAmount);










                //insert
                if (checkInvoiceReceiptItem.getCount()!=0){
                    DatabaseHandler myDb = new DatabaseHandler(getContext());
                    while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                        String TransactionID=checkInvoiceReceiptItem.getString(0);
                        String OrderID=checkInvoiceReceiptItem.getString(1);
                        String OrderName=checkInvoiceReceiptItem.getString(2);
                        String OrderQty=checkInvoiceReceiptItem.getString(3);
                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
                        String DiscountType=discountType;
                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                        String DiscQty=checkInvoiceReceiptItem.getString(3);
                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                        //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                        String DiscAmount=String.valueOf(((discTransDiscount)));;
                        Log.e("DiscAmount",DiscAmount);
                        String DiscPercent=discountValue;
                        String vat="0.00";
                        // String vat=tv_lessVat.getText().toString();
                        String DiscBuyerName=" ";
                        String DiscIdNumber=" ";
                        String DiscOther=" ";





                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                (TransactionID,
                                        OrderID,
                                        OrderName,
                                        OrderQty,
                                        OrderPrice,
                                        OrderPriceTotal,
                                        TransactionTime,
                                        TransactionDate,
                                        DiscountType,
                                        ItemRemarks,
                                        DiscQty,
                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                        DiscPercent,
                                        String.format("%7.2f", Double.parseDouble(vat)),
                                        DiscBuyerName,
                                        DiscIdNumber,
                                        DiscOther );
                    }

                }




            }
        }


//        if (discCategory.equals("SCD")){
//
//            //   custInfo.showDialog(getContext());
//            showDialog();
//            discountFormat=2;
//            discountLabelIndicator=3;
//            Log.e("DISCOUNT TRANSACTION","SCD");
//            discTransTotal=cashierItem.getTotalDueAmount();
//
//            if (discountExlude.equals("YES")){
//                Log.e("DISCOUNT EXCLUDE IF","YES");
//                discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                if (salesExlude.equals("YES")) {
//                    discTransVatExemptSales = discTransTotal / 1.12;
//                    discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                }
//                else if (salesExlude.equals("NO")){
//                    discTransVatExemptSales = discTransTotal;
//                    discTransLessVat = discTransTotal  - discTransTotal;
//                }
//                discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                Log.e("-------","---------");
//                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                Log.e("-------","---------");
//
//                // discTransDiscount=100/1.12*.
//
//
//
//
//
//                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
//                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                cashierItem.setTotalAmountToPay((discTransTotal));
//                cashierItem.setVatableAmount(discTransVatableSales);
//                cashierItem.setAmountDiscount(discTransDiscount);
//                cashierItem.setTaxAmount(discTransVatAmount);
//                cashierItem.setVatExemptSale(discTransVatExemptSales);
//                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                cashierItem.setLessVat(discTransLessVat);
//                cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//                //insert
//                if (checkInvoiceReceiptItem.getCount()!=0){
//                    DatabaseHandler myDb = new DatabaseHandler(getContext());
//                    while(checkInvoiceReceiptItem.moveToNext()){
//
//                        String TransactionID=checkInvoiceReceiptItem.getString(0);
//                        String OrderID=checkInvoiceReceiptItem.getString(1);
//                        String OrderName=checkInvoiceReceiptItem.getString(2);
//                        String OrderQty=checkInvoiceReceiptItem.getString(3);
//                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                        String DiscountType=discountType;
//                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                        String DiscQty=checkInvoiceReceiptItem.getString(3);
//                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                        String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                        String DiscPercent=discountValue;
//
//                        // String vat=tv_lessVat.getText().toString();
//                        String DiscBuyerName=custInfo.getCustName();
//                        String DiscIdNumber=custInfo.getCustIDNo();
//                        String DiscOther=custInfo.getCustTIN();
//
//
//
//
//
//
//                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                (TransactionID,
//                                        OrderID,
//                                        OrderName,
//                                        OrderQty,
//                                        OrderPrice,
//                                        OrderPriceTotal,
//                                        TransactionTime,
//                                        TransactionDate,
//                                        DiscountType,
//                                        ItemRemarks,
//                                        DiscQty,
//                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                        DiscPercent,
//                                        String.format("%7.2f", Double.parseDouble(vat)),
//                                        DiscBuyerName,
//                                        DiscIdNumber,
//                                        DiscOther );
//
//                    }
//
//                }
//
//
//
//
//            }
//            if (discountExlude.equals("NO") && ProRated.equals("NO")){
//
//
//                Log.e("DISCOUNT EXCLUDE IF","NO");
//                discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                Log.e("TOTAL",String.valueOf(discTransTotal));
//                Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                if (RemoveDiscountOnVatsales.equals("YES")){
//                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                }
//                else{
//                    discTransVatableSales=((discTransTotal)/1.12);
//                }
//
//
//
//                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                // discTransVatExemptSales=discTransTotal/1.12;
//                // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                discTransDueAmount=discTransTotal+discTransDiscount;
//                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                Log.e("-------","---------");
//                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                Log.e("-------","---------");
//
//                // discTransDiscount=100/1.12*.
//
//
//
//
//
//                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                cashierItem.setTotalAmountToPay(discTransTotal);
//                cashierItem.setVatableAmount(discTransVatableSales);
//                cashierItem.setAmountDiscount(discTransDiscount);
//                cashierItem.setTaxAmount(discTransVatAmount);
//                cashierItem.setVatExemptSale(discTransVatExemptSales);
//                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                cashierItem.setLessVat(discTransLessVat);
//                cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                //insert
//                if (checkInvoiceReceiptItem.getCount()!=0){
//                    DatabaseHandler myDb = new DatabaseHandler(getContext());
//                    while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                        String TransactionID=checkInvoiceReceiptItem.getString(0);
//                        String OrderID=checkInvoiceReceiptItem.getString(1);
//                        String OrderName=checkInvoiceReceiptItem.getString(2);
//                        String OrderQty=checkInvoiceReceiptItem.getString(3);
//                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                        String DiscountType=discountType;
//                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                        String DiscQty=checkInvoiceReceiptItem.getString(3);
//                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                        Log.e("DiscAmount",DiscAmount);
//                        String DiscPercent=discountValue;
//                        String vat="0.00";
//                        // String vat=tv_lessVat.getText().toString();
//                        String DiscBuyerName="test2";
//                        String DiscIdNumber=" ";
//                        String DiscOther=" ";
//
//
//
//
//
//                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                (TransactionID,
//                                        OrderID,
//                                        OrderName,
//                                        OrderQty,
//                                        OrderPrice,
//                                        OrderPriceTotal,
//                                        TransactionTime,
//                                        TransactionDate,
//                                        DiscountType,
//                                        ItemRemarks,
//                                        DiscQty,
//                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                        DiscPercent,
//                                        String.format("%7.2f", Double.parseDouble(vat)),
//                                        DiscBuyerName,
//                                        DiscIdNumber,
//                                        DiscOther );
//                    }
//
//                }
//
//
//
//
//            }
//            if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                Log.e("PRORATED","YES");
//                discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                Log.e("TOTAL",String.valueOf(discTransTotal));
//                Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                if (RemoveDiscountOnVatsales.equals("YES")){
//                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                }
//                else{
//                    discTransVatableSales=((discTransTotal)/1.12);
//                }
//
//
//
//                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                // discTransVatExemptSales=discTransTotal/1.12;
//                // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                discTransDueAmount=discTransTotal+discTransDiscount;
//                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                Log.e("-------","---------");
//                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                Log.e("-------","---------");
//
//                // discTransDiscount=100/1.12*.
//
//
//
//
//
//                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                cashierItem.setTotalAmountToPay(discTransTotal);
//                cashierItem.setVatableAmount(discTransVatableSales);
//                cashierItem.setAmountDiscount(discTransDiscount);
//                cashierItem.setTaxAmount(discTransVatAmount);
//                cashierItem.setVatExemptSale(discTransVatExemptSales);
//                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                cashierItem.setLessVat(discTransLessVat);
//                cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                //insert
//                if (checkInvoiceReceiptItem.getCount()!=0){
//                    DatabaseHandler myDb = new DatabaseHandler(getContext());
//                    while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                        String TransactionID=checkInvoiceReceiptItem.getString(0);
//                        String OrderID=checkInvoiceReceiptItem.getString(1);
//                        String OrderName=checkInvoiceReceiptItem.getString(2);
//                        String OrderQty=checkInvoiceReceiptItem.getString(3);
//                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                        String DiscountType=discountType;
//                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                        String DiscQty=checkInvoiceReceiptItem.getString(3);
//                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                        //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                        String DiscAmount=String.valueOf(((discTransDiscount)));;
//                        Log.e("DiscAmount",DiscAmount);
//                        String DiscPercent=discountValue;
//                        String vat="0.00";
//                        // String vat=tv_lessVat.getText().toString();
//                        String DiscBuyerName=" ";
//                        String DiscIdNumber=" ";
//                        String DiscOther=" ";
//
//
//
//
//
//                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                (TransactionID,
//                                        OrderID,
//                                        OrderName,
//                                        OrderQty,
//                                        OrderPrice,
//                                        OrderPriceTotal,
//                                        TransactionTime,
//                                        TransactionDate,
//                                        DiscountType,
//                                        ItemRemarks,
//                                        DiscQty,
//                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                        DiscPercent,
//                                        String.format("%7.2f", Double.parseDouble(vat)),
//                                        DiscBuyerName,
//                                        DiscIdNumber,
//                                        DiscOther );
//                    }
//
//                }
//
//
//
//
//            }
//        }
//        if (discCategory.equals("PWD")){
//            showDialog();
//            //  custInfo.showDialog(getContext());
//            discountFormat=2;
//            discountLabelIndicator=3;
//            Log.e("DISCOUNT TRANSACTION","SCD");
//            discTransTotal=cashierItem.getTotalDueAmount();
//
//            if (discountExlude.equals("YES")){
//                Log.e("DISCOUNT EXCLUDE IF","YES");
//                discTransDiscount= (discTransTotal / 1.12 )* (Double.parseDouble(discountValue)/100)*-1;
//
//                if (salesExlude.equals("YES")) {
//                    discTransVatExemptSales = discTransTotal / 1.12;
//                    discTransLessVat = discTransTotal / 1.12 - discTransTotal;
//                }
//                else if (salesExlude.equals("NO")){
//                    discTransVatExemptSales = discTransTotal;
//                    discTransLessVat = discTransTotal  - discTransTotal;
//                }
//                discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;
//
//                Log.e("-------","---------");
//                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                Log.e("-------","---------");
//
//                // discTransDiscount=100/1.12*.
//
//
//
//
//
//                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//
//                cashierItem.setTotalAmountToPay((discTransTotal));
//                cashierItem.setVatableAmount(discTransVatableSales);
//                cashierItem.setAmountDiscount(discTransDiscount);
//                cashierItem.setTaxAmount(discTransVatAmount);
//                cashierItem.setVatExemptSale(discTransVatExemptSales);
//                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                cashierItem.setLessVat(discTransLessVat);
//                cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                //insert
//                if (checkInvoiceReceiptItem.getCount()!=0){
//                    DatabaseHandler myDb = new DatabaseHandler(getContext());
//                    while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscAmount=String.valueOf(discTransDiscount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                        String TransactionID=checkInvoiceReceiptItem.getString(0);
//                        String OrderID=checkInvoiceReceiptItem.getString(1);
//                        String OrderName=checkInvoiceReceiptItem.getString(2);
//                        String OrderQty=checkInvoiceReceiptItem.getString(3);
//                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                        String DiscountType=discountType;
//                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                        String DiscQty=checkInvoiceReceiptItem.getString(3);
//                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
//                        String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
//                        String DiscPercent=discountValue;
//                        // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//
//                        String DiscBuyerName=custInfo.getCustName();
//                        String DiscIdNumber=custInfo.getCustIDNo();
//                        String DiscOther=custInfo.getCustTIN();
//
//
//
//
//
//
//
//                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                (TransactionID,
//                                        OrderID,
//                                        OrderName,
//                                        OrderQty,
//                                        OrderPrice,
//                                        OrderPriceTotal,
//                                        TransactionTime,
//                                        TransactionDate,
//                                        DiscountType,
//                                        ItemRemarks,
//                                        DiscQty,
//                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                        DiscPercent,
//                                        String.format("%7.2f", Double.parseDouble(vat)),
//                                        DiscBuyerName,
//                                        DiscIdNumber,
//                                        DiscOther );
//                    }
//
//                }
//
//
//
//
//            }
//            if (discountExlude.equals("NO") && ProRated.equals("NO")){
//                Log.e("DISCOUNT EXCLUDE IF","NO");
//                discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;
//                Log.e("TOTAL",String.valueOf(discTransTotal));
//                Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//
//                if (RemoveDiscountOnVatsales.equals("YES")){
//                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                }
//                else{
//                    discTransVatableSales=((discTransTotal)/1.12);
//                }
//
//
////
////
////                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                // discTransVatExemptSales=discTransTotal/1.12;
//                // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                discTransDueAmount=discTransTotal+discTransDiscount;
//                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                Log.e("-------","---------");
//                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                Log.e("-------","---------");
//
//                // discTransDiscount=100/1.12*.
//
//
//
//
//
//                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                cashierItem.setTotalAmountToPay(discTransTotal);
//                cashierItem.setVatableAmount(discTransVatableSales);
//                cashierItem.setAmountDiscount(discTransDiscount);
//                cashierItem.setTaxAmount(discTransVatAmount);
//                cashierItem.setVatExemptSale(discTransVatExemptSales);
//                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                cashierItem.setLessVat(discTransLessVat);
//                cashierItem.setTotalDueAmount(discTransDueAmount);
////
//
//
//
//
//
//
//
//
//
//                //insert
//                if (checkInvoiceReceiptItem.getCount()!=0){
//                    DatabaseHandler myDb = new DatabaseHandler(getContext());
//                    while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//                        String TransactionID=checkInvoiceReceiptItem.getString(0);
//                        String OrderID=checkInvoiceReceiptItem.getString(1);
//                        String OrderName=checkInvoiceReceiptItem.getString(2);
//                        String OrderQty=checkInvoiceReceiptItem.getString(3);
//                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                        String DiscountType=discountType;
//                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                        String DiscQty=checkInvoiceReceiptItem.getString(3);
//                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//
//                        String DiscPercent=discountValue;
//                        // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                        String vat="0.00";
//                        String DiscBuyerName=" ";
//                        String DiscIdNumber=" ";
//                        String DiscOther=" ";
//
//
//
//
//
//
//
//                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                (TransactionID,
//                                        OrderID,
//                                        OrderName,
//                                        OrderQty,
//                                        OrderPrice,
//                                        OrderPriceTotal,
//                                        TransactionTime,
//                                        TransactionDate,
//                                        DiscountType,
//                                        ItemRemarks,
//                                        DiscQty,
//                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                        DiscPercent,
//                                        String.format("%7.2f", Double.parseDouble(vat)),
//                                        DiscBuyerName,
//                                        DiscIdNumber,
//                                        DiscOther );
//                    }
//
//                }
//
//
//
//
//            }
//            if (discountExlude.equals("NO") && ProRated.equals("YES")){
//
//
//                Log.e("PRORATED","YES");
//                discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
//                Log.e("TOTAL",String.valueOf(discTransTotal));
//                Log.e("DISCOUNT",String.valueOf(discTransDiscount));
//
//
//
//                if (RemoveDiscountOnVatsales.equals("YES")){
//                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                }
//                else{
//                    discTransVatableSales=((discTransTotal)/1.12);
//                }
//
//
//
//                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));
//
//                // discTransVatExemptSales=discTransTotal/1.12;
//                // discTransLessVat = discTransTotal/1.12-discTransTotal;
//                discTransDueAmount=discTransTotal+discTransDiscount;
//                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;
//
//
//                Log.e("-------","---------");
//                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
//                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
//                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
//                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
//                Log.e("-------","---------");
//
//                // discTransDiscount=100/1.12*.
//
//
//
//
//
//                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//                cashierItem.setTotalAmountToPay(discTransTotal);
//                cashierItem.setVatableAmount(discTransVatableSales);
//                cashierItem.setAmountDiscount(discTransDiscount);
//                cashierItem.setTaxAmount(discTransVatAmount);
//                cashierItem.setVatExemptSale(discTransVatExemptSales);
//                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
//                cashierItem.setLessVat(discTransLessVat);
//                cashierItem.setTotalDueAmount(discTransDueAmount);
//
//
//
//
//
//
//
//
//
//
//                //insert
//                if (checkInvoiceReceiptItem.getCount()!=0){
//                    DatabaseHandler myDb = new DatabaseHandler(getContext());
//                    while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                        String TransactionID=checkInvoiceReceiptItem.getString(0);
//                        String OrderID=checkInvoiceReceiptItem.getString(1);
//                        String OrderName=checkInvoiceReceiptItem.getString(2);
//                        String OrderQty=checkInvoiceReceiptItem.getString(3);
//                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                        String DiscountType=discountType;
//                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                        String DiscQty=checkInvoiceReceiptItem.getString(3);
//                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                        //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
//                        String DiscAmount=String.valueOf(((discTransDiscount)));;
//                        Log.e("DiscAmount",DiscAmount);
//                        String DiscPercent=discountValue;
//                        String vat="0.00";
//                        // String vat=tv_lessVat.getText().toString();
//                        String DiscBuyerName=" ";
//                        String DiscIdNumber=" ";
//                        String DiscOther=" ";
//
//
//
//
//
//                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                (TransactionID,
//                                        OrderID,
//                                        OrderName,
//                                        OrderQty,
//                                        OrderPrice,
//                                        OrderPriceTotal,
//                                        TransactionTime,
//                                        TransactionDate,
//                                        DiscountType,
//                                        ItemRemarks,
//                                        DiscQty,
//                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                        DiscPercent,
//                                        String.format("%7.2f", Double.parseDouble(vat)),
//                                        DiscBuyerName,
//                                        DiscIdNumber,
//                                        DiscOther );
//                    }
//
//                }
//
//
//
//
//            }
//        }
        else  if (discCategory.equals("REG")){
            Log.e("OTHER DISCOUNT","YES");

            discountFormat=2;
            discountLabelIndicator=4;
            //  Log.e("DISCOUNT TRANSACTION","PWD");
            discTransTotal=cashierItem.getTotalDueAmount();
            Log.e("OTHER DISCTOTAL",String.valueOf(discTransTotal));
            if (discountExlude.equals("YES")){




                discTransDiscount= (discTransTotal)* (Double.parseDouble(discountValue)/100)*-1;


//                                        if (salesExlude.equals("YES")) {
//
//                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                           // discTransVatableSales=discTransTotal/1.12;
//                                        }
//                                        else if (salesExlude.equals("NO")){
//                                            discTransVatableSales=((discTransTotal+discTransDiscount));
//                                           // discTransVatableSales=discTransTotal/1.12;
//                                        }

                if (RemoveDiscountOnVatsales.equals("YES")){
                    Log.e("REMOVE DISC ON VAT","YES");
                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                }
                else{
                    Log.e("REMOVE DISC ON VAT","NO");
                    discTransVatableSales=((discTransTotal)/1.12);
                }

                //discTransVatAmount = discTransTotal/1.12-discTransTotal;
                discTransDueAmount=discTransTotal+discTransDiscount+discTransLessVat;

                // discTransDiscount=100/1.12*.





                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));



                //insert
                if (checkInvoiceReceiptItem.getCount()!=0){
                    DatabaseHandler myDb = new DatabaseHandler(getContext());
                    while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                        String TransactionID=checkInvoiceReceiptItem.getString(0);
                        String OrderID=checkInvoiceReceiptItem.getString(1);
                        String OrderName=checkInvoiceReceiptItem.getString(2);
                        String OrderQty=checkInvoiceReceiptItem.getString(3);
                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
                        String DiscountType=discountType;
                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                        String DiscQty=checkInvoiceReceiptItem.getString(3);
                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100))*-1);
                        String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
                        String DiscPercent=discountValue;
                        // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                        // String vat=tv_lessVat.getText().toString();
                        String DiscBuyerName=" ";
                        String DiscIdNumber=" ";
                        String DiscOther=" ";








                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                (TransactionID,
                                        OrderID,
                                        OrderName,
                                        OrderQty,
                                        OrderPrice,
                                        OrderPriceTotal,
                                        TransactionTime,
                                        TransactionDate,
                                        DiscountType,
                                        ItemRemarks,
                                        DiscQty,
                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                        DiscPercent,
                                        String.format("%7.2f", Double.parseDouble(vat)),
                                        DiscBuyerName,
                                        DiscIdNumber,
                                        DiscOther );
                    }

                }




            }
            if (discountExlude.equals("NO")&& ProRated.equals("NO")){
                discTransTotal=cashierItem.getTotalDueAmount();
                Log.e("OTHER exclude NO",String.valueOf(discTransTotal));

                discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
                Log.e("total",String.valueOf(discTransTotal));
                Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
                Log.e("total discount",String.valueOf(discTransDiscount));


                if (RemoveDiscountOnVatsales.equals("YES")){
                    Log.e("REMOVE DISC ON VAT","YES");
                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                    discTransVatAmount=discTransTotal-(discTransVatableSales);
                }
                else{
                    Log.e("REMOVE DISC ON VAT","NO");
                    discTransVatableSales=((discTransTotal)/1.12);
                    discTransVatAmount=discTransTotal-(discTransVatableSales);
                }





                //  discTransVatableSales=discTransTotal/1.12;
                //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
                //discTransVatAmount = discTransTotal/1.12-discTransTotal;
                discTransDueAmount=discTransTotal+discTransDiscount;

                // discTransDiscount=100/1.12*.





                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));



                //insert
                if (checkInvoiceReceiptItem.getCount()!=0){
                    DatabaseHandler myDb = new DatabaseHandler(getContext());
                    while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
//                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
//                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
//                                               // String DiscAmount=String.valueOf(discTransDiscount);
//                                                Log.e("INSERT DISC",DiscAmount);
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                        String TransactionID=checkInvoiceReceiptItem.getString(0);
                        String OrderID=checkInvoiceReceiptItem.getString(1);
                        String OrderName=checkInvoiceReceiptItem.getString(2);
                        String OrderQty=checkInvoiceReceiptItem.getString(3);
                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
                        String DiscountType=discountType;
                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                        String DiscQty=checkInvoiceReceiptItem.getString(3);
                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                        String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);

                        String DiscPercent=discountValue;
                        // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                        String vat="0.00";
                        String DiscBuyerName=" ";
                        String DiscIdNumber=" ";
                        String DiscOther=" ";








                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                (TransactionID,
                                        OrderID,
                                        OrderName,
                                        OrderQty,
                                        OrderPrice,
                                        OrderPriceTotal,
                                        TransactionTime,
                                        TransactionDate,
                                        DiscountType,
                                        ItemRemarks,
                                        DiscQty,
                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                        DiscPercent,
                                        String.format("%7.2f", Double.parseDouble(vat)),
                                        DiscBuyerName,
                                        DiscIdNumber,
                                        DiscOther );
                    }

                }




            }
            if (discountExlude.equals("NO") && ProRated.equals("YES")){


                Log.e("PRORATED","YES");
                discTransDiscount= (discTransTotal/Double.parseDouble("1.12"))* (Double.parseDouble(discountValue)/100)*-1;
                Log.e("TOTAL",String.valueOf(discTransTotal));
                Log.e("DISCOUNT",String.valueOf(discTransDiscount));



                if (RemoveDiscountOnVatsales.equals("YES")){
                    discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                }
                else{
                    discTransVatableSales=((discTransTotal)/1.12);
                }



                Log.e("DISCOUNT",String.valueOf(discTransVatableSales));

                // discTransVatExemptSales=discTransTotal/1.12;
                // discTransLessVat = discTransTotal/1.12-discTransTotal;
                discTransDueAmount=discTransTotal+discTransDiscount;
                discTransVatAmount = discTransDueAmount-discTransDueAmount/1.12;


                Log.e("-------","---------");
                Log.e("discTransDiscount",String.valueOf(discTransDiscount));
                Log.e("discTransVatExemptSales",String.valueOf(discTransVatExemptSales));
                Log.e("discTransLessVat",String.valueOf(discTransLessVat));
                Log.e("discTransDueAmount",String.valueOf(discTransDueAmount));
                Log.e("-------","---------");

                // discTransDiscount=100/1.12*.





                lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                cashierItem.setTotalAmountToPay(discTransTotal);
                cashierItem.setVatableAmount(discTransVatableSales);
                cashierItem.setAmountDiscount(discTransDiscount);
                cashierItem.setTaxAmount(discTransVatAmount);
                cashierItem.setVatExemptSale(discTransVatExemptSales);
                cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                cashierItem.setLessVat(discTransLessVat);
                cashierItem.setTotalDueAmount(discTransDueAmount);










                //insert
                if (checkInvoiceReceiptItem.getCount()!=0){
                    DatabaseHandler myDb = new DatabaseHandler(getContext());
                    while(checkInvoiceReceiptItem.moveToNext()){

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                        String TransactionID=checkInvoiceReceiptItem.getString(0);
                        String OrderID=checkInvoiceReceiptItem.getString(1);
                        String OrderName=checkInvoiceReceiptItem.getString(2);
                        String OrderQty=checkInvoiceReceiptItem.getString(3);
                        String OrderPrice=checkInvoiceReceiptItem.getString(4);
                        String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                        String TransactionTime=checkInvoiceReceiptItem.getString(6);
                        String TransactionDate=checkInvoiceReceiptItem.getString(7);
                        String DiscountType=discountType;
                        String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                        String DiscQty=checkInvoiceReceiptItem.getString(3);
                        //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                        //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                        String DiscAmount=String.valueOf(((discTransDiscount)));;
                        Log.e("DiscAmount",DiscAmount);
                        String DiscPercent=discountValue;
                        String vat="0.00";
                        // String vat=tv_lessVat.getText().toString();
                        String DiscBuyerName=" ";
                        String DiscIdNumber=" ";
                        String DiscOther=" ";





                        boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                (TransactionID,
                                        OrderID,
                                        OrderName,
                                        OrderQty,
                                        OrderPrice,
                                        OrderPriceTotal,
                                        TransactionTime,
                                        TransactionDate,
                                        DiscountType,
                                        ItemRemarks,
                                        DiscQty,
                                        String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                        DiscPercent,
                                        String.format("%7.2f", Double.parseDouble(vat)),
                                        DiscBuyerName,
                                        DiscIdNumber,
                                        DiscOther );
                    }

                }




            }

//                                    if (discountExlude.equals("NO") && ProRated.equals("YES")){
//                                        discTransTotal=cashierItem.getTotalDueAmount();
//                                        Log.e("OTHER exclude NO",String.valueOf(discTransTotal));
//
//                                        discTransDiscount= discTransTotal* (Double.parseDouble(discountValue)/100)*-1;
//                                        Log.e("total",String.valueOf(discTransTotal));
//                                        Log.e("discount",String.valueOf((Double.parseDouble(discountValue)/100)*-1));
//                                        Log.e("total discount",String.valueOf(discTransDiscount));
//
//
//                                        if (RemoveDiscountOnVatsales.equals("YES")){
//                                            Log.e("REMOVE DISC ON VAT","YES");
//                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                            discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                        }
//                                        else{
//                                            Log.e("REMOVE DISC ON VAT","NO");
//                                            discTransVatableSales=((discTransTotal)/1.12);
//                                            discTransVatAmount=discTransTotal-(discTransVatableSales);
//                                        }
//
//
//
//
//
//                                        //  discTransVatableSales=discTransTotal/1.12;
//                                        //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
//                                        //discTransVatAmount = discTransTotal/1.12-discTransTotal;
//                                        discTransDueAmount=discTransTotal+discTransDiscount;
//
//                                        // discTransDiscount=100/1.12*.
//
//
//
//
//
//                                        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
//                                        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
//                                        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
//                                        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
//                                        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
//                                        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
//                                        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
//                                        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
//                                        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));
//
//
//
//                                        //insert
//                                        if (checkInvoiceReceiptItem.getCount()!=0){
//                                            DatabaseHandler myDb = new DatabaseHandler(getContext());
//                                            while(checkInvoiceReceiptItem.moveToNext()){
//
////                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
////                                                String OrderID=checkInvoiceReceiptItem.getString(1);
////                                                String OrderName=checkInvoiceReceiptItem.getString(2);
////                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
////                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
////                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
////                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
////                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
////                                                String DiscountType=discountType;
////                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
////                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
////                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
////                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
////                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
////                                               // String DiscAmount=String.valueOf(discTransDiscount);
////                                                Log.e("INSERT DISC",DiscAmount);
////                                                String DiscPercent=discountValue;
////                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
////                                                String DiscBuyerName=" ";
////                                                String DiscIdNumber=" ";
////                                                String DiscOther=" ";
//
//
//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);
//
//                                                String DiscPercent=discountValue;
//                                                // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String vat="0.00";
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";
//
//
//
//
//
//
//
//
//                                                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
//                                                        (TransactionID,
//                                                                OrderID,
//                                                                OrderName,
//                                                                OrderQty,
//                                                                OrderPrice,
//                                                                OrderPriceTotal,
//                                                                TransactionTime,
//                                                                TransactionDate,
//                                                                DiscountType,
//                                                                ItemRemarks,
//                                                                DiscQty,
//                                                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
//                                                                DiscPercent,
//                                                                String.format("%7.2f", Double.parseDouble(vat)),
//                                                                DiscBuyerName,
//                                                                DiscIdNumber,
//                                                                DiscOther );
//                                            }
//
//                                        }
//
//
//
//
//                                    }
        }






        if (discCategory.equals("SCD")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
        }
        else if (discCategory.equals("PWD")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("PWD DISCOUNT");
        }
        else if (discountType.equals("DIPLOMAT")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("DIPLOMAT");
        }
        else if (discCategory.equals("REG")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("REGULAR DISCOUNT");
        }






        loadLabelData();

        cashierItem.setTotalAmountToPay(discTransDueAmount);
        Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
        alertDialog.dismiss();

        //    RefreshScreen();

















        Toast.makeText(getContext(), discountType + " Applied", Toast.LENGTH_LONG).show();
        alertDialog.dismiss();

    }

    Cursor checkInvoiceReceiptItem;
    Cursor checkDiscountTemp;
    String MaxDiscountAmount;

    cashier_payment_prorated prorated_class = new cashier_payment_prorated();


    AlertDialog alertDialog2;
    int numberOfID;
    private void savePaxInfo(){
numberOfID=0;
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {



               alertDialog2.dismiss();

                mapCode2Activate=3;
                if (et_noPax.getText().length()!=0){

                    prorated_class.setNumberOfPax(Integer.parseInt(et_noPax.getText().toString()));
                    Log.e("NumberOfPax",String.valueOf(prorated_class.numberOfPax));
                }
                else{

                    prorated_class.setNumberOfPax(1);
                    Log.e("NumberOfPaxElse",String.valueOf(prorated_class.numberOfPax));
                }



                AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                LayoutInflater inflater = LayoutInflater.from(getContext());
                final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_scd_pwd_info, null);

                builder.setView(alertLayout);
                alertDialog = builder.create();
                alertDialog.setCanceledOnTouchOutside(false);
                et_custName= alertLayout.findViewById(R.id.et_custName);
                et_custIDNo= alertLayout.findViewById(R.id.et_custIDNo);
                et_custTIN= alertLayout.findViewById(R.id.et_custTIN);
                et_custName.requestFocus();
                btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
                btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);
                //added 12/16/2023
                btn_addNewID= alertLayout.findViewById(R.id.btn_addNewID);
                tv_Dialoglabel = alertLayout.findViewById(R.id.tv_Dialoglabel);
                numberOfID = prorated_class.read_number_card(getContext(),transactionIDFinal);




                    tv_Dialoglabel.setText("Customer Info ( # "+(String.valueOf(numberOfID+1))+" )");




                //int showMessage=0;

                Toast.makeText(getContext(), "Dialog:"+DialogCursor + "  MapActi:"+mapCode2Activate, Toast.LENGTH_SHORT).show();

                btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                       // prorated_class.set
                        saveSCDInfo();

                    }
                });

                btn_addNewID.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Toast.makeText(getContext(), "totalPAx :"+prorated_class.getNumberOfPax(), Toast.LENGTH_SHORT).show();

                        if (numberOfID>= prorated_class.getNumberOfPax()){
                            Toast.makeText(getContext(), "CANNOT ADD ANOTHER ID", Toast.LENGTH_SHORT).show();
                        }
                        else{
                            prorated_class.insertNewID(getContext(),transactionIDFinal,et_custName.getText().toString(),et_custIDNo.getText().toString(),et_custTIN.getText().toString());
                            // saveSCDInfo();
                            alertDialog.dismiss();
                            savePaxInfo();
                        }






                    }
                });

                btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Toast.makeText(getContext(), discountType + " Canceled", Toast.LENGTH_LONG).show();
                        DialogCursor=0;
                        mapCode2Activate=0;
                        alertDialog.dismiss();


                    }
                });



                alertDialog.show();



            }
        });

    }






    private void DiscountSelection(int Cursor){

//        InitT9MapCode();
//        mapCode2Activate=3;


      //  InitT9MapCode();
        mapCode2Activate=4;
        DialogCursor=6;


        SQLiteDatabase PosOutputDb = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
        checkInvoiceReceiptItem = PosOutputDb.rawQuery("select * from InvoiceReceiptItem", null);
        checkDiscountTemp = PosOutputDb.rawQuery("select * from InvoiceReceiptItemFinalWDiscountTemp", null);

        if (checkDiscountTemp.getCount()!=0){
            Toast.makeText(view.getContext(), "CANNOT APPLY DISCOUNT", Toast.LENGTH_LONG).show();
            Log.e("DISCOUNT TEMP","CANNOT APPLY DISCOUNT");
            alertDialog.dismiss();
            mapCode2Activate=0;
            DialogCursor=0;


        }
        else{


            discountType=DiscountIDList.get(Cursor);
            discountValue=DiscountAmountList.get(Cursor);
            discountExlude=DiscountExcludeTaxList.get(Cursor);
            discCategory=DiscCategoryList.get(Cursor);
            salesExlude=SalesExcludeTaxList.get(Cursor);
            ProRated=ProRatedTaxList.get(Cursor);
            MaxDiscountAmt = MaxDiscountAmtList.get(Cursor);
            OpenDiscount = OpenDiscountList.get(Cursor);

            //Toast.makeText(getContext(), "MaxDiscountAmount :" + MaxDiscountAmt.toString(), Toast.LENGTH_LONG).show();
            //Log.e("DISCOUNT Max",);


            if (discCategory.equals("SCD") || discCategory.equals("PWD")){
                alertDialog.dismiss();
                Toast.makeText(getContext(), "SCD CLICK", Toast.LENGTH_SHORT).show();

                prorated_class.checkPaxIndicator();
                if (prorated_class.paxIndicator==1){




                    AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                    LayoutInflater inflater = LayoutInflater.from(getContext());
                    final View alertLayout2 = inflater.inflate(R.layout.custom_alertdialog_pax, null);

                    builder.setView(alertLayout2);
                    alertDialog2 = builder.create();
                    alertDialog2.setCanceledOnTouchOutside(false);
                     et_noPax = alertLayout2.findViewById(R.id.et_noPax);
                    Button btn_saveCustInfoProRated = alertLayout2.findViewById(R.id.btn_saveCustInfo);
                    Button btn_cancelCustInfoProRated = alertLayout2.findViewById(R.id.btn_cancelCustInfo);
                    et_noPax.requestFocus();


                    btn_saveCustInfoProRated.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {

                            SQLiteDatabase PosOutputDb = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
                            Cursor checkInvoiceReceiptItem = PosOutputDb.rawQuery("select * from InvoiceReceiptItem", null);
                            if (checkInvoiceReceiptItem.getCount()!=0){
                                if (checkInvoiceReceiptItem.moveToFirst()){
                                    transactionIDFinal = checkInvoiceReceiptItem.getString(0);
                                    //Toast.makeText(getContext(), "TransactionID "+ transactionIDFinal, Toast.LENGTH_SHORT).show();
                                    savePaxInfo();
                                }
                                else{
                                    Toast.makeText(getContext(), "NO TRANSACTION FOUND", Toast.LENGTH_SHORT).show();
                                }
                            }

                        }
                    });

                    btn_cancelCustInfoProRated.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {


                            DialogCursor=0;
                            mapCode2Activate=0;
                            alertDialog2.dismiss();


                        }
                    });



                    alertDialog2.show();



                }

                else if (OpenDiscount.equalsIgnoreCase("YES")){

//
                    mapCode2Activate=5;


                    openPrice();


                }

                else{


                    mapCode2Activate=3;
                    AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
                    LayoutInflater inflater = LayoutInflater.from(getContext());
                    final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_scd_pwd_info, null);

                    builder.setView(alertLayout);
                    alertDialog = builder.create();
                    alertDialog.setCanceledOnTouchOutside(false);
                    et_custName= alertLayout.findViewById(R.id.et_custName);
                    et_custIDNo= alertLayout.findViewById(R.id.et_custIDNo);
                    et_custTIN= alertLayout.findViewById(R.id.et_custTIN);
                    et_custName.requestFocus();
                    btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
                    btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);
                    btn_addNewID = alertLayout.findViewById(R.id.btn_addNewID);


                    //int showMessage=0;

                    Toast.makeText(getContext(), "Dialog:"+DialogCursor + "  MapActi:"+mapCode2Activate, Toast.LENGTH_SHORT).show();

                    btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {

                            saveSCDInfo();

                        }
                    });

                    btn_addNewID.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            Toast.makeText(getContext(), "totalPAx :"+prorated_class.getNumberOfPax(), Toast.LENGTH_SHORT).show();

//                            if (numberOfID>= prorated_class.getNumberOfPax()){
//                                Toast.makeText(getContext(), "CANNOT ADD ANOTHER ID", Toast.LENGTH_SHORT).show();
//                            }
//                            else{
//                                prorated_class.insertNewID(getContext(),transactionIDFinal,et_custName.getText().toString(),et_custIDNo.getText().toString(),et_custTIN.getText().toString());
//                                // saveSCDInfo();
//                                alertDialog.dismiss();
//                                savePaxInfo();
//                            }






                        }
                    });

                    btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {

                            Toast.makeText(getContext(), discountType + " Canceled", Toast.LENGTH_LONG).show();
                            DialogCursor=0;
                            mapCode2Activate=0;
                            alertDialog.dismiss();


                        }
                    });



                    alertDialog.show();

                }

















            }





//            if (discCategory.equals("PWD")){
//                alertDialog.dismiss();
//
//                if (prorated_class.paxIndicator==1){
//
//
//
//
//                    AlertDialog.Builder builder  = new AlertDialog.Builder(getContext());
//                    LayoutInflater inflater = LayoutInflater.from(getContext());
//                    final View alertLayout2 = inflater.inflate(R.layout.custom_alertdialog_pax, null);
//
//                    builder.setView(alertLayout2);
//                    alertDialog2 = builder.create();
//                    alertDialog2.setCanceledOnTouchOutside(false);
//                    et_noPax = alertLayout2.findViewById(R.id.et_noPax);
//                    Button btn_saveCustInfoProRated = alertLayout2.findViewById(R.id.btn_saveCustInfo);
//                    Button btn_cancelCustInfoProRated = alertLayout2.findViewById(R.id.btn_cancelCustInfo);
//                    et_noPax.requestFocus();
//
//
//                    btn_saveCustInfoProRated.setOnClickListener(new View.OnClickListener() {
//                        @Override
//                        public void onClick(View view) {
//
//                            SQLiteDatabase PosOutputDb = getActivity().openOrCreateDatabase("PosOutputDB.db", Context.MODE_PRIVATE, null);
//                            Cursor checkInvoiceReceiptItem = PosOutputDb.rawQuery("select * from InvoiceReceiptItem", null);
//                            if (checkInvoiceReceiptItem.getCount()!=0){
//                                if (checkInvoiceReceiptItem.moveToFirst()){
//                                    transactionIDFinal = checkInvoiceReceiptItem.getString(0);
//                                    //Toast.makeText(getContext(), "TransactionID "+ transactionIDFinal, Toast.LENGTH_SHORT).show();
//                                    savePaxInfo();
//                                }
//                                else{
//                                    Toast.makeText(getContext(), "NO TRANSACTION FOUND", Toast.LENGTH_SHORT).show();
//                                }
//                            }
//
//                        }
//                    });
//
//                    btn_cancelCustInfoProRated.setOnClickListener(new View.OnClickListener() {
//                        @Override
//                        public void onClick(View view) {
//
//
//                            DialogCursor=0;
//                            mapCode2Activate=0;
//                            alertDialog2.dismiss();
//
//
//                        }
//                    });
//
//
//
//                    alertDialog2.show();
//
//
//
//                }
//                else {
//
//
//                    AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
//                    LayoutInflater inflater = LayoutInflater.from(getContext());
//                    final View alertLayout = inflater.inflate(R.layout.custom_alertdialog_scd_pwd_info, null);
//
//                    builder.setView(alertLayout);
//                    alertDialog = builder.create();
//                    alertDialog.setCanceledOnTouchOutside(false);
//                    et_custName = alertLayout.findViewById(R.id.et_custName);
//                    et_custIDNo = alertLayout.findViewById(R.id.et_custIDNo);
//                    et_custTIN = alertLayout.findViewById(R.id.et_custTIN);
//                    btn_saveCustInfo = alertLayout.findViewById(R.id.btn_saveCustInfo);
//                    btn_cancelCustInfo = alertLayout.findViewById(R.id.btn_cancelCustInfo);
//
//                    //int showMessage=0;
//
//                    btn_saveCustInfo.setOnClickListener(new View.OnClickListener() {
//                        @Override
//                        public void onClick(View view) {
//                            savePWDInfo();
//
//                        }
//                    });
//
//                    btn_cancelCustInfo.setOnClickListener(new View.OnClickListener() {
//                        @Override
//                        public void onClick(View view) {
//
//                            Toast.makeText(getContext(), discountType + " Canceled", Toast.LENGTH_LONG).show();
//                            alertDialog.dismiss();
//                            DialogCursor = 0;
//                            mapCode2Activate = 0;
//
//
//                        }
//                    });
//
//
//                    alertDialog.show();
//
//
//                }
//
//            }
            else if(discCategory.equals("REG")) {
                Log.e("discount type",discountType.substring(0,3));
                Log.e("discount type",discountValue);
                Log.e("discount Exclude",discountExlude);
                Log.e("ProRated",ProRated);


                Double discTransTotal=0.00;
                Double discTransVatableSales=0.00;
                Double discTransDiscount=0.00;
                Double discTransVatAmount=0.00;
                Double discTransVatExemptSales=0.00;
                Double discTransZeroRatedSales=0.00;
                Double discTransLessVat=0.00;
                Double discServiceCharge=0.00;
                Double discTransDueAmount=0.00;





                if(OpenDiscount.equalsIgnoreCase("NO")) {


                    if (discCategory.equals("SCD")) {

                        //   custInfo.showDialog(getContext());
                        showDialog();
                        discountFormat = 2;
                        discountLabelIndicator = 3;
                        Log.e("DISCOUNT TRANSACTION", "SCD");
                        discTransTotal = cashierItem.getTotalDueAmount();

                        if (discountExlude.equals("YES")) {
                            Log.e("DISCOUNT EXCLUDE IF", "YES");
                            discTransDiscount = (discTransTotal / 1.12) * (Double.parseDouble(discountValue) / 100) * -1;

                            if (salesExlude.equals("YES")) {
                                discTransVatExemptSales = discTransTotal / 1.12;
                                discTransLessVat = discTransTotal / 1.12 - discTransTotal;
                            } else if (salesExlude.equals("NO")) {
                                discTransVatExemptSales = discTransTotal;
                                discTransLessVat = discTransTotal - discTransTotal;
                            }
                            discTransDueAmount = discTransTotal + discTransDiscount + discTransLessVat;

                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            Log.e("Discount Amount", String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay((discTransTotal));
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * (Double.parseDouble(discountValue) / 100)) * -1);
                                    // String DiscAmount=String.valueOf((300/1.12*(Double.parseDouble(discountValue)/100))*-1);
                                    String vat = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * .12) * -1);
                                    String DiscPercent = discountValue;

                                    // String vat=tv_lessVat.getText().toString();
                                    String DiscBuyerName = custInfo.getCustName();
                                    String DiscIdNumber = custInfo.getCustIDNo();
                                    String DiscOther = custInfo.getCustTIN();


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);

                                }

                            }


                        }
                        if (discountExlude.equals("NO") && ProRated.equals("NO")) {


                            Log.e("DISCOUNT EXCLUDE IF", "NO");
                            discTransDiscount = (discTransTotal) * (Double.parseDouble(discountValue) / 100) * -1;
                            Log.e("TOTAL", String.valueOf(discTransTotal));
                            Log.e("DISCOUNT", String.valueOf(discTransDiscount));


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) / 1.12);
                            }


                            Log.e("DISCOUNT", String.valueOf(discTransVatableSales));

                            // discTransVatExemptSales=discTransTotal/1.12;
                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount;
                            discTransVatAmount = discTransDueAmount - discTransDueAmount / 1.12;


                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay(discTransTotal);
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) * (Double.parseDouble(discountValue) / 100)) * -1);
                                    ;
                                    Log.e("DiscAmount", DiscAmount);
                                    String DiscPercent = discountValue;
                                    String vat = "0.00";
                                    // String vat=tv_lessVat.getText().toString();
                                    String DiscBuyerName = "test2";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                        if (discountExlude.equals("NO") && ProRated.equals("YES")) {


                            Log.e("PRORATED", "YES");
                            discTransDiscount = (discTransTotal / Double.parseDouble("1.12")) * (Double.parseDouble(discountValue) / 100) * -1;
                            Log.e("TOTAL", String.valueOf(discTransTotal));
                            Log.e("DISCOUNT", String.valueOf(discTransDiscount));


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) / 1.12);
                            }


                            Log.e("DISCOUNT", String.valueOf(discTransVatableSales));

                            // discTransVatExemptSales=discTransTotal/1.12;
                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount;
                            discTransVatAmount = discTransDueAmount - discTransDueAmount / 1.12;


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) - discTransDiscount - discTransVatAmount);
                            }


                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay(discTransTotal);
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                                    String DiscAmount = String.valueOf(((discTransDiscount)));
                                    ;
                                    Log.e("DiscAmount", DiscAmount);
                                    String DiscPercent = discountValue;
                                    String vat = "0.00";
                                    // String vat=tv_lessVat.getText().toString();
                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                    }
                    if (discCategory.equals("PWD")) {
                        showDialog();
                        //  custInfo.showDialog(getContext());
                        discountFormat = 2;
                        discountLabelIndicator = 3;
                        Log.e("DISCOUNT TRANSACTION", "SCD");
                        discTransTotal = cashierItem.getTotalDueAmount();

                        if (discountExlude.equals("YES")) {
                            Log.e("DISCOUNT EXCLUDE IF", "YES");
                            discTransDiscount = (discTransTotal / 1.12) * (Double.parseDouble(discountValue) / 100) * -1;

                            if (salesExlude.equals("YES")) {
                                discTransVatExemptSales = discTransTotal / 1.12;
                                discTransLessVat = discTransTotal / 1.12 - discTransTotal;
                            } else if (salesExlude.equals("NO")) {
                                discTransVatExemptSales = discTransTotal;
                                discTransLessVat = discTransTotal - discTransTotal;
                            }
                            discTransDueAmount = discTransTotal + discTransDiscount + discTransLessVat;

                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay((discTransTotal));
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscAmount=String.valueOf(discTransDiscount);
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * (Double.parseDouble(discountValue) / 100)) * -1);
                                    String vat = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * .12) * -1);
                                    String DiscPercent = discountValue;
                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);

                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                        if (discountExlude.equals("NO") && ProRated.equals("NO")) {
                            Log.e("DISCOUNT EXCLUDE IF", "NO");
                            discTransDiscount = (discTransTotal) * (Double.parseDouble(discountValue) / 100) * -1;
                            Log.e("TOTAL", String.valueOf(discTransTotal));
                            Log.e("DISCOUNT", String.valueOf(discTransDiscount));


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) / 1.12);
                            }


//
//
//                                        discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
                            Log.e("DISCOUNT", String.valueOf(discTransVatableSales));

                            // discTransVatExemptSales=discTransTotal/1.12;
                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount;
                            discTransVatAmount = discTransDueAmount - discTransDueAmount / 1.12;


                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay(discTransTotal);
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);
//


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";

                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) * (Double.parseDouble(discountValue) / 100)) * -1);
                                    ;

                                    String DiscPercent = discountValue;
                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                                    String vat = "0.00";
                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                        if (discountExlude.equals("NO") && ProRated.equals("YES")) {


                            Log.e("PRORATED", "YES");
                            discTransDiscount = (discTransTotal / Double.parseDouble("1.12")) * (Double.parseDouble(discountValue) / 100) * -1;
                            Log.e("TOTAL", String.valueOf(discTransTotal));
                            Log.e("DISCOUNT", String.valueOf(discTransDiscount));


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) / 1.12);
                            }


                            Log.e("DISCOUNT", String.valueOf(discTransVatableSales));

                            // discTransVatExemptSales=discTransTotal/1.12;
                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount;
                            discTransVatAmount = discTransDueAmount - discTransDueAmount / 1.12;

                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) - discTransDiscount - discTransVatAmount);
                            }


                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay(discTransTotal);
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                                    String DiscAmount = String.valueOf(((discTransDiscount)));
                                    ;
                                    Log.e("DiscAmount", DiscAmount);
                                    String DiscPercent = discountValue;
                                    String vat = "0.00";
                                    // String vat=tv_lessVat.getText().toString();
                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                    } else if (discCategory.equals("REG")) {
                        alertDialog.dismiss();
                        Log.e("OTHER DISCOUNT", "YES");

                        discountFormat = 2;
                        discountLabelIndicator = 4;
                        //  Log.e("DISCOUNT TRANSACTION","PWD");
                        discTransTotal = cashierItem.getTotalDueAmount();
                        Log.e("OTHER DISCTOTAL", String.valueOf(discTransTotal));
                        if (discountExlude.equals("YES")) {


                            discTransDiscount = (discTransTotal) * (Double.parseDouble(discountValue) / 100) * -1;


//                                        if (salesExlude.equals("YES")) {
//
//                                            discTransVatableSales=((discTransTotal+discTransDiscount)/1.12);
//                                           // discTransVatableSales=discTransTotal/1.12;
//                                        }
//                                        else if (salesExlude.equals("NO")){
//                                            discTransVatableSales=((discTransTotal+discTransDiscount));
//                                           // discTransVatableSales=discTransTotal/1.12;
//                                        }

                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                Log.e("REMOVE DISC ON VAT", "YES");
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                Log.e("REMOVE DISC ON VAT", "NO");
                                discTransVatableSales = ((discTransTotal) / 1.12);
                            }

                            //discTransVatAmount = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount + discTransLessVat;

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * (Double.parseDouble(discountValue) / 100)) * -1);
                                    String vat = String.valueOf((Double.parseDouble(OrderPriceTotal) / 1.12 * .12) * -1);
                                    String DiscPercent = discountValue;
                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                                    // String vat=tv_lessVat.getText().toString();
                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                        if (discountExlude.equals("NO") && ProRated.equals("NO")) {
                            discTransTotal = cashierItem.getTotalDueAmount();
                            Log.e("OTHER exclude NO", String.valueOf(discTransTotal));

                            discTransDiscount = discTransTotal * (Double.parseDouble(discountValue) / 100) * -1;
                            Log.e("total", String.valueOf(discTransTotal));
                            Log.e("discount", String.valueOf((Double.parseDouble(discountValue) / 100) * -1));
                            Log.e("total discount", String.valueOf(discTransDiscount));


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                Log.e("REMOVE DISC ON VAT", "YES");
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                                discTransVatAmount = discTransTotal - (discTransVatableSales);
                            } else {
                                Log.e("REMOVE DISC ON VAT", "NO");
                                discTransVatableSales = ((discTransTotal) / 1.12);
                                discTransVatAmount = discTransTotal - (discTransVatableSales);
                            }


                            //  discTransVatableSales=discTransTotal/1.12;
                            //discTransVatAmount=discTransTotal-(discTransTotal/1.12);
                            //discTransVatAmount = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount;

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                               String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100)));
//                                               Log.e("price total",String.valueOf(Double.parseDouble(OrderPriceTotal)/1.12));
//                                                Log.e("discount value",String.valueOf(Double.parseDouble(discountValue)/100));
//                                               // String DiscAmount=String.valueOf(discTransDiscount);
//                                                Log.e("INSERT DISC",DiscAmount);
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    String DiscAmount = String.valueOf((Double.parseDouble(OrderPriceTotal) * (Double.parseDouble(discountValue) / 100)) * -1);

                                    String DiscPercent = discountValue;
                                    // String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
                                    String vat = "0.00";
                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }
                        if (discountExlude.equals("NO") && ProRated.equals("YES")) {


                            Log.e("PRORATED", "YES");
                            discTransDiscount = (discTransTotal / Double.parseDouble("1.12")) * (Double.parseDouble(discountValue) / 100) * -1;
                            Log.e("TOTAL", String.valueOf(discTransTotal));
                            Log.e("DISCOUNT", String.valueOf(discTransDiscount));


                            if (RemoveDiscountOnVatsales.equals("YES")) {
                                discTransVatableSales = ((discTransTotal + discTransDiscount) / 1.12);
                            } else {
                                discTransVatableSales = ((discTransTotal) / 1.12);
                            }


                            Log.e("DISCOUNT", String.valueOf(discTransVatableSales));

                            // discTransVatExemptSales=discTransTotal/1.12;
                            // discTransLessVat = discTransTotal/1.12-discTransTotal;
                            discTransDueAmount = discTransTotal + discTransDiscount;
                            discTransVatAmount = discTransDueAmount - discTransDueAmount / 1.12;


                            Log.e("-------", "---------");
                            Log.e("discTransDiscount", String.valueOf(discTransDiscount));
                            Log.e("discTransVatExemptSales", String.valueOf(discTransVatExemptSales));
                            Log.e("discTransLessVat", String.valueOf(discTransLessVat));
                            Log.e("discTransDueAmount", String.valueOf(discTransDueAmount));
                            Log.e("-------", "---------");

                            // discTransDiscount=100/1.12*.


                            lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
                            lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));

                            lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
                            lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
                            tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
                            tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
                            tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
                            lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
                            lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));


                            cashierItem.setTotalAmountToPay(discTransTotal);
                            cashierItem.setVatableAmount(discTransVatableSales);
                            cashierItem.setAmountDiscount(discTransDiscount);
                            cashierItem.setTaxAmount(discTransVatAmount);
                            cashierItem.setVatExemptSale(discTransVatExemptSales);
                            cashierItem.setZeroRatedSales(discTransZeroRatedSales);
                            cashierItem.setLessVat(discTransLessVat);
                            cashierItem.setTotalDueAmount(discTransDueAmount);


                            //insert
                            if (checkInvoiceReceiptItem.getCount() != 0) {
                                DatabaseHandler myDb = new DatabaseHandler(getContext());
                                while (checkInvoiceReceiptItem.moveToNext()) {

//                                                String TransactionID=checkInvoiceReceiptItem.getString(0);
//                                                String OrderID=checkInvoiceReceiptItem.getString(1);
//                                                String OrderName=checkInvoiceReceiptItem.getString(2);
//                                                String OrderQty=checkInvoiceReceiptItem.getString(3);
//                                                String OrderPrice=checkInvoiceReceiptItem.getString(4);
//                                                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
//                                                String TransactionTime=checkInvoiceReceiptItem.getString(6);
//                                                String TransactionDate=checkInvoiceReceiptItem.getString(7);
//                                                String DiscountType=discountType;
//                                                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
//                                                String DiscQty=checkInvoiceReceiptItem.getString(3);
//                                                String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
//                                                String DiscPercent=discountValue;
//                                                String vat=String.valueOf(Double.parseDouble(OrderPriceTotal)-Double.parseDouble(OrderPriceTotal)/1.12);
//                                                String DiscBuyerName=" ";
//                                                String DiscIdNumber=" ";
//                                                String DiscOther=" ";


                                    String TransactionID = checkInvoiceReceiptItem.getString(0);
                                    String OrderID = checkInvoiceReceiptItem.getString(1);
                                    String OrderName = checkInvoiceReceiptItem.getString(2);
                                    String OrderQty = checkInvoiceReceiptItem.getString(3);
                                    String OrderPrice = checkInvoiceReceiptItem.getString(4);
                                    String OrderPriceTotal = checkInvoiceReceiptItem.getString(5);
                                    String TransactionTime = checkInvoiceReceiptItem.getString(6);
                                    String TransactionDate = checkInvoiceReceiptItem.getString(7);
                                    String DiscountType = discountType;
                                    String ItemRemarks = checkInvoiceReceiptItem.getString(9);
                                    String DiscQty = checkInvoiceReceiptItem.getString(3);
                                    //  String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*(Double.parseDouble(discountValue)/100)));
                                    //      String DiscAmount=String.valueOf((Double.parseDouble(OrderPriceTotal)*(Double.parseDouble(discountValue)/100))*-1);;
                                    String DiscAmount = String.valueOf(((discTransDiscount)));
                                    ;
                                    Log.e("DiscAmount", DiscAmount);
                                    String DiscPercent = discountValue;
                                    String vat = "0.00";
                                    // String vat=tv_lessVat.getText().toString();
                                    String DiscBuyerName = " ";
                                    String DiscIdNumber = " ";
                                    String DiscOther = " ";


                                    boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                                            (TransactionID,
                                                    OrderID,
                                                    OrderName,
                                                    OrderQty,
                                                    OrderPrice,
                                                    OrderPriceTotal,
                                                    TransactionTime,
                                                    TransactionDate,
                                                    DiscountType,
                                                    ItemRemarks,
                                                    DiscQty,
                                                    String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                                    DiscPercent,
                                                    String.format("%7.2f", Double.parseDouble(vat)),
                                                    DiscBuyerName,
                                                    DiscIdNumber,
                                                    DiscOther);
                                }

                            }


                        }

                    }


                    if (discCategory.equals("SCD")){
                        ll_forDiscountType.setVisibility(View.VISIBLE);
                        lbl_discountLabel.setText("SENIOR CITIZEN DISCOUNT");
                    }
                    else if (discCategory.equals("PWD")){
                        ll_forDiscountType.setVisibility(View.VISIBLE);
                        lbl_discountLabel.setText("PWD DISCOUNT");
                    }
                    else if (discountType.equals("DIPLOMAT")){
                        ll_forDiscountType.setVisibility(View.VISIBLE);
                        lbl_discountLabel.setText("DIPLOMAT");
                    }
                    else if (discCategory.equals("REG")){
                        ll_forDiscountType.setVisibility(View.VISIBLE);
                        lbl_discountLabel.setText("REGULAR DISCOUNT");
                    }




                }


                else if (OpenDiscount.equalsIgnoreCase("YES")){

//
                    mapCode2Activate=5;


                    openPrice();


                }












                loadLabelData();

                cashierItem.setTotalAmountToPay(discTransDueAmount);
                Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
                alertDialog.dismiss();

                //    RefreshScreen();
            }


            //   alertDialog.dismiss();


            if (OpenDiscount.equalsIgnoreCase("NO")){
                alertDialog.dismiss();
                DialogCursor=0;
                checkOut();
            }


            mapCode2Activate=1;





        }

    }





    private void openPrice(){
       // InitT9MapCode();
        //InvoiceCursor=101;

       // mapCode2Activate=5;

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(),R.style.DialogSlide);


        LayoutInflater inflater = getLayoutInflater();
        final View alertLayout = inflater.inflate(R.layout.add_item_price_keypad, null);
        et_quantity = alertLayout.findViewById(R.id.et_quantity);
        TextView tv_label = alertLayout.findViewById(R.id.tv_label);
        tv_label.setText("OPEN DISCOUNT");

        Button btn_0 = alertLayout.findViewById(R.id.btn_0);
        String text = et_quantity.getText().toString();
        btn_0.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "0");

            }
        });

        Button btn_00 = alertLayout.findViewById(R.id.btn_00);
        btn_00.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "00");
            }
        });
        Button btn_dot = alertLayout.findViewById(R.id.btn_dot);
        btn_dot.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + ".");
            }
        });

        Button btn_1 = alertLayout.findViewById(R.id.btn_1);
        btn_1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "1");
            }
        });
        Button btn_2 = alertLayout.findViewById(R.id.btn_2);
        btn_2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "2");
            }
        });
        Button btn_3 = alertLayout.findViewById(R.id.btn_3);
        btn_3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "3");
            }
        });
        Button btn_4 = alertLayout.findViewById(R.id.btn_4);
        btn_4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "4");
            }
        });
        Button btn_5 = alertLayout.findViewById(R.id.btn_5);
        btn_5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "5");
            }
        });
        Button btn_6 = alertLayout.findViewById(R.id.btn_6);
        btn_6.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "6");
            }
        });
        Button btn_7 = alertLayout.findViewById(R.id.btn_7);
        btn_7.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "7");
            }
        });
        Button btn_8 = alertLayout.findViewById(R.id.btn_8);
        btn_8.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "8");
            }
        });
        Button btn_9 = alertLayout.findViewById(R.id.btn_9);
        btn_9.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                et_quantity.setText(et_quantity.getText().toString() + "9");
            }
        });
        ImageButton ibtn_delete = alertLayout.findViewById(R.id.ibtn_delete);
        ibtn_delete.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int index = et_quantity.getText().length();
                if (index > 0) {
                    et_quantity.getText().delete(index - 1, index);

                } else {

                }
            }
        });

        ImageButton imgb_exit = alertLayout.findViewById(R.id.imgb_exit);
        imgb_exit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {


                alertDialog.dismiss();
                alertDialogQty.dismiss();
                DialogCursor=0;
                checkOut();
            }
        });


        ImageButton ibtn_confirm = alertLayout.findViewById(R.id.ibtn_confirm);

        builder.setView(alertLayout);

        alertDialogQty  = builder.create();

        alertDialogQty.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        alertDialogQty.show();
        alertDialogQty.setCanceledOnTouchOutside(false);
        alertDialogQty.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        alertDialogQty.getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_HIDE_NAVIGATION|
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);

        ibtn_confirm.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
//                int itemQty=1;
//                String quantityText=et_quantity.getText().toString();
//                if(!quantityText.matches("")){
//                    FinalItemQty = et_quantity.getText().toString().trim();
//                    Log.e("ItemQty","NOT EMPTY"+et_quantity.getText().toString());
//
//                    if (PLUList.size()!=0) {
//                        Toast.makeText(getActivity(), removeWords(et_scanItem.getText().toString().trim(), "PLU"), Toast.LENGTH_SHORT).show();
//                        String str = removeWords(ButtonPrefix, "PLU");
//                        // et_scanItem.setText("");
//                        // insertPLU(Integer.parseInt(str));
//
//                        if (PLUList.size()!=0) {
//                            ItemCursor = Integer.parseInt(str)-1;
//                            // FinalItemQty = "1";
//                            //addInvoice();
//
//                        }
//
//                    }
//
//
//
////                            addInvoice();
//
//
//                    alertDialogQty.dismiss();
//                    openPriceQty(ButtonPrefix,et_quantity.getText().toString());
//                    FinalItemQty = "";
//                    InvoiceCursor=0;
//
//
//                }else{
//                    FinalItemQty = String.valueOf(itemQty);
//                    Log.e("ItemQty","EMPTY");
//                    Toast.makeText(getContext(), "PLEASE INPUT AMOUNT", Toast.LENGTH_SHORT).show();
//                }
//                //FinalItemQty = et_quantity.getText().toString().trim();
//                //   ItemCursor = child.getId();
//
//                //   insertPLU();
//
//
//
//

                openPriceDiscount(et_quantity.getText().toString());

                alertDialog.dismiss();
                alertDialogQty.dismiss();
                DialogCursor=0;
                checkOut();

            }
        });


        Log.e("TAG", "openPrice: "+alertDialogQty );




    } //InvoiceCursor = 101;

    private void openPriceDiscount(String amount){


        Log.e("discount type",discountType.substring(0,3));
        Log.e("discount type",discountValue);
        Log.e("discount Exclude",discountExlude);
        Log.e("ProRated",ProRated);


        Double discTransTotal=0.00;
        Double discTransVatableSales=0.00;
        Double discTransDiscount=0.00;
        Double discTransVatAmount=0.00;
        Double discTransVatExemptSales=0.00;
        Double discTransZeroRatedSales=0.00;
        Double discTransLessVat=0.00;
        Double discServiceCharge=0.00;
        Double discTransDueAmount=0.00;


        discTransTotal = (cashierItem.getTotalDueAmount());
        //discTransVatableSales=0.00;
        discTransVatableSales=cashierItem.getTotalDueAmount();
        discTransDiscount = Double.parseDouble(amount);
        discTransVatAmount=0.00;



        lbl_total.setText(String.valueOf(Finalformat.format(discTransTotal)));
        lbl_subtotal.setText(String.valueOf(Finalformat.format(discTransVatableSales)));
        lbl_discount.setText(String.valueOf(Finalformat.format(discTransDiscount)));
        Log.e("Discount Amount",String.valueOf(String.valueOf(Finalformat.format(discTransDiscount))));
        lbl_tax.setText(String.valueOf(Finalformat.format(discTransVatAmount)));
        tv_vatExemptSale.setText(String.valueOf(Finalformat.format(discTransVatExemptSales)));
        tv_zeroRatedSales.setText(String.valueOf(String.valueOf(Finalformat.format(discTransZeroRatedSales))));
        tv_lessVat.setText(String.valueOf(Finalformat.format(discTransLessVat)));
        lbl_due.setText(String.valueOf(Finalformat.format(discTransDueAmount)));
        lbl_dueFinal.setText(String.valueOf(DecFormat.format(discTransDueAmount)));

        cashierItem.setTotalAmountToPay((discTransTotal));
        cashierItem.setVatableAmount(discTransVatableSales);
        cashierItem.setAmountDiscount(discTransDiscount);
        cashierItem.setTaxAmount(discTransVatAmount);
        cashierItem.setVatExemptSale(discTransVatExemptSales);
        cashierItem.setZeroRatedSales(discTransZeroRatedSales);
        cashierItem.setLessVat(discTransLessVat);
        cashierItem.setTotalDueAmount(discTransDueAmount);


        if (checkInvoiceReceiptItem.getCount()!=0){
            DatabaseHandler myDb = new DatabaseHandler(getContext());
            while(checkInvoiceReceiptItem.moveToNext()){

                String TransactionID=checkInvoiceReceiptItem.getString(0);
                String OrderID=checkInvoiceReceiptItem.getString(1);
                String OrderName=checkInvoiceReceiptItem.getString(2);
                String OrderQty=checkInvoiceReceiptItem.getString(3);
                String OrderPrice=checkInvoiceReceiptItem.getString(4);
                String OrderPriceTotal=checkInvoiceReceiptItem.getString(5);
                String TransactionTime=checkInvoiceReceiptItem.getString(6);
                String TransactionDate=checkInvoiceReceiptItem.getString(7);
                String DiscountType=discountType;
                String ItemRemarks=checkInvoiceReceiptItem.getString(9);
                String DiscQty=checkInvoiceReceiptItem.getString(3);
                String DiscAmount=String.valueOf((discTransDiscount)*-1);
                // String DiscAmount=String.valueOf((300/1.12*(Double.parseDouble(discountValue)/100))*-1);
           //     String vat=String.valueOf((Double.parseDouble(OrderPriceTotal)/1.12*.12)*-1);
                String vat = String.valueOf(discTransVatAmount);
                String DiscPercent=discountValue;

                // String vat=tv_lessVat.getText().toString();
                String DiscBuyerName=custInfo.getCustName();
                String DiscIdNumber=custInfo.getCustIDNo();
                String DiscOther=custInfo.getCustTIN();






                boolean isInserted = myDb.insertInvoiceReceiptDiscountTemp
                        (TransactionID,
                                OrderID,
                                OrderName,
                                OrderQty,
                                OrderPrice,
                                OrderPriceTotal,
                                TransactionTime,
                                TransactionDate,
                                DiscountType,
                                ItemRemarks,
                                DiscQty,
                                String.format("%7.2f", Double.parseDouble(DiscAmount)),
                                DiscPercent,
                                String.format("%7.2f", Double.parseDouble(vat)),
                                DiscBuyerName,
                                DiscIdNumber,
                                DiscOther );

            }

        }










        //region



        if (discCategory.equals("SCD")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("DISCOUNT");
        }
        else if (discCategory.equals("PWD")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("DISCOUNT");
        }
        else if (discountType.equals("DIPLOMAT")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("DIPLOMAT");
        }
        else if (discCategory.equals("REG")){
            ll_forDiscountType.setVisibility(View.VISIBLE);
            lbl_discountLabel.setText("DISCOUNT");
        }


        //endregion





        loadLabelData();

        cashierItem.setTotalAmountToPay(discTransDueAmount);
        Log.e("totalAmountToPay",String.valueOf(discTransDueAmount));
        alertDialog.dismiss();



    }

    public class RecyclerviewAdapterTender extends RecyclerView.Adapter <cashier_payment.RecyclerviewAdapterTender.MyViewHolder>{

        private ArrayList<invoice_fragment_button_model> FunctionList;
        ArrayList<String>Selectlist = new ArrayList<String>();
        private Context Context;
        private cashier_payment.RecyclerviewAdapterTender.MyViewHolder holder;
        private int position;
        private int switchMode;
        private  int lastPos=0;
        private int checkedPosition = -1;

        public RecyclerviewAdapterTender(Context context, ArrayList<invoice_fragment_button_model> functionList,ArrayList<String>selectlist) {
            // public RecyclerviewAdapter(List<orderItem> orderItemList,ArrayList<String> selectList, Context context) {
            this.Context = context;
            this.FunctionList = functionList;
            this.Selectlist = selectlist;
//            this.switchMode=switchModeButton;

        }

        @NonNull
        @Override
        public cashier_payment.RecyclerviewAdapterTender.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.payment_fragment_button_layout,parent,false);


            cashier_payment.RecyclerviewAdapterTender.MyViewHolder holder = new cashier_payment.RecyclerviewAdapterTender.MyViewHolder(view);
            return holder;
        }




        @Override
        public void onBindViewHolder(@NonNull cashier_payment.RecyclerviewAdapterTender.MyViewHolder holder, @SuppressLint("RecyclerView") final int position) {
            this.holder = holder;
            this.position = position;
//            final invoice_fragment_button_model model = new invoice_fragment_button_model(FunctionList.get(position).getButtonID(),FunctionList.get(position).getButtonName());
////            holder.tv_ItemName.setText(ArrayDataList.get(position).getItemName());
            int ButtonID = FunctionList.get(position).getButtonID();
            String ButtonName=FunctionList.get(position).getButtonName();

            holder.tv_buttonNumber.setText("Btn + " + String.valueOf(ButtonID) + " + Ent");
            holder.tv_buttonDetails.setText(String.valueOf(ButtonName));
//
//
//            holder.ll_linearLayout.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View view) {
//                    Log.d("TAG", "SWITCHMODE : "+ButtonName);
//                    selectList.clear();
//                    typeOfPayment=ButtonName;
//                   // selectList.add(ButtonName);
//
//
//
//
////                    Log.e("Select list ",Selectlist.toString());
////                    holder.iv_check.setVisibility(View.VISIBLE);
////                    for (int x=0;x<selectList.size();x++){
////                        if(selectList.contains(ButtonName)){
////                            holder.iv_check.setVisibility(View.VISIBLE);
////                        }
////                        else{
////                            holder.iv_check.setVisibility(View.GONE);
////                        }
////                    }
//
//
//
//
//
////                    model.setSelected(!model.isSelected());
//                 // selectList.clear();
////
////
//                    if (!model.isSelected()){
//
//                        //holder.parentLayout.setBackgroundColor(model.isSelected() ? Color.WHITE : context.getResources().getColor(R.color.myColorButtonPressed));
//                        holder.iv_check.setVisibility(View.VISIBLE);
//                        selectList.add(ButtonName);
//                        Log.e("Select list ",Selectlist.toString());
//                    }
//                    else{
//                      //  holder.parentLayout.setBackgroundColor(!model.isSelected() ? context.getResources().getColor(R.color.myColorButtonPressed ): Color.WHITE);
//                        holder.iv_check.setVisibility(View.INVISIBLE);
//                        selectList.remove(ButtonName);
//                        Log.e("Select list ",Selectlist.toString());
//                    }
//
//
//
//
//
//
//
//
//
//
//
//
//
//                }
//            });

            // holder.bind(FunctionList.get(position));

            holder.ll_linearLayout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    typeOfPayment=String.valueOf(ButtonName);
                    alertDialog.dismiss();
                    // Log.e("Select list ",typeOfPayment.toString());
                    creditCardPaymentDetails(typeOfPayment);
                }
            });


        }

        @Override
        public int getItemCount() {
            return FunctionList.size();
        }
        public List<String> getList() {
            return selectList;
        }



        public class MyViewHolder extends RecyclerView.ViewHolder{


            LinearLayout ll_linearLayout;
            TextView tv_buttonNumber,tv_buttonDetails;
            ImageView iv_check;




            public MyViewHolder(@NonNull View itemView) {
                super(itemView);
//
                ll_linearLayout = itemView.findViewById(R.id.ll_linearLayout);
                tv_buttonNumber = itemView.findViewById(R.id.tv_buttonNumber);
                tv_buttonDetails = itemView.findViewById(R.id.tv_buttonDetails);
                iv_check = itemView.findViewById(R.id.iv_check);


            }

//            void bind (final invoice_fragment_button_model invoice_fragment_button_model){
//                if (checkedPosition == -1){
//                    iv_check.setVisibility(View.GONE);
//                }
//                else{
//                    if (checkedPosition == getAdapterPosition()){
//                        iv_check.setVisibility(View.VISIBLE);
//                        Log.e("adapter posotion ",String.valueOf(getAdapterPosition()));
//                    }
//                    else{
//                        iv_check.setVisibility(View.GONE);
//                    }
//                }
//                ll_linearLayout.setOnClickListener(new View.OnClickListener() {
//                    @Override
//                    public void onClick(View view) {
//                        iv_check.setVisibility(View.VISIBLE);
//                        if (checkedPosition != getAdapterPosition()){
//                            notifyItemChanged(checkedPosition);
//                            checkedPosition=getAdapterPosition();
//                        }
//                     //   selectList.clear();
//                    typeOfPayment=tv_buttonDetails.getText().toString();
//                        Log.e("Select list ",typeOfPayment.toString());
//
//                    }
//                });
//            }
        }
        public invoice_fragment_button_model getSelected(){
            if (checkedPosition!=1){
                return FunctionList.get(checkedPosition);
            }
            return null;
        }
    }
    ArrayList<invoice_discount_model> DiscountModelList = new ArrayList<>();
    public class RecyclerviewAdapterDiscount extends RecyclerView.Adapter <cashier_payment.RecyclerviewAdapterDiscount.MyViewHolder>{

        private  ArrayList<invoice_discount_model> DiscountModelList;
        ArrayList<String>Selectlist = new ArrayList<String>();
        private Context Context;
        private cashier_payment.RecyclerviewAdapterDiscount.MyViewHolder holder;
        private int position;
        private int switchMode;

        public RecyclerviewAdapterDiscount(Context context, ArrayList<invoice_discount_model> discountModelList) {
            // public RecyclerviewAdapter(List<orderItem> orderItemList,ArrayList<String> selectList, Context context) {
            this.Context = context;
            this.DiscountModelList = discountModelList;


        }

        @NonNull
        @Override
        public cashier_payment.RecyclerviewAdapterDiscount.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.invoice_fragment_button_function_layout,parent,false);


            cashier_payment.RecyclerviewAdapterDiscount.MyViewHolder holder = new cashier_payment.RecyclerviewAdapterDiscount.MyViewHolder(view);
            return holder;
        }




        @Override
        public void onBindViewHolder(@NonNull cashier_payment.RecyclerviewAdapterDiscount.MyViewHolder holder, @SuppressLint("RecyclerView") final int position) {
            this.holder = holder;
            this.position = position;

            int cursorID = Integer.parseInt(DiscountModelList.get(position).getDiscountID());
//            holder.tv_ItemName.setText(ArrayDataList.get(position).getItemName());
            String ButtonID = DiscountModelList.get(position).getDiscountID();
            String ButtonName=DiscountModelList.get(position).getDiscountName();


            holder.tv_buttonNumber.setText("Btn + "+String.valueOf(ButtonID)+" + Ent");
            holder.tv_buttonDetails.setText(String.valueOf(ButtonName));
            holder.ll_linearLayout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                    DiscountSelection(position);
                   // keyboardCursor=0;

//                    Log.e("TAG", "onClick: "+"testselect" );
//                    alertDialog.dismiss();
//                    DialogCursor=0;
//                    checkOut();









//find me

                }
            });















        }

        @Override
        public int getItemCount() {
            return DiscountModelList.size();
        }
        public List<String> getList() {
            return selectList;
        }



        public class MyViewHolder extends RecyclerView.ViewHolder{


            LinearLayout ll_linearLayout;
            TextView tv_buttonNumber,tv_buttonDetails;



            public MyViewHolder(@NonNull View itemView) {
                super(itemView);
//
                ll_linearLayout = itemView.findViewById(R.id.ll_linearLayout);
                tv_buttonNumber = itemView.findViewById(R.id.tv_buttonNumber);
                tv_buttonDetails = itemView.findViewById(R.id.tv_buttonDetails);


            }
        }
    }



    public class RecyclerviewAdapterOtherPayment extends RecyclerView.Adapter <cashier_payment.RecyclerviewAdapterOtherPayment.MyViewHolder>{

        private  ArrayList<other_payment_model> OtherPaymentList;
        ArrayList<String>Selectlist = new ArrayList<String>();
        private Context Context;
        private cashier_payment.RecyclerviewAdapterOtherPayment.MyViewHolder holder;
        private int position;
        private int switchMode;

        public RecyclerviewAdapterOtherPayment(Context context, ArrayList<other_payment_model> otherPaymentList) {
            // public RecyclerviewAdapter(List<orderItem> orderItemList,ArrayList<String> selectList, Context context) {
            this.Context = context;
            this.OtherPaymentList = otherPaymentList;


        }

        @NonNull
        @Override
        public cashier_payment.RecyclerviewAdapterOtherPayment.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.invoice_fragment_button_function_layout,parent,false);


            cashier_payment.RecyclerviewAdapterOtherPayment.MyViewHolder holder = new cashier_payment.RecyclerviewAdapterOtherPayment.MyViewHolder(view);
            return holder;
        }




        @Override
        public void onBindViewHolder(@NonNull cashier_payment.RecyclerviewAdapterOtherPayment.MyViewHolder holder, @SuppressLint("RecyclerView") final int position) {
            this.holder = holder;
            this.position = position;

            int CursorID = OtherPaymentList.get(position).getButtonID();
//            holder.tv_ItemName.setText(ArrayDataList.get(position).getItemName());
            String ButtonID = OtherPaymentList.get(position).getOtherPaymentAutoIDList();
            String ButtonName=OtherPaymentList.get(position).getPaymentNameList();


            holder.tv_buttonNumber.setText("Btn + "+String.valueOf(position+1) + " + Ent");
            holder.tv_buttonDetails.setText(String.valueOf(ButtonName));

            holder.ll_linearLayout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {



                    otherPaymentSelection(position);
                    DialogCursor=0;













                }
            });
















        }

        @Override
        public int getItemCount() {
            return OtherPaymentList.size();
        }
        public List<String> getList() {
            return selectList;
        }



        public class MyViewHolder extends RecyclerView.ViewHolder{


            LinearLayout ll_linearLayout;
            TextView tv_buttonNumber,tv_buttonDetails;



            public MyViewHolder(@NonNull View itemView) {
                super(itemView);
//
                ll_linearLayout = itemView.findViewById(R.id.ll_linearLayout);
                tv_buttonNumber = itemView.findViewById(R.id.tv_buttonNumber);
                tv_buttonDetails = itemView.findViewById(R.id.tv_buttonDetails);


            }
        }
    }


}